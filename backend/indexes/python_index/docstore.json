{"docstore/metadata": {"3ff15edc-7942-4114-a5fd-6b340295ef46": {"doc_hash": "10d3ec8d57c77ff83ef4109b08162d3cfab6bcc6776530110241b6912e4f65a1"}, "cd94dcab-4db3-4abc-b656-ce09ebfca43c": {"doc_hash": "2feaef88bd7e4c94f45485832fde7bc7ff3d1837d9ca1fc0add2ead6e26227f4"}, "8123d867-4423-49dc-82da-e49fa4af92de": {"doc_hash": "1e9dfdd26f0297d972b9d910f4389868ed87b3173a129aee513385f6684dbf4f"}, "025780ae-7bee-4b3d-9f26-3e53847bec82": {"doc_hash": "27a721e0f4b49691155e848fbc6ff272dd01add382b736dcb05fed16bc04912c"}, "6a9bf364-ad0e-4806-b5af-7770c8e596c2": {"doc_hash": "09ce8ec7aafaecb2794a01f0dee44f2ce04551dee18537f2bc7c6863d6145456"}, "78c3cd94-ceae-4f42-85a9-7be5d54068f2": {"doc_hash": "4c11df352cf3664839181bad7aab4f1ad27ba0551b8ab393268cc32b38ea6604"}, "835a26f2-5e94-45cb-b3bc-44e7f954485f": {"doc_hash": "cd0d2a4b287e124eb5ffbd49a911d7af7adef554328bec269eb8877c67c2ad9d"}, "a6ab3cdb-fda5-47bf-bc23-6776228b14c6": {"doc_hash": "e2696a0e915bd2be627b56cbe4d0ddca054d19f3618e780c6b548661cb03003f"}, "ea2a14ae-a08d-45a6-8068-95d5823bdc71": {"doc_hash": "d8dff7f0abbd979188379bfc0cc7ac6915ecb21c46d6908f6623e879031752cb"}, "9f076bb2-97d0-4eb1-ab5f-7c4eeaa54aea": {"doc_hash": "eded212476ab5977b0dd72cefb7dad7802ca7f9e1c91721fdd97cb673c5de6dd"}, "91b350ee-9269-42e4-a39c-e551286b1973": {"doc_hash": "fb4a7f29c81cad1110492de4a33133589ef4043fe54a92155f47ce928f146648"}, "0c72df9a-3bad-4a9a-9244-c32e6a65fcd3": {"doc_hash": "723b53896190a809edc4814cc48ec946a54af5f03c4fdc98529c2c2ad2924b6f"}, "c5032cf3-9aef-46b5-9a3a-568a46176101": {"doc_hash": "e24e5f8e68af2dcfe860a118a75a37cfc1e9698059bc796926e2d959e1ffdd0c"}, "5356e71e-b498-48bd-badf-140ed0db1276": {"doc_hash": "9ad3b53d5c3cb20c37c010e107367e3b0bc75e0831c0c296dfedc8a7a264e8cd"}, "3343c873-f472-4679-b09d-e07803d5331a": {"doc_hash": "d1637bb326371d150d34e900fb26639b96240da3773d275f1c7c0be6d7e8293d"}, "5612d3c8-00a5-4198-bc07-3b7e59cb8992": {"doc_hash": "2d2f60dda99c4f8dee669c75b83e4ac65defbda884f2963e66085d0d6eabc3d6"}, "861270ac-e102-4a7b-a475-20dbe68b66ae": {"doc_hash": "32abdba86d3d89b8aab85f5824c1d77bc5405daf9726fbb46a408c25ded6181a"}, "cd37c02a-85dc-4552-9a7b-3cf0c74c1de6": {"doc_hash": "a9c4d1743c6f295f0bca9524209fd2d71e97af0adb5c6026516064ea900895d0"}, "44687a84-1741-4935-8752-a74128cdc174": {"doc_hash": "25b945dd5f44668f66e071910eb88a8653affd7c7fa88077d978f25b1e444041"}, "6060671e-a630-49e8-a82c-fa6ff5913ca8": {"doc_hash": "d582d440036e5a02691df3957bb89f41e0c672418269df3f0c3280e3af8571bc"}, "fb8df448-b98c-4f7b-a3ff-0a3486eefca9": {"doc_hash": "035976c4fe720aa5c2f80ad25e08e3b43ea95ad12eb5aba145a956158d2398d9"}, "d9d28837-e655-4431-8d88-bf9a1d90b748": {"doc_hash": "c0dc74020b4f359af2b08696930abae032c6bc7a086d533f03f6fcb5a1c2fc10"}, "2bd04e90-e47e-4570-a25f-e7abf668e187": {"doc_hash": "2d95916fa9209361756911a271e7781a7f509e4e36c72a421ae090a20f8ad036"}, "94b99940-dba6-441d-99e6-c5113214a786": {"doc_hash": "6c7528e46d917edd6834355469cc75f60871b063c1145977a38ed08a4cc68c95"}, "10cb4c4c-5ec6-4808-8d89-04899e27327f": {"doc_hash": "7a01375d14a9e225d5959812b46c4b4277a1b47a473c33a1ccc42be8a0d34901"}, "d262813f-0c13-431b-8292-8386cd7a9aef": {"doc_hash": "a54259962d8e70cf165488f8b377b7fa90e8107b09d878555202ec4df90b597d"}, "be71a699-f052-4f1f-ad19-875988339108": {"doc_hash": "32a722162c7eeea6afb9a06fa6f8e3be6fb2b0f4b1421f3a0bfd7877e9556dc8"}, "d5867e41-f15c-48ac-937e-d02bb843eee1": {"doc_hash": "7539cd81f4901d608a7e6b6133ee3e76890ed00d3cb750c228a72572aef5d264"}, "9f4ac4c2-68ce-4c3e-ab50-c73b6815d615": {"doc_hash": "0e49bb9381f64ecb607a37a948bba07e4921f59cec90433353300742b126c1ef"}, "bd970fd6-d428-4d27-ae5c-3ffbcfde7dfd": {"doc_hash": "fcbb2a77a35a693c2706c6eb7d7262f38252a15244947b17ca3e64c6521a0e96"}, "8cd240f4-004b-40f5-a69b-3f77f4135d82": {"doc_hash": "eb98e7063ab24c682bccfb38db4e6722122b721a9286a43759668c75635a3800"}, "02c9d39d-cf55-475d-b584-1d619cb18f59": {"doc_hash": "8d3678b77d0c266250e7c8b112bd30c0db0f4e28db3bb233acbacfcdd6e62db1"}, "b3e5faa8-0551-4392-a02b-1d1bb614fcab": {"doc_hash": "c007b5d4330c56e9e9c6f9e906b9ecf2eaa878e89e0f94584d74b30fbd67451c"}, "c11ab4fc-f4d8-4bb5-aeb5-b3b78fee855b": {"doc_hash": "19dc6623bc3ac2ad68151474aa7da139a349c8e404cc9c1d94ef2943d25f6744"}, "f7c83c0c-01db-4a21-a67a-4da91460212e": {"doc_hash": "cf1d39c8469b4da554d6acbd24d26e541fda1d8f54bffc0e8acffb582a7cc119"}, "7d30c311-4a47-443b-afc2-16b61493a6cd": {"doc_hash": "5332aa4f6cd783b91edac37d9fe3b41f1371d811a4fd1d986f04329803189a8e"}, "01738cca-4fe7-47b5-b79f-29469f76a7fd": {"doc_hash": "6f3bc0541122f71ca6afaa0234fd390a4885a3172428e446273947ea6f52a559"}, "8a918de1-e315-4893-959b-c62a1e8f3779": {"doc_hash": "148d1d04bd99f88d6e4af9f8fcb8f7a4d2aa2b279524be2e644f0fd008ac8478"}, "7093dd4a-4396-4a2e-9073-a137f2ea510e": {"doc_hash": "0d298205929c6a6efb560ded100989d8c049a945cab47905b2e5a38663858844"}, "4c332c74-57ba-4e64-88a1-b01b716f27ca": {"doc_hash": "0c892a3fcea7eeaea9a075a6453b111ee13e1f16c6f28ff26632af12987c6d51"}, "39237fdb-9768-47e4-af37-04b845bd2773": {"doc_hash": "7000ccae6ed0a3b3b0bafb2a6ecad9a21d16a780f402a57b8559a505983e60c8"}, "f62d4dfb-eb39-4deb-a624-2ac5a7eda9c3": {"doc_hash": "cd6a41c00866d5b628e55220c098996e8e211168896a1d818c4751ca13cf1931"}, "f69eaa7c-ac1d-456d-bef9-f07c81eb6bd2": {"doc_hash": "786826703226723b672613eeb874e438155f20e2647f70d66903b05f700d4f34"}, "56ea3e30-b164-4155-9f49-75dcc225187f": {"doc_hash": "53ae66b7b94b5271a118264c7c4e2cb92e6713b17b3d38625e629b0e970bdcb8"}, "5649fa11-562a-4ac3-9aaf-2552d483c9ea": {"doc_hash": "8f6eab47c120b9abbc02b81cf6dc45ea98c2f30554ad8976807c94d0ce7e4015"}, "6bc0546f-7e13-4378-a00f-9e367b6f4c14": {"doc_hash": "17cb93285b42acca0ccc30f9b79974d856d3abde8b8d839f571f48628d555aa0"}, "fa37605f-ff53-4961-94c0-8252501630ff": {"doc_hash": "d7df309d3f3abd2a6950e8fad50080b2ac009fc960ed36b2f88a1e5d0660ff4b"}, "c1013b37-f220-4cb0-b83b-de3edffe3caf": {"doc_hash": "fda71d099dbf36b6e8679819c84f776839bbc5c9242e9080204c2b0f2e35743e"}, "203bfee5-757c-4a11-8372-0a8b0da4181b": {"doc_hash": "348622e8d75ba7fef194a2386d95bbf3830e8142f04989ce6f2c604457857c2d"}, "3a0456d6-33d3-463b-9625-436cf6d85169": {"doc_hash": "28c23151e42763f9f9591d5a52fdb0cdd50b8df291326b90b8fabc8476acd5bc"}, "cac3af8c-76df-4457-aa67-276a051d7c3a": {"doc_hash": "ab3bfa7e8af8afd58f67239fb14f5d6da1c419d2720eb154a84772af73109652"}, "19b1fb52-d09a-4659-b72f-217dccd8c104": {"doc_hash": "c37736e0e9f113b73b6460f94812194cc5228dc4efe8a605a3c0220ffd487531"}, "b5b3ffd0-158b-4696-bb7f-bbef0705360c": {"doc_hash": "368b9e923d1330d09a2324b23c827f41e56c765c2d5ffd36f35dc9fe85855048"}, "0d7e5f23-8c6a-4b5f-a0db-af396b196a5d": {"doc_hash": "a1c3052b813316b8992f4e5e5a041a5eddb7d5876945e707c871cb07c439b9f8"}, "1d2de8e3-c342-4751-a0b3-13be15e6c9e0": {"doc_hash": "1004adf5523cbfb8301c1ac5d6c514563948d76f8eea95ae058357b3e549719d"}, "cffc16df-9469-4c29-8220-b608c711ccff": {"doc_hash": "dc871a15530691344e3c5e96792aad36f6d48074479bc5837e316a1338c2f56d"}, "fd762952-0014-418a-8ecf-470162a8d368": {"doc_hash": "61d5f266819c56c8239dc5c8fe05edd299295ee9a8277d25a5f0c0e2f146712e"}, "c8e99237-77ac-464e-8904-3945f5912190": {"doc_hash": "7743379d9b5deddf233fb5b687c5d560df06e6f65353b52b4bf6d3f35183ad51"}, "960c7773-c2d8-42cd-8893-9b543944b74e": {"doc_hash": "15fc68c6735c724cb84ad8aad6ada0e038e6bb00fed87d298311cb34e27af4ab"}, "252135e2-98fe-49b5-9cef-7cb7d5c52a32": {"doc_hash": "6b0730938438d1e3b2e860dbac1144b91e588cdd79e25a4ea578744ae6bec067"}, "d5560e97-7bfd-45a6-8e72-7f72ce24ae3f": {"doc_hash": "282ed1259f8f3fb49a9f5ac2d90898b4238073b9bdc73fe3914e9ec4009f21f4"}, "6b76dbb5-62a0-4922-8157-ce58c9c25211": {"doc_hash": "2523b4a290c44e36651e13c93950ca4243391296849d2784c2bbe6f822e7e01c"}, "0bbf9f34-961f-45b3-98a9-59b77218051a": {"doc_hash": "e1350ae8da9f53ca0f687992e8024901dc0bb7b156507193b85ef4978000fc1e"}, "cb1b728f-cf38-4444-8ea0-64207eb1585e": {"doc_hash": "d6057e5e2c865f0f96571559c597fff82895c726d8a6ce92781d2a32ca709ff3"}, "ff8a2444-251d-470b-b581-155046079df4": {"doc_hash": "e66fd20a2d6bd5865f129c316e87d9e8ae7c320a09beb3f999747d260f8f176c"}, "8f4930ee-9d0f-41b9-b67b-244e77c7e1da": {"doc_hash": "407972674ea6ba6cc41b8df467e9019a028931aea0c0a746dc719901156f8343"}, "8b10fd78-ee1c-401a-a427-5efbf3fdce1e": {"doc_hash": "ec2bfe03320701bc6a7ae3a862fbec7f539235a3ba315924e6ef729713aa2ed4"}, "b64425e3-8bc3-4770-82d8-a2227e2e56bd": {"doc_hash": "cd84f1099ed0e6360d3ca110fbe1bdf8c0614d60c4b8894553375ab1aaea09fc"}, "0f608eb3-4924-4b10-975f-38aaae27eae5": {"doc_hash": "bc731cd26e78474660c2429ae6396273cff10001b5779745afc64c3dfd9e9959"}, "17288975-c1fd-4cec-86fc-c402626e5549": {"doc_hash": "a6afe4d2aa147c9c852186382e0f7b7b2701ef2a0e7488ad274b986f21e559ba"}, "0b8843c4-7654-4053-88d8-add60e34ac80": {"doc_hash": "e2baaad70c78b13c916710aaa287eb353f5dc99ce24a254e3dbf1ad4f0e7ede8"}, "b1d1a543-38fa-48c1-8e39-294897270742": {"doc_hash": "8bbeabc4aee2e37739b74ace3339f4dc56860a77f6e1d69a42c634e2ea1f3b68"}, "def12d8d-129d-463f-a753-938d3d327b92": {"doc_hash": "5939f60c77229442fa420667fd8b220de95ee39222bd83ffc72efb1a4271c93b"}, "eddaf335-f569-4b27-9438-1b435e605159": {"doc_hash": "f41f3a234ab1c0066ac21ce51e80fcc03e52c28889c547e876287fd86b221d77"}, "d0ce3c13-8c2a-4093-b2ef-5fdcc3400b00": {"doc_hash": "b89db195f695453bed25f0cf76546ea39494235c57896d55c2b63732c9176710"}, "ee709460-ee8f-4272-812a-5de286eb5a88": {"doc_hash": "790c6de9d9ac1710d223cddef7ac9ee1554fa3167b294f0a30a921d55e2e290e"}, "aef968b0-6853-4a26-9c0e-1a7ca15150d0": {"doc_hash": "f0c882e725149f11dd9aa38bca55ee6664967d87c689d2dd1a6e0ee5ceacba40"}, "ca42409f-0bf8-414e-9004-bb4de9e683db": {"doc_hash": "e624b7ea7e89867def675dedbef7383484f9cb81bd44449098087e53a9c72226"}, "15a3d013-697b-44f0-858f-0bd812ae6062": {"doc_hash": "528c2d228e38e664f402732336dbe0906d3f2b726a152265dd05843bfba3f02f"}, "967fa1a4-1290-405c-acd6-d6bf368adccb": {"doc_hash": "43b05c63e48e24380c08f17c6639cb583af1cb7e8708a1a725e3e410abdb70ef"}, "3ff25d96-cd3c-4835-90a8-260bd4a95a44": {"doc_hash": "e3d8993d7dde60ca83d7ac276fac18c56a97595f8537af66f23618a82ef21b1d"}, "22606178-7cec-4d25-aeba-01fe8862c5f4": {"doc_hash": "b0fb31a71ccf28f7a60715b7cae55f86e5bb8093fe61f49d38660efb96ba987d"}, "e7ce776f-7c12-4ee4-98e5-290e3840f212": {"doc_hash": "922313ce3674e6cddc5dfb3e3ddcd3ea79cb12d7ae53607b5787e84d61a2f3a8"}, "a6cde27b-0ae9-4884-9481-f01267e47cc4": {"doc_hash": "064a85e456a207baacf9fd2b73d598efe40e017bfcff08a9b3625eaa1a3a4477"}, "2f098cf3-f738-459c-8fb1-bea1b50fb09a": {"doc_hash": "7fc7ae970591bc7e99ec7b98eca01befa0812c17f0f68e7a29e0ca295c494c3f"}, "2ebb29ef-17bd-4981-a480-e2638c10fdc1": {"doc_hash": "ccfb2d329d67c28b48b53f5e6bc72e71080788be78e61acc34981a0e6be88676"}, "4542a351-b38d-4139-bdf2-e0e5e9ccdb7e": {"doc_hash": "d59d7cc771189a8ed1c7d172889b5bf8de556749e8068dda248b0c5718646fd2"}, "b80efd05-328d-4436-ab36-be2104d4ba82": {"doc_hash": "9990ca3f0f14fc526b62fdddce3d6b1dcd28d4949a992fb892edf7da4cb82886"}, "d6d6afd6-fe3e-4f24-8a4e-6166050b8107": {"doc_hash": "09317ecfadc093c7a1f47330bb1b501280c53e7e1e257d96c0eb40dae50ec3b9"}, "e598d0a4-f800-49cb-af2c-0fedd271a221": {"doc_hash": "ca3205273807fa073b1caf83a3e0fc03eb182f3aacbaf83507da6da40bf57f72"}, "21f2a690-e9fb-47b2-a5b4-01772e1400ec": {"doc_hash": "7398aeb44adb3372c548dad85ae79671da650460b6c666e2a24c1f52063bc946"}, "9fe93f97-3b87-4ba1-9570-84e7c64b1305": {"doc_hash": "0f1f13b14ed44ece14753b46353fbe9e1efe5c6edccbbb9337a53fb9d65548b5"}, "9c857517-d290-4185-b962-c78f200a2ade": {"doc_hash": "c62f1a312b9508cd18a0d178e4a4d2696bd1c1789de0fd0978db5bd8a510f101"}, "5d3e3937-7d0f-4748-abe6-a8916ae4847d": {"doc_hash": "bf35661cb914d680094a7096330b580c69cb0d9e7f079205f7767bdb1fbb2677"}, "78f48a7c-8095-40ea-889c-8063d254ea76": {"doc_hash": "8bf120f5d7e1d24cd9d3eb378cc8c781767bae3c7c19d9e16a0c55e1bbedf610"}, "c168eea9-eba5-48cb-8145-4167781c1c35": {"doc_hash": "af465ed1f90cc2b1f95a804f1bd5c718216aa4032e757d2d146acc62ef373d15"}, "83f38e4a-743e-43e4-a689-eeb33dcb0f9b": {"doc_hash": "80c3c3f715bcd9de7c0a5f44e197106fb51c33f4e0cac90be70ca00947d5e7b1"}, "f3d6608e-81c7-4df4-9fd1-0c28415460e9": {"doc_hash": "e630a127f7f7c7676a2254f847fc86dc3a7f02c3cfb549726f85018ef796f581"}, "9f61ab36-1b88-4628-8ee9-eee763e2a4fe": {"doc_hash": "c0d2d0d1c83092fa29e739e8a08c79e391f8302ec9b9dc16910fd83156ca8cb2"}, "e265b963-6aa2-446e-9573-15e32ca338e9": {"doc_hash": "d99b6eb2ba0127bd8561ea8d592697e2eee23006b1bc34bac8904988eeb595e6"}, "9f706a1d-5c5e-446d-ab65-708456c40080": {"doc_hash": "0409e30a5b8231f9b7970dd93cd8d250a1db63dc31f357ad00fa5481f7c58c06"}, "2ccb122f-491f-48b6-a432-1fe3243a7a1a": {"doc_hash": "578153eab1154fe5ccf9de9a97d21cb6672652ba4ff973a0e37c30fc76dce565"}, "19a355b6-7d74-423b-9cee-2883f4bf25cd": {"doc_hash": "44ab5e865ccb1c96c52aabab36514536eab7d5a1b70c5f02e64889ef86ae8b99"}, "7a96c4de-1f61-4275-9a0b-328e695e37f2": {"doc_hash": "73075b4cd0fd08c5e3c475e17c6974641d7bf818839ccc38c22861154f24a6b9"}, "2ccd4a68-89fd-425c-839e-ed83e4aee45f": {"doc_hash": "de35cb81a50b63428b290c8ce3c5dc9836a76ae558088a7ab39248df8be9f758"}, "508fc256-7148-45f1-902d-c4d0d957dff8": {"doc_hash": "af64ad5d22436a8fd62705bdfd2946dc1a1a25addf12bf9bdb9f507e9d3a5379"}, "c4d5155f-6114-49a1-84cc-491baf8a23d2": {"doc_hash": "ddd5cc004b72436331d3cc4bd895ae87b8c812c71ed0adbb80d4e1c55f38dc62"}, "3c35cd13-8a38-444a-b187-d77432161cb8": {"doc_hash": "8cc01ace4ab21190ae5893c505ad428d1c108a4f31e9e1da09bba252c5da78c8"}, "50648295-0160-4522-ae1a-51369fbb510d": {"doc_hash": "183d4ca0d356d4b450c980e4b701c6a7a67783ca8f2060feb3286f40c21ffc41"}, "fecf76c8-92fa-4d7e-ab19-c29d177588b7": {"doc_hash": "694effdd096f3dabeccd9645e7a7e103750cf275f7b743bde7553280aef78cea"}, "3e9e9904-080c-4c4d-97ca-f7d976ba7bf3": {"doc_hash": "babe433a4d34391ecd8b6d1b5399a8ed5eb35133de587b4e7547546223622714"}, "3d045b31-ddc6-433c-afe5-8d198a0d0189": {"doc_hash": "841ab87432cb2aeb582bbe129c38a11747a50e6ef80682552bc9cfb920bfaac2"}, "35aee719-2bbd-4376-9760-4ed0430bd967": {"doc_hash": "c2071c16f76b5e279fd4f2b68680e0c2ca7dbdbee53154ea4db140c254a29e49"}, "50b81b01-35f1-4b75-9553-829546949f84": {"doc_hash": "aacfc8eb3fe844267d7b5c9e77b50c84ab684f86fe8ed3b8a7e824ac5e2242fa"}, "3a647e91-0523-4d16-9dbe-609a8c6834ef": {"doc_hash": "372dbede566d413511349eb9b46659cf8fcfcd3603348d2ca385ee4e81aef1a7"}, "433d7c5c-d598-4743-b6f2-5eefac12a0c6": {"doc_hash": "cf75bc89e70583b679e0e2965461223f07266109b61c17e7b62ece7c28464bd3"}, "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81": {"doc_hash": "9c9f59875ae67796b3fa5f3acb87e6433de373f84104bdafd82474bf903e6229"}, "933428dc-c760-4f34-b08b-bd0bb8cef492": {"doc_hash": "307af6f75af9bdfc048bdf63149847b08f566588daa17728d2a822d81cb03693"}, "eb09a449-881d-442b-8c61-af9111f4bc11": {"doc_hash": "7bb6393e8ee2b709d581f4a36d91919ba4d46696f6330f804079ab56418e037f"}, "fdbc74be-8b07-4207-af06-53712754df49": {"doc_hash": "8e50c8d13065d6e314c3c8a625fc18f234712c37389efd89b30fc34549d5af6e"}, "59375a9c-b993-4bb8-80ba-b80ca695b5d6": {"doc_hash": "cb50f2e49abadd78889028aea3670a27ed595d4c4ced0bdc8df4251c052b2011"}, "055904b6-e92e-4bb9-835f-51a27f78a532": {"doc_hash": "b05e69d77cbee746d581f0fb4964040d75d10e155922f435638d3cfc7b10690f"}, "c2469720-5160-49e8-9f03-31c74b3d84f3": {"doc_hash": "5062147fbcb09b90537a92c7932d0ea9ef675c3f693fdaa4185b4bc5d3327197"}, "d93ee76e-26dd-460c-aac4-238384e2e80e": {"doc_hash": "3945f6f53d2463fdff416db0eca1d21180608f8647407b0e909faa61f1509451"}, "bc0a671b-1618-4355-b357-9f3655fa79ce": {"doc_hash": "a313ca8557dae49b262aa22d8b0828c425461d7449ad128e3cc477c7226e93f2"}, "d971507c-638d-448a-8b92-f29b8ac01662": {"doc_hash": "cd308122581d9cbcf01e15af08aa324ea498dac5ccaf4180c68ab9af10fe3e9e"}, "6bb0c0e2-4d01-48db-968e-91e6fdca5c8f": {"doc_hash": "38a9162913e732643b103d1b80ce6792ba858d60791c810ef5aec397ab147e82"}, "e84f2b0a-23e4-4770-8a83-9a10fbb027c8": {"doc_hash": "de3e45fb0c84834c4935804539a6a7b10d7fef15f7ddb19e1d1de16128b1c82c"}, "f4dc8719-f6c9-4c98-9be7-2eaa551bb010": {"doc_hash": "de80ad9ce8a21fa3f7e381114adeb81d3390935bd1d6764154f4daeb6f4f9f09"}, "f55fe5f0-9ada-41bb-8c41-348cc954ac47": {"doc_hash": "0c3ee465dbab3e57a2f199f166fb1208f13276ae5abb36e5727aad95634c7950"}, "bc6a9f90-1aa9-48a3-94b1-7d0e413126e6": {"doc_hash": "b77335efa133c1b03b4c204d57fdd830b6d143bd6194c6b198ab0d145820395f"}, "1de701fb-4a0b-4e5c-9cac-5a575e7b2de1": {"doc_hash": "b594bd9f2c8c1f86e80d0a257b7472ac88721cb17c2bbb1583308b437afac57f"}, "a91b38b1-5bbc-4741-836c-792c49037ef6": {"doc_hash": "bb25b9f081beac5591d9521c95f5e5d7adb48a84373a2792bd3df46b4056fa7b"}, "18e4b820-2746-40d8-92bc-cff9e8885d3d": {"doc_hash": "f2891beadb5bdca69da54070f00afdf9b23a5389f728435e6a56695c852ded59"}, "49565e20-156d-4771-9162-e6eb2601c0ec": {"doc_hash": "3c784172153fe234945ddb2844594de2c3349e3dbfe5498ac4856df330745f84"}, "3cb43932-7bd5-4819-b886-20632a5f94a1": {"doc_hash": "10d3ec8d57c77ff83ef4109b08162d3cfab6bcc6776530110241b6912e4f65a1", "ref_doc_id": "3ff15edc-7942-4114-a5fd-6b340295ef46"}, "241caf26-638f-40d9-ac28-e6e263f9eb9d": {"doc_hash": "2e998bc67b41ffa2eb086de0a99f4cb94becafe85cbdd5e4041e1fc122e950c6", "ref_doc_id": "cd94dcab-4db3-4abc-b656-ce09ebfca43c"}, "0ac219d5-f179-43c8-b43b-5e96a95fca65": {"doc_hash": "f1127c3e63ade51f9ac1c42ba2a3112dc74367af8cc67f81d5e680575c799169", "ref_doc_id": "cd94dcab-4db3-4abc-b656-ce09ebfca43c"}, "034f9b9f-7ce5-4ad5-a6a1-7b89c81479b0": {"doc_hash": "1e9dfdd26f0297d972b9d910f4389868ed87b3173a129aee513385f6684dbf4f", "ref_doc_id": "8123d867-4423-49dc-82da-e49fa4af92de"}, "62934da8-d865-42ee-ad87-f2ebaed36037": {"doc_hash": "27a721e0f4b49691155e848fbc6ff272dd01add382b736dcb05fed16bc04912c", "ref_doc_id": "025780ae-7bee-4b3d-9f26-3e53847bec82"}, "32b17c21-c904-4274-b586-b3c2f8b3fd68": {"doc_hash": "09ce8ec7aafaecb2794a01f0dee44f2ce04551dee18537f2bc7c6863d6145456", "ref_doc_id": "6a9bf364-ad0e-4806-b5af-7770c8e596c2"}, "e62ff774-0a51-46cd-9f1f-02ce28263532": {"doc_hash": "4c11df352cf3664839181bad7aab4f1ad27ba0551b8ab393268cc32b38ea6604", "ref_doc_id": "78c3cd94-ceae-4f42-85a9-7be5d54068f2"}, "b9f57c72-4e45-4938-a706-e8dbb3530b6a": {"doc_hash": "c48794dd2c5d55bbe2ac2fc328332d2665f5ccf5a0007bdbf0d97d57701eae61", "ref_doc_id": "835a26f2-5e94-45cb-b3bc-44e7f954485f"}, "33b09cb5-92e6-4d79-a65a-646231eea2b2": {"doc_hash": "0812a480f7ad045e66fa6b63bb92242ca895907954df671a301df9c6172f5eb0", "ref_doc_id": "835a26f2-5e94-45cb-b3bc-44e7f954485f"}, "73a16a33-1a2c-486b-a750-1d60a09c81c1": {"doc_hash": "e2696a0e915bd2be627b56cbe4d0ddca054d19f3618e780c6b548661cb03003f", "ref_doc_id": "a6ab3cdb-fda5-47bf-bc23-6776228b14c6"}, "965ac124-d144-4e49-998a-edc8fd92805a": {"doc_hash": "d8dff7f0abbd979188379bfc0cc7ac6915ecb21c46d6908f6623e879031752cb", "ref_doc_id": "ea2a14ae-a08d-45a6-8068-95d5823bdc71"}, "af024dd6-52e2-4f8d-8030-c8e6ce5b710b": {"doc_hash": "eded212476ab5977b0dd72cefb7dad7802ca7f9e1c91721fdd97cb673c5de6dd", "ref_doc_id": "9f076bb2-97d0-4eb1-ab5f-7c4eeaa54aea"}, "427b74ab-82ea-4ed5-bfdf-559d745f5529": {"doc_hash": "fb4a7f29c81cad1110492de4a33133589ef4043fe54a92155f47ce928f146648", "ref_doc_id": "91b350ee-9269-42e4-a39c-e551286b1973"}, "955137e9-16e8-4daa-ae8b-8cdb132470cb": {"doc_hash": "b227f9d2b7763f9d0431568430c2aa7fde23ad5637e39034076726596fe8d68d", "ref_doc_id": "0c72df9a-3bad-4a9a-9244-c32e6a65fcd3"}, "8c9687b6-6529-48b6-b071-4f1de71128de": {"doc_hash": "f539aba9c87d4220668b20d1177fe871f0960fdd8096709205f5ca461e05e134", "ref_doc_id": "0c72df9a-3bad-4a9a-9244-c32e6a65fcd3"}, "1e5f564c-a25b-4403-bf54-a3e0e1a69ffc": {"doc_hash": "76466886cb20fdc438beb0cc3c6f971aef5ac987cbfbc739b01f0931ceded850", "ref_doc_id": "c5032cf3-9aef-46b5-9a3a-568a46176101"}, "91f29a5f-f360-4c72-9e0b-38a859c38e5d": {"doc_hash": "725396a52714bfe113e6b6f74d51962f550d992a858b2f0e3dd7953c2fe996a0", "ref_doc_id": "c5032cf3-9aef-46b5-9a3a-568a46176101"}, "42153e38-c10a-43d7-8886-060568fa2c89": {"doc_hash": "2d8a50ad6291846d222a8a9fa8cd50fbda34b09912358a2a10af50ed3bb01788", "ref_doc_id": "5356e71e-b498-48bd-badf-140ed0db1276"}, "b153444e-fad6-4ff4-85d3-3c11de5166fb": {"doc_hash": "247862b6892d87af504e05ae1c884fa7601653a2f85c00b85b0aa877c67b8334", "ref_doc_id": "5356e71e-b498-48bd-badf-140ed0db1276"}, "fb6bac18-c9d9-408e-a2cc-5dcb6c874f6a": {"doc_hash": "d1637bb326371d150d34e900fb26639b96240da3773d275f1c7c0be6d7e8293d", "ref_doc_id": "3343c873-f472-4679-b09d-e07803d5331a"}, "c598f390-0ab1-44e8-b0d1-1e2262aa0a7b": {"doc_hash": "2d2f60dda99c4f8dee669c75b83e4ac65defbda884f2963e66085d0d6eabc3d6", "ref_doc_id": "5612d3c8-00a5-4198-bc07-3b7e59cb8992"}, "67d70904-6234-4235-8ba8-07c55872e630": {"doc_hash": "7b2d1b9395b83dea42c5c3ae0a1923aac897026195d1c9ba8c056738aed69855", "ref_doc_id": "861270ac-e102-4a7b-a475-20dbe68b66ae"}, "cb7c34bb-2421-464e-84db-0e648a9db5b3": {"doc_hash": "b3e22a8c56697c8cf23fb7fc642af6813852e140251759994ec875dbbf429f18", "ref_doc_id": "861270ac-e102-4a7b-a475-20dbe68b66ae"}, "2ca456b1-cc3d-4ee8-bb27-8c59c496919f": {"doc_hash": "a9c4d1743c6f295f0bca9524209fd2d71e97af0adb5c6026516064ea900895d0", "ref_doc_id": "cd37c02a-85dc-4552-9a7b-3cf0c74c1de6"}, "f35885f3-3d1f-4ca9-807f-4093f3e6a9d1": {"doc_hash": "18b8356c1d2c4d3459c9442117c990a28f11f42577753162911727db29458a17", "ref_doc_id": "44687a84-1741-4935-8752-a74128cdc174"}, "2162ef32-b963-47b0-b336-96ea503bec72": {"doc_hash": "6cca74e086d3f9376a166845e01e462ede0747d1697db8ddcd0d17930c04199b", "ref_doc_id": "44687a84-1741-4935-8752-a74128cdc174"}, "332f00bc-1d73-4b91-9eee-561cb9bac095": {"doc_hash": "d582d440036e5a02691df3957bb89f41e0c672418269df3f0c3280e3af8571bc", "ref_doc_id": "6060671e-a630-49e8-a82c-fa6ff5913ca8"}, "11631a3c-ae1e-44fb-bfb7-8728ed5f0451": {"doc_hash": "db88c616ca159c6d7e9c6678e53a8d077c0e6508599c6c9606a4d6e97e94d47d", "ref_doc_id": "fb8df448-b98c-4f7b-a3ff-0a3486eefca9"}, "7d90e68c-e993-4c9b-9616-d2ea68869670": {"doc_hash": "4e96f45bde6b8ce73002fda00a4307d7957bf23b9755cd4fe5521e6c48bc9b93", "ref_doc_id": "fb8df448-b98c-4f7b-a3ff-0a3486eefca9"}, "d9666c00-e257-43d9-9ef0-bef792a18789": {"doc_hash": "c0dc74020b4f359af2b08696930abae032c6bc7a086d533f03f6fcb5a1c2fc10", "ref_doc_id": "d9d28837-e655-4431-8d88-bf9a1d90b748"}, "0f2fa209-a46e-44b5-87fb-afc8da4d9e5a": {"doc_hash": "19dae373aadb3550e3cc449acdf861295eb27fec97aedc4b18cc2e97970b7909", "ref_doc_id": "2bd04e90-e47e-4570-a25f-e7abf668e187"}, "07518aee-b1b5-4b99-aecc-51f4567b4dcb": {"doc_hash": "972b0bfe9206605f1057ea9daca8d3a4538b68d1b8e0311fbb58731c54b18344", "ref_doc_id": "2bd04e90-e47e-4570-a25f-e7abf668e187"}, "7dd10a8c-8b63-4cd2-8c3e-dc87bb9c9de9": {"doc_hash": "3b3ae463875691d0d113a97ac714fa83ea999624af466cb774bab84db6d6c8d7", "ref_doc_id": "94b99940-dba6-441d-99e6-c5113214a786"}, "8a49cc39-450f-498f-921b-c240fa5fff2f": {"doc_hash": "b48fb3b2bfea101972cb494b280d9e4f629b3733e586651adf96830d29a346e2", "ref_doc_id": "94b99940-dba6-441d-99e6-c5113214a786"}, "2600b5b6-a35c-4404-9336-824f250d6ac3": {"doc_hash": "ced499d3ef822be5246314f92e520882e4665d16f4fbb6a59fb2a86e4466c822", "ref_doc_id": "10cb4c4c-5ec6-4808-8d89-04899e27327f"}, "68439ca1-ad54-467e-9497-cd69d945220e": {"doc_hash": "b7fac3d5bb98f23decf753514239102374755b5864ab33a22b0bc66f6c304f13", "ref_doc_id": "10cb4c4c-5ec6-4808-8d89-04899e27327f"}, "84bea96a-343b-4e94-b112-e499de685027": {"doc_hash": "f15a084aaa104885bd55e5860435cfc6f785c5968b01a2c470487d4b5d5cde1f", "ref_doc_id": "d262813f-0c13-431b-8292-8386cd7a9aef"}, "ae9f50a4-bfb6-4f4b-97ee-d31adcdb1c9f": {"doc_hash": "5b107ab4dfe11b32d35dc6d326ed646bf25f099efd00de88587fbfea60561d7e", "ref_doc_id": "d262813f-0c13-431b-8292-8386cd7a9aef"}, "9df2d79d-4a32-4d7a-8d64-32b4862c0daa": {"doc_hash": "32a722162c7eeea6afb9a06fa6f8e3be6fb2b0f4b1421f3a0bfd7877e9556dc8", "ref_doc_id": "be71a699-f052-4f1f-ad19-875988339108"}, "254ed956-2758-4d7b-a5db-892909e52868": {"doc_hash": "e2975b7cac19a43d40e9d8ee864e70972132929d319c4b1ffb6dd8e8de393847", "ref_doc_id": "d5867e41-f15c-48ac-937e-d02bb843eee1"}, "ccca712f-95ba-4083-95db-1f8441d17cdb": {"doc_hash": "36832e9ff7a011057099dd9eaa09df0147c475f7a050b57fd85ff99a6f0079ae", "ref_doc_id": "d5867e41-f15c-48ac-937e-d02bb843eee1"}, "4e6eee08-c9d1-453e-a8f3-db82607dfe39": {"doc_hash": "0e49bb9381f64ecb607a37a948bba07e4921f59cec90433353300742b126c1ef", "ref_doc_id": "9f4ac4c2-68ce-4c3e-ab50-c73b6815d615"}, "30c11c89-e7f7-4520-aedf-f784281a8d63": {"doc_hash": "fcbb2a77a35a693c2706c6eb7d7262f38252a15244947b17ca3e64c6521a0e96", "ref_doc_id": "bd970fd6-d428-4d27-ae5c-3ffbcfde7dfd"}, "e619c0b7-a450-4bb5-8f8c-9eb4a088a7ab": {"doc_hash": "eb98e7063ab24c682bccfb38db4e6722122b721a9286a43759668c75635a3800", "ref_doc_id": "8cd240f4-004b-40f5-a69b-3f77f4135d82"}, "00a16b99-ea97-4d17-b1cb-6eb723440378": {"doc_hash": "8d3678b77d0c266250e7c8b112bd30c0db0f4e28db3bb233acbacfcdd6e62db1", "ref_doc_id": "02c9d39d-cf55-475d-b584-1d619cb18f59"}, "dc4a4ea1-f1ad-4f0f-af3a-a34dc477eec5": {"doc_hash": "c007b5d4330c56e9e9c6f9e906b9ecf2eaa878e89e0f94584d74b30fbd67451c", "ref_doc_id": "b3e5faa8-0551-4392-a02b-1d1bb614fcab"}, "18761ce4-84a2-482e-b6cf-8f0eac9b73b8": {"doc_hash": "19dc6623bc3ac2ad68151474aa7da139a349c8e404cc9c1d94ef2943d25f6744", "ref_doc_id": "c11ab4fc-f4d8-4bb5-aeb5-b3b78fee855b"}, "4b45e877-98d9-455e-8840-85b81b61a2e6": {"doc_hash": "cf1d39c8469b4da554d6acbd24d26e541fda1d8f54bffc0e8acffb582a7cc119", "ref_doc_id": "f7c83c0c-01db-4a21-a67a-4da91460212e"}, "1956b9f2-8f0d-47ef-9831-8a9861273f6a": {"doc_hash": "5332aa4f6cd783b91edac37d9fe3b41f1371d811a4fd1d986f04329803189a8e", "ref_doc_id": "7d30c311-4a47-443b-afc2-16b61493a6cd"}, "d2692bb6-cb65-4ad6-a8e0-9b6f10fd5d4b": {"doc_hash": "6f3bc0541122f71ca6afaa0234fd390a4885a3172428e446273947ea6f52a559", "ref_doc_id": "01738cca-4fe7-47b5-b79f-29469f76a7fd"}, "db37d56c-28a7-42b0-a1cd-37b9e00c1cb1": {"doc_hash": "148d1d04bd99f88d6e4af9f8fcb8f7a4d2aa2b279524be2e644f0fd008ac8478", "ref_doc_id": "8a918de1-e315-4893-959b-c62a1e8f3779"}, "03e3a9a8-5eaf-4d86-892e-65c38ab0cb14": {"doc_hash": "0d298205929c6a6efb560ded100989d8c049a945cab47905b2e5a38663858844", "ref_doc_id": "7093dd4a-4396-4a2e-9073-a137f2ea510e"}, "f083465f-cf9c-4869-81d4-1bbf2d46f452": {"doc_hash": "0c892a3fcea7eeaea9a075a6453b111ee13e1f16c6f28ff26632af12987c6d51", "ref_doc_id": "4c332c74-57ba-4e64-88a1-b01b716f27ca"}, "a4526c03-d1ab-4060-b7db-8bf07399b7e5": {"doc_hash": "7000ccae6ed0a3b3b0bafb2a6ecad9a21d16a780f402a57b8559a505983e60c8", "ref_doc_id": "39237fdb-9768-47e4-af37-04b845bd2773"}, "1d296e4e-2cff-403a-b2bc-0bcb83747579": {"doc_hash": "cd6a41c00866d5b628e55220c098996e8e211168896a1d818c4751ca13cf1931", "ref_doc_id": "f62d4dfb-eb39-4deb-a624-2ac5a7eda9c3"}, "205517b3-c17d-49be-bd71-55bf2e7ec3f5": {"doc_hash": "786826703226723b672613eeb874e438155f20e2647f70d66903b05f700d4f34", "ref_doc_id": "f69eaa7c-ac1d-456d-bef9-f07c81eb6bd2"}, "0186aa0e-ea03-47a0-8525-642b355df110": {"doc_hash": "53ae66b7b94b5271a118264c7c4e2cb92e6713b17b3d38625e629b0e970bdcb8", "ref_doc_id": "56ea3e30-b164-4155-9f49-75dcc225187f"}, "f15953d2-ae76-45da-a764-698d5fbf35a0": {"doc_hash": "8f6eab47c120b9abbc02b81cf6dc45ea98c2f30554ad8976807c94d0ce7e4015", "ref_doc_id": "5649fa11-562a-4ac3-9aaf-2552d483c9ea"}, "caa6ad7c-73b1-4b18-8756-a51fbfccc297": {"doc_hash": "17cb93285b42acca0ccc30f9b79974d856d3abde8b8d839f571f48628d555aa0", "ref_doc_id": "6bc0546f-7e13-4378-a00f-9e367b6f4c14"}, "04cca8ee-6206-4ff1-91ac-85fd2fd4b857": {"doc_hash": "d7df309d3f3abd2a6950e8fad50080b2ac009fc960ed36b2f88a1e5d0660ff4b", "ref_doc_id": "fa37605f-ff53-4961-94c0-8252501630ff"}, "51c11839-076c-4595-b5f6-02a882e5ed61": {"doc_hash": "fda71d099dbf36b6e8679819c84f776839bbc5c9242e9080204c2b0f2e35743e", "ref_doc_id": "c1013b37-f220-4cb0-b83b-de3edffe3caf"}, "61cc5b8f-b11f-456a-af58-0e3827faef2f": {"doc_hash": "348622e8d75ba7fef194a2386d95bbf3830e8142f04989ce6f2c604457857c2d", "ref_doc_id": "203bfee5-757c-4a11-8372-0a8b0da4181b"}, "ab7790fa-ee4b-4874-a830-ba1cb81c00af": {"doc_hash": "28c23151e42763f9f9591d5a52fdb0cdd50b8df291326b90b8fabc8476acd5bc", "ref_doc_id": "3a0456d6-33d3-463b-9625-436cf6d85169"}, "00f86411-b0a2-41d6-af14-fddd6f95b5c1": {"doc_hash": "ab3bfa7e8af8afd58f67239fb14f5d6da1c419d2720eb154a84772af73109652", "ref_doc_id": "cac3af8c-76df-4457-aa67-276a051d7c3a"}, "4e5cadc3-a459-4cc0-a22d-1b4f5e4bebc2": {"doc_hash": "c37736e0e9f113b73b6460f94812194cc5228dc4efe8a605a3c0220ffd487531", "ref_doc_id": "19b1fb52-d09a-4659-b72f-217dccd8c104"}, "59041a62-54a9-46a4-a9a6-8c03b41038a8": {"doc_hash": "368b9e923d1330d09a2324b23c827f41e56c765c2d5ffd36f35dc9fe85855048", "ref_doc_id": "b5b3ffd0-158b-4696-bb7f-bbef0705360c"}, "ea03d4d7-e05f-42b4-b70c-4344822d1626": {"doc_hash": "a1c3052b813316b8992f4e5e5a041a5eddb7d5876945e707c871cb07c439b9f8", "ref_doc_id": "0d7e5f23-8c6a-4b5f-a0db-af396b196a5d"}, "b320b6aa-5996-4021-a817-34f116f4aff7": {"doc_hash": "1004adf5523cbfb8301c1ac5d6c514563948d76f8eea95ae058357b3e549719d", "ref_doc_id": "1d2de8e3-c342-4751-a0b3-13be15e6c9e0"}, "b2dc1ce6-0adb-4d23-a11d-272f3396f05e": {"doc_hash": "dc871a15530691344e3c5e96792aad36f6d48074479bc5837e316a1338c2f56d", "ref_doc_id": "cffc16df-9469-4c29-8220-b608c711ccff"}, "c6f71baf-ce1b-44e9-b7a1-4c0dc989f252": {"doc_hash": "61d5f266819c56c8239dc5c8fe05edd299295ee9a8277d25a5f0c0e2f146712e", "ref_doc_id": "fd762952-0014-418a-8ecf-470162a8d368"}, "4e23c228-ed9a-428e-a6a9-e0eef0d261e1": {"doc_hash": "7743379d9b5deddf233fb5b687c5d560df06e6f65353b52b4bf6d3f35183ad51", "ref_doc_id": "c8e99237-77ac-464e-8904-3945f5912190"}, "5f1ef21e-a47c-495e-9ccf-184e8e4fd5b7": {"doc_hash": "15fc68c6735c724cb84ad8aad6ada0e038e6bb00fed87d298311cb34e27af4ab", "ref_doc_id": "960c7773-c2d8-42cd-8893-9b543944b74e"}, "896be9bc-1801-451b-b64f-3117cb484a66": {"doc_hash": "6b0730938438d1e3b2e860dbac1144b91e588cdd79e25a4ea578744ae6bec067", "ref_doc_id": "252135e2-98fe-49b5-9cef-7cb7d5c52a32"}, "78421b7e-a77d-4e56-b6e4-17a2beb15ec8": {"doc_hash": "282ed1259f8f3fb49a9f5ac2d90898b4238073b9bdc73fe3914e9ec4009f21f4", "ref_doc_id": "d5560e97-7bfd-45a6-8e72-7f72ce24ae3f"}, "35f70f8e-5935-4ddb-b125-d152c4ea1f5a": {"doc_hash": "2523b4a290c44e36651e13c93950ca4243391296849d2784c2bbe6f822e7e01c", "ref_doc_id": "6b76dbb5-62a0-4922-8157-ce58c9c25211"}, "91444fbc-34e7-4bb5-b125-00db1ed71de8": {"doc_hash": "387157507c29f037f3d7373383a84c2492e17e3124c4bcc3750b378e3539523d", "ref_doc_id": "0bbf9f34-961f-45b3-98a9-59b77218051a"}, "ae8ea22d-47b3-46e4-80ab-adc79986572c": {"doc_hash": "c1cef33f85497e477f3ca3e16e1ff176ea81e6f26862c5e5b85d92674298e189", "ref_doc_id": "0bbf9f34-961f-45b3-98a9-59b77218051a"}, "d59ca20c-8ac3-421a-aa3a-b92349060e73": {"doc_hash": "d6057e5e2c865f0f96571559c597fff82895c726d8a6ce92781d2a32ca709ff3", "ref_doc_id": "cb1b728f-cf38-4444-8ea0-64207eb1585e"}, "7eb506e1-7ac2-4847-8c80-e483d6ec031f": {"doc_hash": "e66fd20a2d6bd5865f129c316e87d9e8ae7c320a09beb3f999747d260f8f176c", "ref_doc_id": "ff8a2444-251d-470b-b581-155046079df4"}, "e6bd1f4c-d20e-45c2-bc56-974c7b3e49f3": {"doc_hash": "407972674ea6ba6cc41b8df467e9019a028931aea0c0a746dc719901156f8343", "ref_doc_id": "8f4930ee-9d0f-41b9-b67b-244e77c7e1da"}, "7a770008-ca77-4756-b1d9-730371d78e6a": {"doc_hash": "ec2bfe03320701bc6a7ae3a862fbec7f539235a3ba315924e6ef729713aa2ed4", "ref_doc_id": "8b10fd78-ee1c-401a-a427-5efbf3fdce1e"}, "276af1d0-7795-4cfe-aabe-03a55db49d6d": {"doc_hash": "cd84f1099ed0e6360d3ca110fbe1bdf8c0614d60c4b8894553375ab1aaea09fc", "ref_doc_id": "b64425e3-8bc3-4770-82d8-a2227e2e56bd"}, "23f4e4b4-b9fe-461e-8b76-6519e4453572": {"doc_hash": "91e97403fbd41905ac8174667c95e869befc6155156da65b6f597544e85b7308", "ref_doc_id": "0f608eb3-4924-4b10-975f-38aaae27eae5"}, "c7c710fd-c46d-4fd3-9bb0-0f9289204402": {"doc_hash": "47730d1d6d523c20353179d1ee0a048f774542e33a7da9434f00a391d37f1b74", "ref_doc_id": "0f608eb3-4924-4b10-975f-38aaae27eae5"}, "46001039-ee7d-4dfa-b616-e0d577af9849": {"doc_hash": "a05ec348a2a4a5dca631ec37c33d072e6d011e62339183c3dab9e9223d42521e", "ref_doc_id": "17288975-c1fd-4cec-86fc-c402626e5549"}, "e60f8afa-29c9-4489-a92b-249ded7df09d": {"doc_hash": "f9c387cac96cdd1fde0c107871875712279843d0ee4e87ff8e4cb199cc9a69fc", "ref_doc_id": "17288975-c1fd-4cec-86fc-c402626e5549"}, "90354b6d-e85e-4904-8dbb-d7181d102cb9": {"doc_hash": "e2baaad70c78b13c916710aaa287eb353f5dc99ce24a254e3dbf1ad4f0e7ede8", "ref_doc_id": "0b8843c4-7654-4053-88d8-add60e34ac80"}, "8936479e-15e3-444a-9dd4-04a3855a0a36": {"doc_hash": "183617942c252cb065ecd20e43763fd99708cc83d24844bb1f8252136f778a9a", "ref_doc_id": "b1d1a543-38fa-48c1-8e39-294897270742"}, "ef20dc98-8f58-404c-8ed6-cba839ca0a47": {"doc_hash": "2cc51866ddbdfe7d48f7302e8a472a1e357fcdd35cc65aeb4038cef597e9b041", "ref_doc_id": "b1d1a543-38fa-48c1-8e39-294897270742"}, "24aaae84-083c-4d6a-866a-16ee7a64302c": {"doc_hash": "5939f60c77229442fa420667fd8b220de95ee39222bd83ffc72efb1a4271c93b", "ref_doc_id": "def12d8d-129d-463f-a753-938d3d327b92"}, "92566026-6fbe-48b7-89b0-5d48957c1e75": {"doc_hash": "f41f3a234ab1c0066ac21ce51e80fcc03e52c28889c547e876287fd86b221d77", "ref_doc_id": "eddaf335-f569-4b27-9438-1b435e605159"}, "35ac61b2-c8a7-4c9f-947c-a5983b254cbc": {"doc_hash": "b89db195f695453bed25f0cf76546ea39494235c57896d55c2b63732c9176710", "ref_doc_id": "d0ce3c13-8c2a-4093-b2ef-5fdcc3400b00"}, "5c769187-9e75-4be9-9d3e-b59e1b34d298": {"doc_hash": "659be07aa4aa8dcedada4a6087e908e7e706c2d410e1faaf122a98316e34776d", "ref_doc_id": "ee709460-ee8f-4272-812a-5de286eb5a88"}, "d3d3cb2d-5908-4991-9b0c-28c50cdd0d20": {"doc_hash": "10e64d0b8af08c6d42a2a1237e6481f4017703b8cfe5719770f70eab8e7b9467", "ref_doc_id": "ee709460-ee8f-4272-812a-5de286eb5a88"}, "63f5c67e-27ee-4d07-b7c3-be6b3c62b744": {"doc_hash": "f4f7b400baccd5e64beff80c8f7655c437206cdcfdb723061c841bca2f2cefa5", "ref_doc_id": "aef968b0-6853-4a26-9c0e-1a7ca15150d0"}, "e56de99a-dc3d-48d4-93b7-286a0d7d5456": {"doc_hash": "3328fa1a6cfc4803d49689a1569b1c424f6a4b54692d13bcf9cfeb92afbc996b", "ref_doc_id": "aef968b0-6853-4a26-9c0e-1a7ca15150d0"}, "c57fff76-b1c8-47d6-b91a-6f016c7e00d5": {"doc_hash": "1db17837a59819c8e81f08e14f58146238e8922d2d683c364b1e728ff233439d", "ref_doc_id": "ca42409f-0bf8-414e-9004-bb4de9e683db"}, "6a958de3-9743-49a0-b17d-b9749d6fafbd": {"doc_hash": "9e695a2b22c3a83a3db3f83c12f2238e2ac9e7191fcdead7860c1bc89071784a", "ref_doc_id": "ca42409f-0bf8-414e-9004-bb4de9e683db"}, "f5e0b498-0265-4d62-b051-922bbf7e2982": {"doc_hash": "9e95931e8519b2e150d4a29a352cdf8a8a94194499c9892c640c5cbe8db2dc21", "ref_doc_id": "15a3d013-697b-44f0-858f-0bd812ae6062"}, "3476a33d-b33a-4729-a42f-f14e4f2222df": {"doc_hash": "6f301ae9e37504c4785d9a15e16a854466ed8bd38413a4d16c1459e5739dcc58", "ref_doc_id": "15a3d013-697b-44f0-858f-0bd812ae6062"}, "28b4359a-3066-4331-b5af-21fd86111ef6": {"doc_hash": "aca6c5c89b2095ed5e88c5241a57b4b4eb090ef03cd83312204a713e72260d28", "ref_doc_id": "967fa1a4-1290-405c-acd6-d6bf368adccb"}, "a37049c4-90c7-4bf1-80e7-13d9f1e7a8a8": {"doc_hash": "663b00f115a024136d02e65874c43cb71b6f4ef5b4914f92e659a7db55ade40d", "ref_doc_id": "967fa1a4-1290-405c-acd6-d6bf368adccb"}, "294091fb-e81f-4982-96f0-b5570932c8cd": {"doc_hash": "05d41d7e6116da0fea778a51fdf7c6ca2a78fd5212696eab27fba190edd2e533", "ref_doc_id": "3ff25d96-cd3c-4835-90a8-260bd4a95a44"}, "d28a2407-b258-4094-b0b2-9193147edefb": {"doc_hash": "4307351360501180f45cd11556064396344104a65b3f0a4365e7aec089be0766", "ref_doc_id": "3ff25d96-cd3c-4835-90a8-260bd4a95a44"}, "6eaa2898-b426-4723-bccd-b1364c665682": {"doc_hash": "b0fb31a71ccf28f7a60715b7cae55f86e5bb8093fe61f49d38660efb96ba987d", "ref_doc_id": "22606178-7cec-4d25-aeba-01fe8862c5f4"}, "c70c81f7-518b-4e9e-9756-6c8d43e93667": {"doc_hash": "922313ce3674e6cddc5dfb3e3ddcd3ea79cb12d7ae53607b5787e84d61a2f3a8", "ref_doc_id": "e7ce776f-7c12-4ee4-98e5-290e3840f212"}, "bf39dfae-d735-43d3-8526-b1d044b22a27": {"doc_hash": "064a85e456a207baacf9fd2b73d598efe40e017bfcff08a9b3625eaa1a3a4477", "ref_doc_id": "a6cde27b-0ae9-4884-9481-f01267e47cc4"}, "4e93811e-0bd8-460c-87f6-d47d381cce9f": {"doc_hash": "7fc7ae970591bc7e99ec7b98eca01befa0812c17f0f68e7a29e0ca295c494c3f", "ref_doc_id": "2f098cf3-f738-459c-8fb1-bea1b50fb09a"}, "7bfdf86b-4088-4db3-8083-c981f833ab54": {"doc_hash": "ccfb2d329d67c28b48b53f5e6bc72e71080788be78e61acc34981a0e6be88676", "ref_doc_id": "2ebb29ef-17bd-4981-a480-e2638c10fdc1"}, "d5c12dd9-2d7b-4c47-ae88-8659df1b4fe4": {"doc_hash": "d59d7cc771189a8ed1c7d172889b5bf8de556749e8068dda248b0c5718646fd2", "ref_doc_id": "4542a351-b38d-4139-bdf2-e0e5e9ccdb7e"}, "da184d41-8771-494e-b1f2-3b6b6a55ccd1": {"doc_hash": "0afba234d8a5df732b3b27efcebfa0bf97544d42742208689cfc880bfb8bb5ae", "ref_doc_id": "b80efd05-328d-4436-ab36-be2104d4ba82"}, "235373c6-f946-4c7c-94f3-08980a796d28": {"doc_hash": "ce2bf177e5cf763a63615e4d7ebd45b0a9cb4eb6778bfc2bacb351ccf09f6c4f", "ref_doc_id": "b80efd05-328d-4436-ab36-be2104d4ba82"}, "1f0a2bf1-5330-4a7a-b12c-c945185cb980": {"doc_hash": "d67a757d980fc2e445792df06005d22276d5732886d71332c94d5b9a16fa32d9", "ref_doc_id": "d6d6afd6-fe3e-4f24-8a4e-6166050b8107"}, "719b2943-c657-41b3-8f04-60636a780b86": {"doc_hash": "00a4cedc42786d36b0347d841e65fd2d593d18bbbb53ec72e7b79b361b4b6cdc", "ref_doc_id": "d6d6afd6-fe3e-4f24-8a4e-6166050b8107"}, "3c207359-0ea3-4dcd-8375-2db0e3e09c18": {"doc_hash": "ca3205273807fa073b1caf83a3e0fc03eb182f3aacbaf83507da6da40bf57f72", "ref_doc_id": "e598d0a4-f800-49cb-af2c-0fedd271a221"}, "e7c7cc0a-e00d-4bb8-be08-49cb3f1ca6c1": {"doc_hash": "7398aeb44adb3372c548dad85ae79671da650460b6c666e2a24c1f52063bc946", "ref_doc_id": "21f2a690-e9fb-47b2-a5b4-01772e1400ec"}, "46da161f-3fa9-4f51-bd65-13ffb8125a2e": {"doc_hash": "0f1f13b14ed44ece14753b46353fbe9e1efe5c6edccbbb9337a53fb9d65548b5", "ref_doc_id": "9fe93f97-3b87-4ba1-9570-84e7c64b1305"}, "0e33e9b1-4662-439c-a05d-473129c87ae6": {"doc_hash": "c62f1a312b9508cd18a0d178e4a4d2696bd1c1789de0fd0978db5bd8a510f101", "ref_doc_id": "9c857517-d290-4185-b962-c78f200a2ade"}, "585a1f2d-694e-4ca0-bcc3-9dae0dc0e284": {"doc_hash": "bf35661cb914d680094a7096330b580c69cb0d9e7f079205f7767bdb1fbb2677", "ref_doc_id": "5d3e3937-7d0f-4748-abe6-a8916ae4847d"}, "913057b9-891d-42ef-afad-0de074a4f97c": {"doc_hash": "7811fe59fe4de74ea9b63ed2335928ee4c4933bf47c8bff0dae5d31787f5ab2f", "ref_doc_id": "78f48a7c-8095-40ea-889c-8063d254ea76"}, "122a0255-9fe4-4898-a7af-3c4fdd5f85d4": {"doc_hash": "c42e23d3a4ed4f303fb8ec8ed74ee3e1058f8f92028025bdaa7360ace8eba810", "ref_doc_id": "78f48a7c-8095-40ea-889c-8063d254ea76"}, "bc965e62-998e-47d6-bcc6-9c226e2a7013": {"doc_hash": "9771c6acd5bdb3ffa6215985086b1a3d43b34ab31066fbae36b3d333c6a6f0cd", "ref_doc_id": "c168eea9-eba5-48cb-8145-4167781c1c35"}, "8ce730ef-e6c7-4f42-b1c0-e95565326a47": {"doc_hash": "35fc467595565d44ad4d4cc22516d27d60b75c5c1625a1a161aac2064eb338db", "ref_doc_id": "c168eea9-eba5-48cb-8145-4167781c1c35"}, "cddb678c-fd4a-4d00-bcb3-b18d3c81bc32": {"doc_hash": "d63a1168483bf1ffa9fb4c36e65adafb7fbb92aa1c6ffd233c93c36ed18e0fcf", "ref_doc_id": "83f38e4a-743e-43e4-a689-eeb33dcb0f9b"}, "5bca244e-1923-4e98-8506-cfc75b24058a": {"doc_hash": "282f880d496a2ce5beb44412ff925829551f43f939d879333700100dc861ddfe", "ref_doc_id": "83f38e4a-743e-43e4-a689-eeb33dcb0f9b"}, "0f7e5f10-53e9-4d68-9bb8-7bea7c464bcb": {"doc_hash": "fadaa6e93293c87ef83bcfe4778e74feb2632d10724ce99c53d629c1d61602c2", "ref_doc_id": "f3d6608e-81c7-4df4-9fd1-0c28415460e9"}, "f944d9c3-192e-453f-a8d3-3fea194f2fa7": {"doc_hash": "d2159cb580841973223d4e6956a2805b1dc15e25c3fc0c18e7da4b72fdb60c92", "ref_doc_id": "f3d6608e-81c7-4df4-9fd1-0c28415460e9"}, "3c4e4793-e9f9-49c1-aab8-c4b92ae60be4": {"doc_hash": "c0d2d0d1c83092fa29e739e8a08c79e391f8302ec9b9dc16910fd83156ca8cb2", "ref_doc_id": "9f61ab36-1b88-4628-8ee9-eee763e2a4fe"}, "64257430-5f6e-49c0-884f-6635b2af54af": {"doc_hash": "d99b6eb2ba0127bd8561ea8d592697e2eee23006b1bc34bac8904988eeb595e6", "ref_doc_id": "e265b963-6aa2-446e-9573-15e32ca338e9"}, "a1f2ca55-19d6-4347-82d0-c82a7c2faab1": {"doc_hash": "9f2904cd1ae50e2376240ce391dc727cb9ee520137ad83691c7d525f84596bd8", "ref_doc_id": "9f706a1d-5c5e-446d-ab65-708456c40080"}, "94c21b1f-f11f-4d0c-8e36-d04a7dae2390": {"doc_hash": "b00fd4ff68fd1b7c380efbfb0408ac003d8c65ee8ff5272d4797cc721b4999e0", "ref_doc_id": "9f706a1d-5c5e-446d-ab65-708456c40080"}, "ce240749-dd0b-4c20-8399-a00193565120": {"doc_hash": "1966dd2610c770a440d4bd5f65678951823d3a5f66b316ca2d47b948d8ae13b2", "ref_doc_id": "2ccb122f-491f-48b6-a432-1fe3243a7a1a"}, "f95ea3e2-47d0-438e-989e-a57bb75a1707": {"doc_hash": "bd41f778f6d271df642d5cdd9a3cf894ad9a704098cde9438db8dd0e29e5bb9c", "ref_doc_id": "2ccb122f-491f-48b6-a432-1fe3243a7a1a"}, "2f40d636-5a23-43fd-8ffb-367b3f9a0bfe": {"doc_hash": "44ab5e865ccb1c96c52aabab36514536eab7d5a1b70c5f02e64889ef86ae8b99", "ref_doc_id": "19a355b6-7d74-423b-9cee-2883f4bf25cd"}, "76d34fd4-451c-4840-9bf3-7e7e63ecd399": {"doc_hash": "73075b4cd0fd08c5e3c475e17c6974641d7bf818839ccc38c22861154f24a6b9", "ref_doc_id": "7a96c4de-1f61-4275-9a0b-328e695e37f2"}, "d908bda8-03ef-41ff-a43b-5f630ef663c0": {"doc_hash": "c7ac678442c85a984505ff659c79bce72df8ae668e7e76807390eebe8929bdd6", "ref_doc_id": "2ccd4a68-89fd-425c-839e-ed83e4aee45f"}, "2429ce8e-7ab6-4529-9afa-d6636704f708": {"doc_hash": "d68d10e69214c440d22ae3821eab90bb15ed84ae0e3accf465125aa4c828259f", "ref_doc_id": "2ccd4a68-89fd-425c-839e-ed83e4aee45f"}, "e6994cbb-707e-4127-989b-c70a12dd6340": {"doc_hash": "65a3e82dce8cb18e08a36a499ba25315188275ec3795133abc812c06e6360c2f", "ref_doc_id": "508fc256-7148-45f1-902d-c4d0d957dff8"}, "67ebc95f-6415-434d-a923-3b89152ffcfe": {"doc_hash": "ac550128d66d71738d915a4cb35035fece5cf9a758680c0b80337b3018d26de2", "ref_doc_id": "508fc256-7148-45f1-902d-c4d0d957dff8"}, "74acf83d-38ea-4705-a262-2d91f69f6370": {"doc_hash": "ddd5cc004b72436331d3cc4bd895ae87b8c812c71ed0adbb80d4e1c55f38dc62", "ref_doc_id": "c4d5155f-6114-49a1-84cc-491baf8a23d2"}, "7893f684-2f2e-406b-88f1-9092015ddbdc": {"doc_hash": "8cc01ace4ab21190ae5893c505ad428d1c108a4f31e9e1da09bba252c5da78c8", "ref_doc_id": "3c35cd13-8a38-444a-b187-d77432161cb8"}, "60b60797-e179-4a30-96d4-b24de2dff8af": {"doc_hash": "183d4ca0d356d4b450c980e4b701c6a7a67783ca8f2060feb3286f40c21ffc41", "ref_doc_id": "50648295-0160-4522-ae1a-51369fbb510d"}, "4837110a-74cc-4f4b-a094-226578b18842": {"doc_hash": "694effdd096f3dabeccd9645e7a7e103750cf275f7b743bde7553280aef78cea", "ref_doc_id": "fecf76c8-92fa-4d7e-ab19-c29d177588b7"}, "f457bc5b-0690-44f7-a5b4-4c633c13ee00": {"doc_hash": "babe433a4d34391ecd8b6d1b5399a8ed5eb35133de587b4e7547546223622714", "ref_doc_id": "3e9e9904-080c-4c4d-97ca-f7d976ba7bf3"}, "39093845-3532-4e6b-8abb-16430d9377fc": {"doc_hash": "841ab87432cb2aeb582bbe129c38a11747a50e6ef80682552bc9cfb920bfaac2", "ref_doc_id": "3d045b31-ddc6-433c-afe5-8d198a0d0189"}, "ee3a8984-5051-4b27-8252-7dc792c7f3cf": {"doc_hash": "c2071c16f76b5e279fd4f2b68680e0c2ca7dbdbee53154ea4db140c254a29e49", "ref_doc_id": "35aee719-2bbd-4376-9760-4ed0430bd967"}, "b16f772c-a5de-4e96-8a37-870bd4fa0f35": {"doc_hash": "d7bbf64e6b0cf258b3532b4d31033e2c3b922f2e0d3fe3925897a77f6e04239f", "ref_doc_id": "50b81b01-35f1-4b75-9553-829546949f84"}, "bc114974-a6d0-4989-b173-c0cdd49872e0": {"doc_hash": "12f97b11411c4153e397b57737b81b4acf90e5ce94ec0fea3adee2f583baefd0", "ref_doc_id": "50b81b01-35f1-4b75-9553-829546949f84"}, "c3c66723-c58c-44d8-9ac1-2b7d5fd9b6ca": {"doc_hash": "82d1dca0ca9c40d589ecb3651f70707d3fb0a15a2c830d5958880f502ea86193", "ref_doc_id": "3a647e91-0523-4d16-9dbe-609a8c6834ef"}, "eb5b17c1-1ab1-46e8-8613-e1be486471ea": {"doc_hash": "1d0ba8dc3c210bd0114dd8d2ae8ba51a3638f0758448594e29895b596c0ac7f0", "ref_doc_id": "3a647e91-0523-4d16-9dbe-609a8c6834ef"}, "06f323ff-0508-4aef-bbcb-8b5994f66075": {"doc_hash": "1cb2bc1d7ae5cb691ca61576631db7fbc47480ee6848da2407c81ca38856d6ef", "ref_doc_id": "433d7c5c-d598-4743-b6f2-5eefac12a0c6"}, "fc11a169-d959-446c-9776-cc851b73bbde": {"doc_hash": "e04ee141ecc2d99853e1274c4c7a5c2f1f5f5101dfaf48a728de804a773b5eb2", "ref_doc_id": "433d7c5c-d598-4743-b6f2-5eefac12a0c6"}, "07f09aa6-0448-4200-b4da-a5a061ffbc64": {"doc_hash": "966974c25e4228fac63dc5e27d065928165824df47d6d32a7de35f9133c2060c", "ref_doc_id": "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81"}, "b080ad7f-db3c-4b68-813d-209875415606": {"doc_hash": "45a7f08670cf541d844b56132a543e4f2ac6e68a5e6e5f7f62aa187e09686ffb", "ref_doc_id": "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81"}, "2a5a05fe-0ba9-4bce-9f0e-2cf477e8ecb6": {"doc_hash": "1e97cdf668261640aeffddff18a59a448ec0b9bca9da21857bea188a4f2f6408", "ref_doc_id": "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81"}, "26820dcf-0ea8-4ae3-a4ee-1ef72b4814a4": {"doc_hash": "307af6f75af9bdfc048bdf63149847b08f566588daa17728d2a822d81cb03693", "ref_doc_id": "933428dc-c760-4f34-b08b-bd0bb8cef492"}, "d3f9929a-5db9-425e-9c60-4ac52e143374": {"doc_hash": "6491a913d128650cfbc3cb19c2eaea1b0765b4c53a49750546988941cfeda268", "ref_doc_id": "eb09a449-881d-442b-8c61-af9111f4bc11"}, "1fdac43d-b959-4857-a7ae-ecf08e4b5406": {"doc_hash": "7ff1cd0ac22ad2f5a8f1fc141b26bd82bdc9b5a8d18cd82204ff505dcddecf9d", "ref_doc_id": "eb09a449-881d-442b-8c61-af9111f4bc11"}, "a5635d2d-7258-4fbb-b0e2-3627d398bfaf": {"doc_hash": "bb947b0c7e930f1e9cbf61e2a1a9188becf25ae9d28ee6594d78478b897aa421", "ref_doc_id": "fdbc74be-8b07-4207-af06-53712754df49"}, "3de311fe-ddc8-4292-8ef4-02e3719ccd4a": {"doc_hash": "051482ce7d855d42a8e67dec7309a7b20b0f1c448418793789e5597870e24fe2", "ref_doc_id": "fdbc74be-8b07-4207-af06-53712754df49"}, "7b00e595-cc45-48af-8704-c49c963892d1": {"doc_hash": "0506cffd907ef9c5017720a28b3e275ff60eb76b9607f76772c7d149877bf7f1", "ref_doc_id": "59375a9c-b993-4bb8-80ba-b80ca695b5d6"}, "d3a6cfc7-ac78-4e53-bb81-92cc8f0bd5cc": {"doc_hash": "7f8e4bac751ca466bd1ee49e8f9654af0595e6c5907356c624934c6642fd0654", "ref_doc_id": "59375a9c-b993-4bb8-80ba-b80ca695b5d6"}, "be7218ec-0e9e-4292-a454-e750c5cac555": {"doc_hash": "fc5d633e029b3ae6e0bc9763f34d073babfed0b595fe67222d2cc8901986a0ed", "ref_doc_id": "055904b6-e92e-4bb9-835f-51a27f78a532"}, "0b8efe35-903b-44a8-bd7c-8193ae2360e3": {"doc_hash": "298e17183daa5db012bf1510d44ee5729e54015f5175b395aeed65ae75537916", "ref_doc_id": "055904b6-e92e-4bb9-835f-51a27f78a532"}, "1b4a9f25-7e4e-49cb-bf3e-e0d91a67061e": {"doc_hash": "3b9683677e3da38710c1fd752b24cf9e85cffad78f8fbd79f1837584e86bea9f", "ref_doc_id": "c2469720-5160-49e8-9f03-31c74b3d84f3"}, "b996b334-d3c4-4fef-a46b-e74bef7903df": {"doc_hash": "260120060c105171d6e132ff72cb8a53ed79b6cf8b9a8c8db98d659a1fdf32f6", "ref_doc_id": "c2469720-5160-49e8-9f03-31c74b3d84f3"}, "eed80f96-461c-4386-af0c-6eb2682de7be": {"doc_hash": "1b2b40605bacb5862a41bc689316060f099b91b6cd8295a1ce02425e4a800069", "ref_doc_id": "d93ee76e-26dd-460c-aac4-238384e2e80e"}, "11d98ef4-ee93-436e-ab13-2007cdb77cfc": {"doc_hash": "ed6c1fb2392662c098ac53e615fa0ef9fbe18f99066dea089e3556dcc2b8e5f8", "ref_doc_id": "d93ee76e-26dd-460c-aac4-238384e2e80e"}, "92492932-e6f8-4bef-aad6-0432c13c67e2": {"doc_hash": "d9033bb6c154c710bc62dfa0cb795a5326733bd0632459bd50538b2a8d69bd99", "ref_doc_id": "bc0a671b-1618-4355-b357-9f3655fa79ce"}, "702a4c63-a2d9-42fc-9917-d2d1c6fceefd": {"doc_hash": "2f850d375c91a8f7991372fae73b87351aa9aa939a7217dcc52f445d75287f0a", "ref_doc_id": "bc0a671b-1618-4355-b357-9f3655fa79ce"}, "f55553d2-c76e-4d17-9b47-744da997cc89": {"doc_hash": "b7f69de2edfaba64e902a39aba3cd4a042e1d6e5847f058074f67ef61043a62a", "ref_doc_id": "d971507c-638d-448a-8b92-f29b8ac01662"}, "96be2371-d6dc-4dea-acd4-9fc3d1ef0a30": {"doc_hash": "6e8dacf6321b33638ddc2284082215efe94fec09f4884e8b587a406cb73ee13d", "ref_doc_id": "d971507c-638d-448a-8b92-f29b8ac01662"}, "e2b33092-70c2-4ba5-854e-cbcd8bdee4a5": {"doc_hash": "0e327f5a0ea0ff7e0766887cb7510fa5371b477c994b4176da26ed2937c0ffc3", "ref_doc_id": "d971507c-638d-448a-8b92-f29b8ac01662"}, "e073011d-9cb5-4948-a618-4284719defb4": {"doc_hash": "38a9162913e732643b103d1b80ce6792ba858d60791c810ef5aec397ab147e82", "ref_doc_id": "6bb0c0e2-4d01-48db-968e-91e6fdca5c8f"}, "bc388c01-d4e4-4d9b-b305-55fa141768d4": {"doc_hash": "de3e45fb0c84834c4935804539a6a7b10d7fef15f7ddb19e1d1de16128b1c82c", "ref_doc_id": "e84f2b0a-23e4-4770-8a83-9a10fbb027c8"}, "f7b912e5-1be7-46c0-b791-cbb28481df38": {"doc_hash": "de80ad9ce8a21fa3f7e381114adeb81d3390935bd1d6764154f4daeb6f4f9f09", "ref_doc_id": "f4dc8719-f6c9-4c98-9be7-2eaa551bb010"}, "59c6c403-c7bf-4ead-8650-59dbf0b21481": {"doc_hash": "0c3ee465dbab3e57a2f199f166fb1208f13276ae5abb36e5727aad95634c7950", "ref_doc_id": "f55fe5f0-9ada-41bb-8c41-348cc954ac47"}, "b21d430a-50a9-484a-8d5e-ca8edf5e2dca": {"doc_hash": "b77335efa133c1b03b4c204d57fdd830b6d143bd6194c6b198ab0d145820395f", "ref_doc_id": "bc6a9f90-1aa9-48a3-94b1-7d0e413126e6"}, "01b05f41-3a77-48b0-82e7-93e4b7876d24": {"doc_hash": "b594bd9f2c8c1f86e80d0a257b7472ac88721cb17c2bbb1583308b437afac57f", "ref_doc_id": "1de701fb-4a0b-4e5c-9cac-5a575e7b2de1"}, "c7b56209-d4a7-43d4-b133-74c488a8d4c6": {"doc_hash": "bb25b9f081beac5591d9521c95f5e5d7adb48a84373a2792bd3df46b4056fa7b", "ref_doc_id": "a91b38b1-5bbc-4741-836c-792c49037ef6"}, "e1320bb9-1c0f-4293-b1a9-8ecc8a1201c5": {"doc_hash": "f2891beadb5bdca69da54070f00afdf9b23a5389f728435e6a56695c852ded59", "ref_doc_id": "18e4b820-2746-40d8-92bc-cff9e8885d3d"}, "f0cf30fe-9306-4ca9-aac1-faa80912d8c6": {"doc_hash": "3c784172153fe234945ddb2844594de2c3349e3dbfe5498ac4856df330745f84", "ref_doc_id": "49565e20-156d-4771-9162-e6eb2601c0ec"}}, "docstore/data": {"3cb43932-7bd5-4819-b886-20632a5f94a1": {"__data__": {"id_": "3cb43932-7bd5-4819-b886-20632a5f94a1", "embedding": null, "metadata": {"file_path": "docs\\python\\automatetheboringstuff.com_10_0.txt", "file_name": "automatetheboringstuff.com_10_0.txt", "file_type": "text/plain", "file_size": 4008, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ff15edc-7942-4114-a5fd-6b340295ef46", "node_type": "4", "metadata": {"file_path": "docs\\python\\automatetheboringstuff.com_10_0.txt", "file_name": "automatetheboringstuff.com_10_0.txt", "file_type": "text/plain", "file_size": 4008, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "10d3ec8d57c77ff83ef4109b08162d3cfab6bcc6776530110241b6912e4f65a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "241caf26-638f-40d9-ac28-e6e263f9eb9d", "node_type": "1", "metadata": {}, "hash": "f8e7d2e4484bd2ffaad8c4097d2cb02d043903ba3349c96af97c2710477d8e7e", "class_name": "RelatedNodeInfo"}}, "text": "Automate the Boring Stuff with Python Automate the Boring Stuff with Python By Al Sweigart. Over 500,000 copies sold. Free to read under a CC license . \"The best part of programming is the triumph of seeing the machine do something useful. Automate the Boring Stuff with Python frames all of programming as these small triumphs; it makes the boring fun.\" - Hilary Mason , Data Scientist and Founder of Fast Forward Labs \"I'm having a lot of fun breaking things and then putting them back together, and just remembering the joy of turning a set of instructions into something useful and fun, like I did when I was a kid.\" - Wil Wheaton , WilWheaton.net Practical Programming for Total Beginners If you've ever spent hours renaming files or updating hundreds of spreadsheet cells, you know how tedious tasks like these can be. But what if you could have your computer do them for you? In Automate the Boring Stuff with Python , you'll learn how to use Python to write programs that do in minutes what would take you hours to do by hand - no prior programming experience required. Once you've mastered the basics of programming, you'll create Python programs that effortlessly perform useful and impressive feats of automation to: Search for text in a file or across multiple files Create, update, move, and rename files and folders Search the Web and download online content Update and format data in Excel spreadsheets of any size Split, merge, watermark, and encrypt PDFs Send reminder emails and text notifications Fill out online forms Step-by-step instructions walk you through each program, and practice projects at the end of each chapter challenge you to improve those programs and use your newfound skills to automate similar tasks. Don't spend your time doing work a well-trained monkey could do. Even if you've never written a line of code, you can make your computer do the grunt work. Learn how in Automate the Boring Stuff with Python. Third Edition Now Available The third edition of Automate the Boring Stuff is now available on the No Starch Press website . If you buy the print book from No Starch, you'll immediately receive the Early Access ebook and the DRM-free finished ebook when the book is released. Online Video Course on Udemy This video course follows much (though not all) of the content of the book. Use this link to apply a 60% discount code. Or preview the first 15 course videos for free on YouTube. Table of Contents Introduction Chapter 1 \u2013 Python Basics Chapter 2 \u2013 Flow Control Chapter 3 \u2013 Functions Chapter 4 \u2013 Lists Chapter 5 \u2013 Dictionaries and Structuring Data Chapter 6 \u2013 Manipulating Strings Chapter 7 \u2013 Pattern Matching with Regular Expressions Chapter 8 \u2013 Input Validation Chapter 9 \u2013 Reading and Writing Files Chapter 10 \u2013 Organizing Files Chapter 11 \u2013 Debugging Chapter 12 \u2013 Web Scraping Chapter 13 \u2013 Working with Excel Spreadsheets Chapter 14 \u2013 Working with Google Spreadsheets Chapter 15 \u2013 Working with PDF and Word Documents Chapter 16 \u2013 Working with CSV Files and JSON Data Chapter 17 \u2013 Keeping Time, Scheduling Tasks, and Launching Programs Chapter 18 \u2013 Sending Email and Text Messages Chapter 19 \u2013 Manipulating Images Chapter 20 \u2013 Controlling the Keyboard and Mouse with GUI Automation Appendix A \u2013 Installing Third-Party Modules Appendix B \u2013 Running Programs Appendix C \u2013 Answers to the Practice Questions (Link to the older 1st edition.) Additional Content Download files used in the book List of CSS Selector Tutorials List of JSON APIs List of Programming Practice Sites List of Web Comics Schedulers for Windows, Mac, and Linux How to Do PyCon (or any tech conference) About the Author Al Sweigart is a software developer and teaches programming to kids and adults. He has written several books for beginners and makes them freely available at InventWithPython.com . His personal website is AlSweigart.com . Email | Mastodon | Twitter | Twitch | YouTube | GitHub | Blog | Patreon | Amazon Author | LinkedIn", "start_char_idx": 0, "end_char_idx": 3962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "241caf26-638f-40d9-ac28-e6e263f9eb9d": {"__data__": {"id_": "241caf26-638f-40d9-ac28-e6e263f9eb9d", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd94dcab-4db3-4abc-b656-ce09ebfca43c", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2feaef88bd7e4c94f45485832fde7bc7ff3d1837d9ca1fc0add2ead6e26227f4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cb43932-7bd5-4819-b886-20632a5f94a1", "node_type": "1", "metadata": {"file_path": "docs\\python\\automatetheboringstuff.com_10_0.txt", "file_name": "automatetheboringstuff.com_10_0.txt", "file_type": "text/plain", "file_size": 4008, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "10d3ec8d57c77ff83ef4109b08162d3cfab6bcc6776530110241b6912e4f65a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ac219d5-f179-43c8-b43b-5e96a95fca65", "node_type": "1", "metadata": {}, "hash": "a6022a091446c467a9d4f2979ff357202f7e5d2f9730a623858a25e93a82ee2a", "class_name": "RelatedNodeInfo"}}, "text": "The Hitchhiker\u2019s Guide to Python! \u2014 The Hitchhiker's Guide to Python The Hitchhiker\u2019s Guide to Python! \u00b6 Greetings, Earthling! Welcome to The Hitchhiker\u2019s Guide to Python. This is a living, breathing guide. If you\u2019d like to contribute, fork us on GitHub ! This handcrafted guide exists to provide both novice and expert Python developers a best practice handbook for the installation, configuration, and usage of Python on a daily basis. This guide is opinionated in a way that is almost, but not quite, entirely unlike Python\u2019s official documentation. You won\u2019t find a list of every Python web framework available here. Rather, you\u2019ll find a nice concise list of highly recommended options. Note The use of Python 3 is highly recommended over Python 2. Consider upgrading your applications and infrastructures if you find yourself still using Python 2 in production today. If you are using Python 3, congratulations \u2014 you are indeed a person of excellent taste. \u2014 Kenneth Reitz Let\u2019s get started! But first, let\u2019s make sure you know where your towel is. Getting Started with Python \u00b6 New to Python? Let\u2019s properly setup up your Python environment: Picking a Python Interpreter (3 vs 2) The State of Python (3 & 2) Recommendations So\u2026. 3? Implementations Properly Install Python on your system: Properly Installing Python Installing Python 3 on Mac OS X Installing Python 3 on Windows Installing Python 3 on Linux Installing Python 2 on Mac OS X Installing Python 2 on Windows Installing Python 2 on Linux Using Virtualenvs with Pipenv: Pipenv & Virtual Environments Make sure you\u2019ve got Python & pip Installing Pipenv Installing packages for your project Using installed packages Next steps Lower level: virtualenv Basic Usage Other Notes virtualenvwrapper virtualenv-burrito direnv Python Development Environments \u00b6 This part of the guide focuses on the Python development environment, and the best-practice tools that are available for writing Python code. Your Development Environment Text Editors IDEs Interpreter Tools Other Tools Pipenv & Virtual Environments Make sure you\u2019ve got Python & pip Installing Pipenv Installing packages for your project Using installed packages Next steps Lower level: virtualenv Basic Usage Other Notes virtualenvwrapper virtualenv-burrito direnv Further Configuration of pip and Virtualenv Requiring an active virtual environment for pip Caching packages for future use Writing Great Python Code \u00b6 This part of the guide focuses on the best-practices for writing Python code. Structuring Your Project Structure of the Repository Structure of Code is Key Modules Packages Object-oriented programming Decorators Context Managers Dynamic typing Mutable and immutable types Vendorizing Dependencies Runners Further Reading Code Style General concepts Idioms Zen of Python PEP 8 Conventions Reading Great Code Documentation Project Documentation Project Publication Code Documentation Advice Other Tools Testing Your Code The Basics Tools Logging \u2026 or Print? Logging in a Library Logging in an Application Common Gotchas Mutable Default Arguments Late Binding Closures Bytecode (.pyc) Files Everywhere! Choosing a License Scenario Guide for Python Applications \u00b6 This part of the guide focuses on tool and module advice based on different scenarios. Network Applications HTTP Distributed Systems Web Applications & Frameworks Context Frameworks Web Servers WSGI Servers Server Best Practices Hosting Templating HTML Scraping Web Scraping lxml and Requests Command-line Applications Click docopt Plac Cliff Cement Python Fire GUI Applications Camelot Cocoa GTk PyGObject aka (PyGi) Kivy PyObjC PySide PyQt Pyjs Desktop (formerly Pyjamas Desktop) Qt PySimpleGUI Toga Tk wxPython Databases DB-API SQLAlchemy Records PugSQL Django ORM peewee PonyORM SQLObject Networking Twisted PyZMQ gevent Systems Administration Fabric Salt Psutil Ansible Chef Puppet Blueprint Buildout Continuous Integration Why? Jenkins Buildbot Tox Travis-CI Speed Context C Extensions Concurrency Scientific Applications Context Tools Libraries Resources Image Manipulation Python Imaging Library Open Source Computer Vision Data Serialization What is data serialization? Flat vs. Nested data Serializing Text Binary Protobuf XML parsing untangle xmltodict xmlschema JSON Parsing JSON Cryptography cryptography GPGME bindings Machine Learning SciPy Stack scikit-learn Interfacing with C/C++ Libraries C Foreign Function Interface ctypes SWIG Boost.Python Shipping Great Python Code \u00b6 This part of the guide focuses on sharing and deploying your Python code. Publishing Your Code Creating a Project Repo on GitHub When Your Project Grows Packaging Your Code Alternatives to Packaging For Python Developers For Linux Distributions Freezing Your Code Alternatives to Freezing Comparison of Freezing Tools Windows OS X Linux Additional Notes \u00b6 This part of the guide, which is mostly prose, begins with some background information about Python, and then focuses on next steps.", "start_char_idx": 0, "end_char_idx": 4975, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ac219d5-f179-43c8-b43b-5e96a95fca65": {"__data__": {"id_": "0ac219d5-f179-43c8-b43b-5e96a95fca65", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd94dcab-4db3-4abc-b656-ce09ebfca43c", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2feaef88bd7e4c94f45485832fde7bc7ff3d1837d9ca1fc0add2ead6e26227f4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "241caf26-638f-40d9-ac28-e6e263f9eb9d", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2e998bc67b41ffa2eb086de0a99f4cb94becafe85cbdd5e4041e1fc122e950c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "034f9b9f-7ce5-4ad5-a6a1-7b89c81479b0", "node_type": "1", "metadata": {}, "hash": "34a0ce4efca7b16275dae2b7a630422e48aab2ae92bb62ef207ec306809d0ec6", "class_name": "RelatedNodeInfo"}}, "text": "Jenkins Buildbot Tox Travis-CI Speed Context C Extensions Concurrency Scientific Applications Context Tools Libraries Resources Image Manipulation Python Imaging Library Open Source Computer Vision Data Serialization What is data serialization? Flat vs. Nested data Serializing Text Binary Protobuf XML parsing untangle xmltodict xmlschema JSON Parsing JSON Cryptography cryptography GPGME bindings Machine Learning SciPy Stack scikit-learn Interfacing with C/C++ Libraries C Foreign Function Interface ctypes SWIG Boost.Python Shipping Great Python Code \u00b6 This part of the guide focuses on sharing and deploying your Python code. Publishing Your Code Creating a Project Repo on GitHub When Your Project Grows Packaging Your Code Alternatives to Packaging For Python Developers For Linux Distributions Freezing Your Code Alternatives to Freezing Comparison of Freezing Tools Windows OS X Linux Additional Notes \u00b6 This part of the guide, which is mostly prose, begins with some background information about Python, and then focuses on next steps. Introduction About This Guide The Community BDFL Python Software Foundation PEPs Python Conferences Python User Groups Online Communities Python Job Boards Learning Python Beginner Intermediate Advanced For Engineers and Scientists Miscellaneous Topics References Documentation Official Documentation Read the Docs pydoc News PyCoder\u2019s Weekly Real Python Planet Python /r/python Talk Python Podcast Python Bytes Podcast Python Weekly Python News Import Python Weekly Awesome Python Newsletter Note Notes defined within", "start_char_idx": 3930, "end_char_idx": 5494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "034f9b9f-7ce5-4ad5-a6a1-7b89c81479b0": {"__data__": {"id_": "034f9b9f-7ce5-4ad5-a6a1-7b89c81479b0", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_1.txt", "file_name": "docs.python-guide.org_15_1.txt", "file_type": "text/plain", "file_size": 1070, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8123d867-4423-49dc-82da-e49fa4af92de", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_1.txt", "file_name": "docs.python-guide.org_15_1.txt", "file_type": "text/plain", "file_size": 1070, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1e9dfdd26f0297d972b9d910f4389868ed87b3173a129aee513385f6684dbf4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ac219d5-f179-43c8-b43b-5e96a95fca65", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f1127c3e63ade51f9ac1c42ba2a3112dc74367af8cc67f81d5e680575c799169", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62934da8-d865-42ee-ad87-f2ebaed36037", "node_type": "1", "metadata": {}, "hash": "442df8aaf9893b86a296441490072ecfec1136b59b4be3d4be64d393bab81c73", "class_name": "RelatedNodeInfo"}}, "text": "all diatonic and chromatic musical scales have been intentionally excluded from this list of additional notes. Additionally, this note. Contribution notes and legal information (for those interested). Contribute Style Guide Todo List License The Guide Style Guide Relevancy Headings Prose Code Examples Externally Linking Linking to Sections in The Guide Notes and Warnings TODOs This opinionated guide exists to provide both novice and expert Python developers a best practice handbook to the installation, configuration, and usage of Python on a daily basis. O'Reilly Book This guide is now available in tangible book form! All proceeds are being directly donated to the DjangoGirls organization. Contributors This guide is the result of the collaboration of hundreds of people around the world, and your contributions are welcome ! Useful Links The Guide Website The Guide @ GitHub Issue Tracker The Guide as a PDF Translations English French Chinese Japanese Korean Filipino Brazilian Portuguese Quick search \u00a92011-2024 Kenneth Reitz & Real Python . CC BY-NC-SA 3.0", "start_char_idx": 0, "end_char_idx": 1069, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62934da8-d865-42ee-ad87-f2ebaed36037": {"__data__": {"id_": "62934da8-d865-42ee-ad87-f2ebaed36037", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python-requests.org_32_0.txt", "file_name": "docs.python-requests.org_32_0.txt", "file_type": "text/plain", "file_size": 4285, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "025780ae-7bee-4b3d-9f26-3e53847bec82", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python-requests.org_32_0.txt", "file_name": "docs.python-requests.org_32_0.txt", "file_type": "text/plain", "file_size": 4285, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "27a721e0f4b49691155e848fbc6ff272dd01add382b736dcb05fed16bc04912c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "034f9b9f-7ce5-4ad5-a6a1-7b89c81479b0", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_1.txt", "file_name": "docs.python-guide.org_15_1.txt", "file_type": "text/plain", "file_size": 1070, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1e9dfdd26f0297d972b9d910f4389868ed87b3173a129aee513385f6684dbf4f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32b17c21-c904-4274-b586-b3c2f8b3fd68", "node_type": "1", "metadata": {}, "hash": "a2b4b605223b7c8c10ef9c22c28f3710e42c089dcc8c99cca9e61189283b8385", "class_name": "RelatedNodeInfo"}}, "text": "Requests: HTTP for Humans\u2122 \u2014 Requests 2.32.3 documentation Requests: HTTP for Humans\u2122 \u00b6 Release v2.32.3. ( Installation ) Requests is an elegant and simple HTTP library for Python, built for human beings. Behold, the power of Requests : >>> r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' )) >>> r . status_code 200 >>> r . headers [ 'content-type' ] 'application/json; charset=utf8' >>> r . encoding 'utf-8' >>> r . text '{\"type\":\"User\"...' >>> r . json () {'private_gists': 419, 'total_private_repos': 77, ...} See similar code, sans Requests . Requests allows you to send HTTP/1.1 requests extremely easily. There\u2019s no need to manually add query strings to your URLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling are 100% automatic, thanks to urllib3 . Beloved Features \u00b6 Requests is ready for today\u2019s web. Keep-Alive & Connection Pooling International Domains and URLs Sessions with Cookie Persistence Browser-style SSL Verification Automatic Content Decoding Basic/Digest Authentication Elegant Key/Value Cookies Automatic Decompression Unicode Response Bodies HTTP(S) Proxy Support Multipart File Uploads Streaming Downloads Connection Timeouts Chunked Requests .netrc Support Requests officially supports Python 3.8+, and runs great on PyPy. The User Guide \u00b6 This part of the documentation, which is mostly prose, begins with some background information about Requests, then focuses on step-by-step instructions for getting the most out of Requests. Installation of Requests $ python -m pip install requests Get the Source Code Quickstart Make a Request Passing Parameters In URLs Response Content Binary Response Content JSON Response Content Raw Response Content Custom Headers More complicated POST requests POST a Multipart-Encoded File Response Status Codes Response Headers Cookies Redirection and History Timeouts Errors and Exceptions Advanced Usage Session Objects Request and Response Objects Prepared Requests SSL Cert Verification Client Side Certificates CA Certificates Body Content Workflow Keep-Alive Streaming Uploads Chunk-Encoded Requests POST Multiple Multipart-Encoded Files Event Hooks Custom Authentication Streaming Requests Proxies Compliance HTTP Verbs Custom Verbs Link Headers Transport Adapters Blocking Or Non-Blocking? Header Ordering Timeouts Authentication Basic Authentication Digest Authentication OAuth 1 Authentication OAuth 2 and OpenID Connect Authentication Other Authentication New Forms of Authentication The Community Guide \u00b6 This part of the documentation, which is mostly prose, details the Requests ecosystem and community. Recommended Packages and Extensions Certifi CA Bundle CacheControl Requests-Toolbelt Requests-Threads Requests-OAuthlib Betamax Frequently Asked Questions Encoded Data? Custom User-Agents? Why not Httplib2? Python 3 Support? Python 2 Support? What are \u201chostname doesn\u2019t match\u201d errors? Integrations Articles & Talks Support Stack Overflow File an Issue Send a Tweet Vulnerability Disclosure Release Process and Rules Major Releases Minor Releases Hotfix Releases Reasoning Community Updates Release History The API Documentation / Guide \u00b6 If you are looking for information on a specific function, class, or method, this part of the documentation is for you. Developer Interface Main Interface Exceptions Request Sessions Lower-Level Classes Lower-Lower-Level Classes Authentication Encodings Cookies Status Code Lookup Migrating to 1.x Migrating to 2.x The Contributor Guide \u00b6 If you want to contribute to the project, this part of the documentation is for you. Contributor\u2019s Guide Be Cordial Get Early Feedback Contribution Suitability Code Contributions Steps for Submitting Code Code Review Code Style New Contributors Documentation Contributions Bug Reports Feature Requests Authors Keepers of the Crystals Previous Keepers of Crystals Patches and Suggestions There are no more guides. You are now guideless. Good luck. Requests is an elegant and simple HTTP library for Python, built for human beings. Useful Links Quickstart Advanced Usage API Reference Release History Contributors Guide Recommended Packages and Extensions Requests @ GitHub Requests @ PyPI Issue Tracker Quick search \u00a9MMXVIX. A Kenneth Reitz Project.", "start_char_idx": 0, "end_char_idx": 4260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32b17c21-c904-4274-b586-b3c2f8b3fd68": {"__data__": {"id_": "32b17c21-c904-4274-b586-b3c2f8b3fd68", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python.org_0_0.txt", "file_name": "docs.python.org_0_0.txt", "file_type": "text/plain", "file_size": 2333, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6a9bf364-ad0e-4806-b5af-7770c8e596c2", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python.org_0_0.txt", "file_name": "docs.python.org_0_0.txt", "file_type": "text/plain", "file_size": 2333, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "09ce8ec7aafaecb2794a01f0dee44f2ce04551dee18537f2bc7c6863d6145456", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62934da8-d865-42ee-ad87-f2ebaed36037", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python-requests.org_32_0.txt", "file_name": "docs.python-requests.org_32_0.txt", "file_type": "text/plain", "file_size": 4285, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "27a721e0f4b49691155e848fbc6ff272dd01add382b736dcb05fed16bc04912c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e62ff774-0a51-46cd-9f1f-02ce28263532", "node_type": "1", "metadata": {}, "hash": "539785ebc9dd17fe28eef0a463e06e6e20149fe4852cc1770b9333a69112df8b", "class_name": "RelatedNodeInfo"}}, "text": "3.13.3 Documentation Navigation index modules | Python \u00bb 3.13.3 Documentation \u00bb | Theme Auto Light Dark | Python 3.13.3 documentation Welcome! This is the official documentation for Python 3.13.3. Documentation sections: What's new in Python 3.13? Or all \"What's new\" documents since Python 2.0 Tutorial Start here: a tour of Python's syntax and features Library reference Standard library and builtins Language reference Syntax and language elements Python setup and usage How to install, configure, and use Python Python HOWTOs In-depth topic manuals Installing Python modules Third-party modules and PyPI.org Distributing Python modules Publishing modules for use by other people Extending and embedding For C/C++ programmers Python's C API C API reference FAQs Frequently asked questions (with answers!) Deprecations Deprecated functionality Indices, glossary, and search: Global module index All modules and libraries General index All functions, classes, and terms Glossary Terms explained Search page Search this documentation Complete table of contents Lists all sections and subsections Project information: Reporting issues Contributing to docs Download the documentation History and license of Python Copyright About the documentation Download Download these documents Docs by version Python 3.15 (in development) Python 3.14 (pre-release) Python 3.13 (stable) Python 3.12 (security-fixes) Python 3.11 (security-fixes) Python 3.10 (security-fixes) Python 3.9 (security-fixes) Python 3.8 (EOL) Python 3.7 (EOL) Python 3.6 (EOL) Python 3.5 (EOL) Python 3.4 (EOL) Python 3.3 (EOL) Python 3.2 (EOL) Python 3.1 (EOL) Python 3.0 (EOL) Python 2.7 (EOL) Python 2.6 (EOL) All versions Other resources PEP Index Beginner's Guide Book List Audio/Visual Talks Python Developer\u00e2\u0080\u0099s Guide \u00c2\u00ab Navigation index modules | Python \u00bb 3.13.3 Documentation \u00bb | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on May 26, 2025 (08:18 UTC). Found a bug ? Created using Sphinx 8.2.3.", "start_char_idx": 0, "end_char_idx": 2323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e62ff774-0a51-46cd-9f1f-02ce28263532": {"__data__": {"id_": "e62ff774-0a51-46cd-9f1f-02ce28263532", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python.org_0_1.txt", "file_name": "docs.python.org_0_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78c3cd94-ceae-4f42-85a9-7be5d54068f2", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python.org_0_1.txt", "file_name": "docs.python.org_0_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "4c11df352cf3664839181bad7aab4f1ad27ba0551b8ab393268cc32b38ea6604", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32b17c21-c904-4274-b586-b3c2f8b3fd68", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python.org_0_0.txt", "file_name": "docs.python.org_0_0.txt", "file_type": "text/plain", "file_size": 2333, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "09ce8ec7aafaecb2794a01f0dee44f2ce04551dee18537f2bc7c6863d6145456", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9f57c72-4e45-4938-a706-e8dbb3530b6a", "node_type": "1", "metadata": {}, "hash": "3287818df0a624267427ccd246ee728ef21a30d6edc49fc919ea81564ed37e6f", "class_name": "RelatedNodeInfo"}}, "text": "10.8. Dates and Times 10.9. Data Compression 10.10. Performance Measurement 10.11. Quality Control 10.12. Batteries Included 11. Brief Tour of the Standard Library \u00e2\u0080\u0094 Part II 11.1. Output Formatting 11.2. Templating 11.3. Working with Binary Data Record Layouts 11.4. Multi-threading 11.5. Logging 11.6. Weak References 11.7. Tools for Working with Lists 11.8. Decimal Floating-Point Arithmetic 12. Virtual Environments and Packages 12.1. Introduction 12.2. Creating Virtual Environments 12.3. Managing Packages with pip 13. What Now? 14. Interactive Input Editing and History Substitution 14.1. Tab Completion and History Editing 14.2. Alternatives to the Interactive Interpreter 15. Floating-Point Arithmetic: Issues and Limitations 15.1. Representation Error 16. Appendix 16.1. Interactive Mode 16.1.1. Error Handling 16.1.2. Executable Python Scripts 16.1.3. The Interactive Startup File 16.1.4. The Customization Modules Previous topic Changelog Next topic 1. Whetting Your Appetite This page Report a bug Show source \u00c2\u00ab Navigation index modules | next | previous | Python \u00bb 3.13.3 Documentation \u00bb The Python Tutorial | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on May 26, 2025 (08:18 UTC). Found a bug ? Created using Sphinx 8.2.3.", "start_char_idx": 0, "end_char_idx": 1599, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9f57c72-4e45-4938-a706-e8dbb3530b6a": {"__data__": {"id_": "b9f57c72-4e45-4938-a706-e8dbb3530b6a", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "835a26f2-5e94-45cb-b3bc-44e7f954485f", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd0d2a4b287e124eb5ffbd49a911d7af7adef554328bec269eb8877c67c2ad9d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e62ff774-0a51-46cd-9f1f-02ce28263532", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python.org_0_1.txt", "file_name": "docs.python.org_0_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "4c11df352cf3664839181bad7aab4f1ad27ba0551b8ab393268cc32b38ea6604", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33b09cb5-92e6-4d79-a65a-646231eea2b2", "node_type": "1", "metadata": {}, "hash": "1ab6576934843b5dda97aa684236cd587626afef6cb9ad0bbecb292844b8a07e", "class_name": "RelatedNodeInfo"}}, "text": "The Python Tutorial \u2014 Python 3.13.3 documentation Navigation index modules | next | previous | Python \u00bb 3.13.3 Documentation \u00bb The Python Tutorial | Theme Auto Light Dark | The Python Tutorial \u00c2\u00b6 Tip This tutorial is designed for programmers that are new to the Python language, not beginners who are new to programming. Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u00e2\u0080\u0099s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/ , and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation. The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications. This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. Be aware that it expects you to have a basic understanding of programming in general. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well. For a description of standard objects and modules, see The Python Standard Library . The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual . There are also several books covering Python in depth. This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python\u00e2\u0080\u0099s most noteworthy features, and will give you a good idea of the language\u00e2\u0080\u0099s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library . The Glossary is also worth going through. 1. Whetting Your Appetite 2. Using the Python Interpreter 2.1. Invoking the Interpreter 2.1.1. Argument Passing 2.1.2. Interactive Mode 2.2. The Interpreter and Its Environment 2.2.1. Source Code Encoding 3. An Informal Introduction to Python 3.1. Using Python as a Calculator 3.1.1. Numbers 3.1.2. Text 3.1.3. Lists 3.2. First Steps Towards Programming 4. More Control Flow Tools 4.1. if Statements 4.2. for Statements 4.3. The range() Function 4.4. break and continue Statements 4.5. else Clauses on Loops 4.6. pass Statements 4.7. match Statements 4.8. Defining Functions 4.9. More on Defining Functions 4.9.1. Default Argument Values 4.9.2. Keyword Arguments 4.9.3. Special parameters 4.9.3.1. Positional-or-Keyword Arguments 4.9.3.2. Positional-Only Parameters 4.9.3.3. Keyword-Only Arguments 4.9.3.4. Function Examples 4.9.3.5. Recap 4.9.4. Arbitrary Argument Lists 4.9.5. Unpacking Argument Lists 4.9.6. Lambda Expressions 4.9.7. Documentation Strings 4.9.8. Function Annotations 4.10. Intermezzo: Coding Style 5. Data Structures 5.1. More on Lists 5.1.1. Using Lists as Stacks 5.1.2. Using Lists as Queues 5.1.3. List Comprehensions 5.1.4. Nested List Comprehensions 5.2. The del statement 5.3. Tuples and Sequences 5.4. Sets 5.5. Dictionaries 5.6. Looping Techniques 5.7. More on Conditions 5.8. Comparing Sequences and Other Types 6. Modules 6.1.", "start_char_idx": 0, "end_char_idx": 3811, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33b09cb5-92e6-4d79-a65a-646231eea2b2": {"__data__": {"id_": "33b09cb5-92e6-4d79-a65a-646231eea2b2", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "835a26f2-5e94-45cb-b3bc-44e7f954485f", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd0d2a4b287e124eb5ffbd49a911d7af7adef554328bec269eb8877c67c2ad9d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9f57c72-4e45-4938-a706-e8dbb3530b6a", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c48794dd2c5d55bbe2ac2fc328332d2665f5ccf5a0007bdbf0d97d57701eae61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73a16a33-1a2c-486b-a750-1d60a09c81c1", "node_type": "1", "metadata": {}, "hash": "539785ebc9dd17fe28eef0a463e06e6e20149fe4852cc1770b9333a69112df8b", "class_name": "RelatedNodeInfo"}}, "text": "Unpacking Argument Lists 4.9.6. Lambda Expressions 4.9.7. Documentation Strings 4.9.8. Function Annotations 4.10. Intermezzo: Coding Style 5. Data Structures 5.1. More on Lists 5.1.1. Using Lists as Stacks 5.1.2. Using Lists as Queues 5.1.3. List Comprehensions 5.1.4. Nested List Comprehensions 5.2. The del statement 5.3. Tuples and Sequences 5.4. Sets 5.5. Dictionaries 5.6. Looping Techniques 5.7. More on Conditions 5.8. Comparing Sequences and Other Types 6. Modules 6.1. More on Modules 6.1.1. Executing modules as scripts 6.1.2. The Module Search Path 6.1.3. \u00e2\u0080\u009cCompiled\u00e2\u0080\u009d Python files 6.2. Standard Modules 6.3. The dir() Function 6.4. Packages 6.4.1. Importing * From a Package 6.4.2. Intra-package References 6.4.3. Packages in Multiple Directories 7. Input and Output 7.1. Fancier Output Formatting 7.1.1. Formatted String Literals 7.1.2. The String format() Method 7.1.3. Manual String Formatting 7.1.4. Old string formatting 7.2. Reading and Writing Files 7.2.1. Methods of File Objects 7.2.2. Saving structured data with json 8. Errors and Exceptions 8.1. Syntax Errors 8.2. Exceptions 8.3. Handling Exceptions 8.4. Raising Exceptions 8.5. Exception Chaining 8.6. User-defined Exceptions 8.7. Defining Clean-up Actions 8.8. Predefined Clean-up Actions 8.9. Raising and Handling Multiple Unrelated Exceptions 8.10. Enriching Exceptions with Notes 9. Classes 9.1. A Word About Names and Objects 9.2. Python Scopes and Namespaces 9.2.1. Scopes and Namespaces Example 9.3. A First Look at Classes 9.3.1. Class Definition Syntax 9.3.2. Class Objects 9.3.3. Instance Objects 9.3.4. Method Objects 9.3.5. Class and Instance Variables 9.4. Random Remarks 9.5. Inheritance 9.5.1. Multiple Inheritance 9.6. Private Variables 9.7. Odds and Ends 9.8. Iterators 9.9. Generators 9.10. Generator Expressions 10. Brief Tour of the Standard Library 10.1. Operating System Interface 10.2. File Wildcards 10.3. Command Line Arguments 10.4. Error Output Redirection and Program Termination 10.5. String Pattern Matching 10.6. Mathematics 10.7. Internet Access", "start_char_idx": 3334, "end_char_idx": 5389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73a16a33-1a2c-486b-a750-1d60a09c81c1": {"__data__": {"id_": "73a16a33-1a2c-486b-a750-1d60a09c81c1", "embedding": null, "metadata": {"file_path": "docs\\python\\docs.python.org_40_1.txt", "file_name": "docs.python.org_40_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6ab3cdb-fda5-47bf-bc23-6776228b14c6", "node_type": "4", "metadata": {"file_path": "docs\\python\\docs.python.org_40_1.txt", "file_name": "docs.python.org_40_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e2696a0e915bd2be627b56cbe4d0ddca054d19f3618e780c6b548661cb03003f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33b09cb5-92e6-4d79-a65a-646231eea2b2", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0812a480f7ad045e66fa6b63bb92242ca895907954df671a301df9c6172f5eb0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "965ac124-d144-4e49-998a-edc8fd92805a", "node_type": "1", "metadata": {}, "hash": "6b62a7eefdc79418da7593c5edb9dfb8b83bed1f955bd1237ec290163f9630be", "class_name": "RelatedNodeInfo"}}, "text": "10.8. Dates and Times 10.9. Data Compression 10.10. Performance Measurement 10.11. Quality Control 10.12. Batteries Included 11. Brief Tour of the Standard Library \u00e2\u0080\u0094 Part II 11.1. Output Formatting 11.2. Templating 11.3. Working with Binary Data Record Layouts 11.4. Multi-threading 11.5. Logging 11.6. Weak References 11.7. Tools for Working with Lists 11.8. Decimal Floating-Point Arithmetic 12. Virtual Environments and Packages 12.1. Introduction 12.2. Creating Virtual Environments 12.3. Managing Packages with pip 13. What Now? 14. Interactive Input Editing and History Substitution 14.1. Tab Completion and History Editing 14.2. Alternatives to the Interactive Interpreter 15. Floating-Point Arithmetic: Issues and Limitations 15.1. Representation Error 16. Appendix 16.1. Interactive Mode 16.1.1. Error Handling 16.1.2. Executable Python Scripts 16.1.3. The Interactive Startup File 16.1.4. The Customization Modules Previous topic Changelog Next topic 1. Whetting Your Appetite This page Report a bug Show source \u00c2\u00ab Navigation index modules | next | previous | Python \u00bb 3.13.3 Documentation \u00bb The Python Tutorial | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on May 26, 2025 (08:18 UTC). Found a bug ? Created using Sphinx 8.2.3.", "start_char_idx": 0, "end_char_idx": 1599, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "965ac124-d144-4e49-998a-edc8fd92805a": {"__data__": {"id_": "965ac124-d144-4e49-998a-edc8fd92805a", "embedding": null, "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_0.txt", "file_name": "flask.palletsprojects.com_28_0.txt", "file_type": "text/plain", "file_size": 5779, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea2a14ae-a08d-45a6-8068-95d5823bdc71", "node_type": "4", "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_0.txt", "file_name": "flask.palletsprojects.com_28_0.txt", "file_type": "text/plain", "file_size": 5779, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d8dff7f0abbd979188379bfc0cc7ac6915ecb21c46d6908f6623e879031752cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73a16a33-1a2c-486b-a750-1d60a09c81c1", "node_type": "1", "metadata": {"file_path": "docs\\python\\docs.python.org_40_1.txt", "file_name": "docs.python.org_40_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e2696a0e915bd2be627b56cbe4d0ddca054d19f3618e780c6b548661cb03003f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af024dd6-52e2-4f8d-8030-c8e6ce5b710b", "node_type": "1", "metadata": {}, "hash": "89442363726cff796fe2f7c69787ce5972b5188363cfb8c66e9d5522c6c22b77", "class_name": "RelatedNodeInfo"}}, "text": "Welcome to Flask \u2014 Flask Documentation (3.2.x) Navigation index modules | next | Flask Documentation (3.2.x) \u00bb Welcome to Flask Welcome to Flask \u00b6 Welcome to Flask\u2019s documentation. Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. Get started with Installation and then get an overview with the Quickstart . There is also a more detailed Tutorial that shows how to create a small but complete application with Flask. Common patterns are described in the Patterns for Flask section. The rest of the docs describe each component of Flask in detail, with a full reference in the API section. Flask depends on the Werkzeug WSGI toolkit, the Jinja template engine, and the Click CLI toolkit. Be sure to check their documentation as well as Flask\u2019s when looking for information. User\u2019s Guide \u00b6 Flask provides configuration and conventions, with sensible defaults, to get started. This section of the documentation explains the different parts of the Flask framework and how they can be used, customized, and extended. Beyond Flask itself, look for community-maintained extensions to add even more functionality. Installation Python Version Dependencies Virtual environments Install Flask Quickstart A Minimal Application Debug Mode HTML Escaping Routing Static Files Rendering Templates Accessing Request Data Redirects and Errors About Responses Sessions Message Flashing Logging Hooking in WSGI Middleware Using Flask Extensions Deploying to a Web Server Tutorial Project Layout Application Setup Define and Access the Database Blueprints and Views Templates Static Files Blog Blueprint Make the Project Installable Test Coverage Deploy to Production Keep Developing! Templates Jinja Setup Standard Context Controlling Autoescaping Registering Filters Context Processors Streaming Testing Flask Applications Identifying Tests Fixtures Sending Requests with the Test Client Following Redirects Accessing and Modifying the Session Running Commands with the CLI Runner Tests that depend on an Active Context Handling Application Errors Error Logging Tools Error Handlers Custom Error Pages Blueprint Error Handlers Returning API Errors as JSON Logging Debugging Debugging Application Errors In Production The Built-In Debugger External Debuggers Logging Basic Configuration Email Errors to Admins Injecting Request Information Other Libraries Configuration Handling Configuration Basics Debug Mode Builtin Configuration Values Configuring from Python Files Configuring from Data Files Configuring from Environment Variables Configuration Best Practices Development / Production Instance Folders Signals Core Signals Subscribing to Signals Creating Signals Sending Signals Signals and Flask\u2019s Request Context Decorator Based Signal Subscriptions Class-based Views Basic Reusable View URL Variables View Lifetime and self View Decorators Method Hints Method Dispatching and APIs Application Structure and Lifecycle Application Setup Serving the Application How a Request is Handled The Application Context Purpose of the Context Lifetime of the Context Manually Push a Context Storing Data Events and Signals The Request Context Purpose of the Context Lifetime of the Context Manually Push a Context How the Context Works Callbacks and Errors Notes On Proxies Modular Applications with Blueprints Why Blueprints? The Concept of Blueprints My First Blueprint Registering Blueprints Nesting Blueprints Blueprint Resources Building URLs Blueprint Error Handlers Extensions Finding Extensions Using Extensions Building Extensions Command Line Interface Application Discovery Run the Development Server Open a Shell Environment Variables From dotenv Environment Variables From virtualenv Custom Commands Plugins Custom Scripts PyCharm Integration Development Server Command Line In Code Working with the Shell Command Line Interface Creating a Request Context Firing Before/After Request Further Improving the Shell Experience Patterns for Flask Large Applications as Packages Application Factories Application Dispatching Using URL Processors Using SQLite 3 with Flask SQLAlchemy in Flask Uploading Files Caching View Decorators Form Validation with WTForms Template Inheritance Message Flashing JavaScript, fetch , and JSON Lazily Loading Views MongoDB with MongoEngine Adding a favicon Streaming Contents Deferred Request Callbacks Adding HTTP Method Overrides Request Content Checksums Background Tasks with Celery Subclassing Flask Single-Page Applications Security Considerations Resource Use Cross-Site Scripting (XSS) Cross-Site Request Forgery (CSRF) JSON Security Security Headers Copy/Paste to Terminal Deploying to Production Self-Hosted Options Hosting Platforms Using async and await Performance Background tasks When to use Quart instead Extensions Other event loops API Reference \u00b6 If you are looking for information on a specific function, class or method, this part of the documentation is for you. API Application Object Blueprint Objects Incoming Request Data Response Objects Sessions Session Interface Test Client Test CLI Runner Application Globals Useful Functions and Classes Message Flashing JSON Support Template Rendering Configuration Stream Helpers Useful Internals Signals Class-Based Views URL Route Registrations View Function Options Command Line Interface Additional Notes \u00b6 Design Decisions in Flask The Explicit Application Object The Routing System One Template Engine What does \u201cmicro\u201d mean? Thread Locals Async/await and ASGI support What Flask is, What Flask is Not Flask Extension Development Naming The Extension Class and Initialization Adding Behavior Configuration Techniques Data During a Request Views and Models", "start_char_idx": 0, "end_char_idx": 5760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af024dd6-52e2-4f8d-8030-c8e6ce5b710b": {"__data__": {"id_": "af024dd6-52e2-4f8d-8030-c8e6ce5b710b", "embedding": null, "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_1.txt", "file_name": "flask.palletsprojects.com_28_1.txt", "file_type": "text/plain", "file_size": 1118, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f076bb2-97d0-4eb1-ab5f-7c4eeaa54aea", "node_type": "4", "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_1.txt", "file_name": "flask.palletsprojects.com_28_1.txt", "file_type": "text/plain", "file_size": 1118, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "eded212476ab5977b0dd72cefb7dad7802ca7f9e1c91721fdd97cb673c5de6dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "965ac124-d144-4e49-998a-edc8fd92805a", "node_type": "1", "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_0.txt", "file_name": "flask.palletsprojects.com_28_0.txt", "file_type": "text/plain", "file_size": 5779, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d8dff7f0abbd979188379bfc0cc7ac6915ecb21c46d6908f6623e879031752cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "427b74ab-82ea-4ed5-bfdf-559d745f5529", "node_type": "1", "metadata": {}, "hash": "d791ed08146fc5e7d29aca11dc5921853ec0ac1793cd7a1d69100f0e4d329d47", "class_name": "RelatedNodeInfo"}}, "text": "Recommended Extension Guidelines Contributing BSD-3-Clause License Changes Version 3.2.0 Version 3.1.1 Version 3.1.0 Version 3.0.3 Version 3.0.2 Version 3.0.1 Version 3.0.0 Version 2.3.3 Version 2.3.2 Version 2.3.1 Version 2.3.0 Version 2.2.5 Version 2.2.4 Version 2.2.3 Version 2.2.2 Version 2.2.1 Version 2.2.0 Version 2.1.3 Version 2.1.2 Version 2.1.1 Version 2.1.0 Version 2.0.3 Version 2.0.2 Version 2.0.1 Version 2.0.0 Version 1.1.4 Version 1.1.3 Version 1.1.2 Version 1.1.1 Version 1.1.0 Version 1.0.4 Version 1.0.3 Version 1.0.2 Version 1.0.1 Version 1.0 Version 0.12.5 Version 0.12.4 Version 0.12.3 Version 0.12.2 Version 0.12.1 Version 0.12 Version 0.11.1 Version 0.11 Version 0.10.1 Version 0.10 Version 0.9 Version 0.8.1 Version 0.8 Version 0.7.2 Version 0.7.1 Version 0.7 Version 0.6.1 Version 0.6 Version 0.5.2 Version 0.5.1 Version 0.5 Version 0.4 Version 0.3.1 Version 0.3 Version 0.2 Version 0.1 Project Links Donate PyPI Releases Source Code Issue Tracker Chat Contents Welcome to Flask User\u2019s Guide API Reference Additional Notes Quick search \u00a9 Copyright 2010 Pallets. Created using Sphinx 8.2.3.", "start_char_idx": 0, "end_char_idx": 1115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "427b74ab-82ea-4ed5-bfdf-559d745f5529": {"__data__": {"id_": "427b74ab-82ea-4ed5-bfdf-559d745f5529", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_17_0.txt", "file_name": "github.com_17_0.txt", "file_type": "text/plain", "file_size": 4133, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91b350ee-9269-42e4-a39c-e551286b1973", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_17_0.txt", "file_name": "github.com_17_0.txt", "file_type": "text/plain", "file_size": 4133, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fb4a7f29c81cad1110492de4a33133589ef4043fe54a92155f47ce928f146648", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af024dd6-52e2-4f8d-8030-c8e6ce5b710b", "node_type": "1", "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_1.txt", "file_name": "flask.palletsprojects.com_28_1.txt", "file_type": "text/plain", "file_size": 1118, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "eded212476ab5977b0dd72cefb7dad7802ca7f9e1c91721fdd97cb673c5de6dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "955137e9-16e8-4daa-ae8b-8cdb132470cb", "node_type": "1", "metadata": {}, "hash": "ca584f05505960f1481436841a2c791958cd3b78c5d6db85ef3d12a90c6e8a96", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - psf/requests: A simple, yet elegant, HTTP library. Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert psf / requests Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 9.5k Star 52.9k A simple, yet elegant, HTTP library. requests.readthedocs.io/en/latest/ License Apache-2.0 license 52.9k stars 9.5k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings psf/requests main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 6,348 Commits .github .github docs docs ext ext src/ requests src/ requests tests tests .coveragerc .coveragerc .git-blame-ignore-revs .git-blame-ignore-revs .gitignore .gitignore .pre-commit-config.yaml .pre-commit-config.yaml .readthedocs.yaml .readthedocs.yaml AUTHORS.rst AUTHORS.rst HISTORY.md HISTORY.md LICENSE LICENSE MANIFEST.in MANIFEST.in Makefile Makefile NOTICE NOTICE README.md README.md pyproject.toml pyproject.toml requirements-dev.txt requirements-dev.txt setup.cfg setup.cfg setup.py setup.py tox.ini tox.ini View all files Repository files navigation Requests Requests is a simple, yet elegant, HTTP library. > >> import requests > >> r = requests . get ( 'https://httpbin.org/basic-auth/user/pass' , auth = ( 'user' , 'pass' )) > >> r . status_code 200 > >> r . headers [ 'content-type' ] 'application/json; charset=utf8' > >> r . encoding 'utf-8' > >> r . text '{\"authenticated\": true, ...' > >> r . json () { 'authenticated' : True , ...} Requests allows you to send HTTP/1.1 requests extremely easily. There\u2019s no need to manually add query strings to your URLs, or to form-encode your PUT & POST data \u2014 but nowadays, just use the json method! Requests is one of the most downloaded Python packages today, pulling in around 30M downloads / week \u2014 according to GitHub, Requests is currently depended upon by 1,000,000+ repositories. You may certainly put your trust in this code. Installing Requests and Supported Versions Requests is available on PyPI: $ python -m pip install requests Requests officially supports Python 3.8+. Supported Features & Best\u2013Practices Requests is ready for the demands of building robust and reliable HTTP\u2013speaking applications, for the needs of today. Keep-Alive & Connection Pooling International Domains and URLs Sessions with Cookie Persistence Browser-style TLS/SSL Verification Basic & Digest Authentication Familiar dict \u2013like Cookies Automatic Content Decompression and Decoding Multi-part File Uploads SOCKS Proxy Support Connection Timeouts Streaming Downloads Automatic honoring of .netrc Chunked HTTP Requests API Reference and User Guide available on Read the Docs Cloning the repository When cloning the Requests repository, you may need to add the -c fetch.fsck.badTimezone=ignore flag to avoid an error about a bad commit (see this issue for more background): git clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git You can also apply this setting to your global Git config: git config --global fetch.fsck.badTimezone ignore About A simple, yet elegant, HTTP library. requests.readthedocs.io/en/latest/ Topics python http client cookies requests humans forhumans python-requests Resources Readme License Apache-2.0 license Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 52.9k stars Watchers 1.3k watching Forks 9.5k forks Report repository Releases 12 v2.32.3 Latest May 29, 2024 + 11 releases Sponsor this project Uh oh! There was an error while loading. Please reload this page . https://www.python.org/psf/sponsorship/ Used by 3.9m + 3,858,856 Contributors 647 + 633 contributors Languages Python 99.3% Makefile 0.7% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 4119, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "955137e9-16e8-4daa-ae8b-8cdb132470cb": {"__data__": {"id_": "955137e9-16e8-4daa-ae8b-8cdb132470cb", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c72df9a-3bad-4a9a-9244-c32e6a65fcd3", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "723b53896190a809edc4814cc48ec946a54af5f03c4fdc98529c2c2ad2924b6f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "427b74ab-82ea-4ed5-bfdf-559d745f5529", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_17_0.txt", "file_name": "github.com_17_0.txt", "file_type": "text/plain", "file_size": 4133, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fb4a7f29c81cad1110492de4a33133589ef4043fe54a92155f47ce928f146648", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8c9687b6-6529-48b6-b071-4f1de71128de", "node_type": "1", "metadata": {}, "hash": "9a77d812e32c7bcf766644f45d67b3d455550e11eb1e27fda859fad5cae11432", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - fastapi/fastapi: FastAPI framework, high performance, easy to learn, fast to code, ready for production Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert fastapi / fastapi Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 7.4k Star 85.1k FastAPI framework, high performance, easy to learn, fast to code, ready for production fastapi.tiangolo.com/ License MIT license 85.1k stars 7.4k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings fastapi/fastapi master Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 5,752 Commits .github .github docs docs docs_src docs_src fastapi fastapi scripts scripts tests tests .gitignore .gitignore .pre-commit-config.yaml .pre-commit-config.yaml CITATION.cff CITATION.cff CONTRIBUTING.md CONTRIBUTING.md LICENSE LICENSE README.md README.md SECURITY.md SECURITY.md pdm_build.py pdm_build.py pyproject.toml pyproject.toml requirements-docs-insiders.txt requirements-docs-insiders.txt requirements-docs-tests.txt requirements-docs-tests.txt requirements-docs.txt requirements-docs.txt requirements-github-actions.txt requirements-github-actions.txt requirements-tests.txt requirements-tests.txt requirements-translations.txt requirements-translations.txt requirements.txt requirements.txt View all files Repository files navigation FastAPI framework, high performance, easy to learn, fast to code, ready for production Documentation : https://fastapi.tiangolo.com Source Code : https://github.com/fastapi/fastapi FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints. The key features are: Fast : Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available . Fast to code : Increase the speed to develop features by about 200% to 300%. * Fewer bugs : Reduce about 40% of human (developer) induced errors. * Intuitive : Great editor support. Completion everywhere. Less time debugging. Easy : Designed to be easy to use and learn. Less time reading docs. Short : Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs. Robust : Get production-ready code. With automatic interactive documentation. Standards-based : Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema . * estimation based on tests on an internal development team, building production applications. Sponsors Other sponsors Opinions \" [...] I'm using FastAPI a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft . Some of them are getting integrated into the core Windows product and some Office products. \" Kabir Khan - Microsoft (ref) \" We adopted the FastAPI library to spawn a REST server that can be queried to obtain predictions . [for Ludwig] \" Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - Uber (ref) \" Netflix is pleased to announce the open-source release of our crisis management orchestration framework: Dispatch ! [built with FastAPI ] \" Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) \" I\u2019m over the moon excited about FastAPI . It\u2019s so fun! \" Brian Okken - Python Bytes podcast host (ref) \" Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted Hug to be - it's really inspiring to see someone build that. \" Timothy Crosley - Hug creator (ref) \" If you're looking to learn one modern framework for building REST APIs, check out FastAPI [...] It's fast, easy to use and easy to learn [...] \" \" We've switched over to FastAPI for our APIs [...] I think you'll like it [...] \" Ines Montani - Matthew Honnibal - Explosion AI founders - spaCy creators (ref) - (ref) \" If anyone is looking to build a production Python API, I would highly recommend FastAPI . It is beautifully designed , simple to use and highly scalable , it has become a key component in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer. \"", "start_char_idx": 0, "end_char_idx": 4462, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c9687b6-6529-48b6-b071-4f1de71128de": {"__data__": {"id_": "8c9687b6-6529-48b6-b071-4f1de71128de", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c72df9a-3bad-4a9a-9244-c32e6a65fcd3", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "723b53896190a809edc4814cc48ec946a54af5f03c4fdc98529c2c2ad2924b6f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "955137e9-16e8-4daa-ae8b-8cdb132470cb", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b227f9d2b7763f9d0431568430c2aa7fde23ad5637e39034076726596fe8d68d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e5f564c-a25b-4403-bf54-a3e0e1a69ffc", "node_type": "1", "metadata": {}, "hash": "050ab979d5b4b915c0d1b001a9a9690b2b47b0fb3655e240a999ee1f11f731bb", "class_name": "RelatedNodeInfo"}}, "text": "In many ways, it's what I wanted Hug to be - it's really inspiring to see someone build that. \" Timothy Crosley - Hug creator (ref) \" If you're looking to learn one modern framework for building REST APIs, check out FastAPI [...] It's fast, easy to use and easy to learn [...] \" \" We've switched over to FastAPI for our APIs [...] I think you'll like it [...] \" Ines Montani - Matthew Honnibal - Explosion AI founders - spaCy creators (ref) - (ref) \" If anyone is looking to build a production Python API, I would highly recommend FastAPI . It is beautifully designed , simple to use and highly scalable , it has become a key component in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer. \" Deon Pillsbury - Cisco (ref) Typer , the FastAPI of CLIs If you are building a CLI app to be used in the terminal instead of a web API, check out Typer . Typer is FastAPI's little sibling. And it's intended to be the FastAPI of CLIs . \u2328\ufe0f \ud83d\ude80 Requirements FastAPI stands on the shoulders of giants: Starlette for the web parts. Pydantic for the data parts. Installation Create and activate a virtual environment and then install FastAPI: $ pip install \" fastapi[standard] \" ---> 100% Note : Make sure you put \"fastapi[standard]\" in quotes to ensure it works in all terminals. Example Create it Create a file main.py with: from typing import Union from fastapi import FastAPI app = FastAPI () @ app . get ( \"/\" ) def read_root (): return { \"Hello\" :", "start_char_idx": 3708, "end_char_idx": 5208, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e5f564c-a25b-4403-bf54-a3e0e1a69ffc": {"__data__": {"id_": "1e5f564c-a25b-4403-bf54-a3e0e1a69ffc", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5032cf3-9aef-46b5-9a3a-568a46176101", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e24e5f8e68af2dcfe860a118a75a37cfc1e9698059bc796926e2d959e1ffdd0c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8c9687b6-6529-48b6-b071-4f1de71128de", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f539aba9c87d4220668b20d1177fe871f0960fdd8096709205f5ca461e05e134", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91f29a5f-f360-4c72-9e0b-38a859c38e5d", "node_type": "1", "metadata": {}, "hash": "eb6eca1d91023c7e290841fe50a58e7fc333622f9b725452e33dc45380590b33", "class_name": "RelatedNodeInfo"}}, "text": "\"World\" } @ app . get ( \"/items/{item_id}\" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Or use async def ... If your code uses async / await , use async def : from typing import Union from fastapi import FastAPI app = FastAPI () @ app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @ app . get ( \"/items/{item_id}\" ) async def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : If you don't know, check the \"In a hurry?\" section about async and await in the docs . Run it Run the server with: $ fastapi dev main.py \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 FastAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 Serving at: http://127.0.0.1:8000 \u2502 \u2502 \u2502 \u2502 API docs: http://127.0.0.1:8000/docs \u2502 \u2502 \u2502 \u2502 Running in development mode, for production use: \u2502 \u2502 \u2502 \u2502 fastapi run \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f INFO: Will watch for changes in these directories: ['/home/user/code/awesomeapp'] INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [2248755] using WatchFiles INFO: Started server process [2248757] INFO: Waiting for application startup. INFO: Application startup complete. About the command fastapi dev main.py ... The command fastapi dev reads your main.py file, detects the FastAPI app in it, and starts a server using Uvicorn . By default, fastapi dev will start with auto-reload enabled for local development. You can read more about it in the FastAPI CLI docs . Check it Open your browser at http://127.0.0.1:8000/items/5?q=somequery . You will see the JSON response as: { \"item_id\" : 5 , \"q\" : \" somequery \" } You already created an API that: Receives HTTP requests in the paths / and /items/{item_id} . Both paths take GET operations (also known as HTTP methods ). The path /items/{item_id} has a path parameter item_id that should be an int . The path /items/{item_id} has an optional str query parameter q . Interactive API docs Now go to http://127.0.0.1:8000/docs . You will see the automatic interactive API documentation (provided by Swagger UI ): Alternative API docs And now, go to http://127.0.0.1:8000/redoc . You will see the alternative automatic documentation (provided by ReDoc ): Example upgrade Now modify the file main.py to receive a body from a PUT request. Declare the body using standard Python types, thanks to Pydantic. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Union [ bool , None ] = None @ app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @ app . get ( \"/items/{item_id}\" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } @ app . put ( \"/items/{item_id}\" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } The fastapi dev server should reload automatically. Interactive API docs upgrade Now go to http://127.0.0.1:8000/docs . The interactive API documentation will be automatically updated, including the new body: Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API: Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen: Alternative API docs upgrade And now, go to http://127.0.0.1:8000/redoc . The alternative documentation will also reflect the new query parameter and body: Recap In summary, you declare once the types of parameters, body, etc. as function parameters. You do that with standard modern Python types.", "start_char_idx": 0, "end_char_idx": 3752, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91f29a5f-f360-4c72-9e0b-38a859c38e5d": {"__data__": {"id_": "91f29a5f-f360-4c72-9e0b-38a859c38e5d", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5032cf3-9aef-46b5-9a3a-568a46176101", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e24e5f8e68af2dcfe860a118a75a37cfc1e9698059bc796926e2d959e1ffdd0c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e5f564c-a25b-4403-bf54-a3e0e1a69ffc", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "76466886cb20fdc438beb0cc3c6f971aef5ac987cbfbc739b01f0931ceded850", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "42153e38-c10a-43d7-8886-060568fa2c89", "node_type": "1", "metadata": {}, "hash": "9acefcbdb57f614e7d20b6b2431c2fa490e93c10a2d946adbb5a03a3d4268cd1", "class_name": "RelatedNodeInfo"}}, "text": "name , \"item_id\" : item_id } The fastapi dev server should reload automatically. Interactive API docs upgrade Now go to http://127.0.0.1:8000/docs . The interactive API documentation will be automatically updated, including the new body: Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API: Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen: Alternative API docs upgrade And now, go to http://127.0.0.1:8000/redoc . The alternative documentation will also reflect the new query parameter and body: Recap In summary, you declare once the types of parameters, body, etc. as function parameters. You do that with standard modern Python types. You don't have to learn a new syntax, the methods or classes of a specific library, etc. Just standard Python . For example, for an int : item_id : int or for a more complex Item model: item : Item ...and with that single declaration you get: Editor support, including: Completion. Type checks. Validation of data: Automatic and clear errors when the data is invalid. Validation even for deeply nested JSON objects. Conversion of input data: coming from the network to Python data and types. Reading from: JSON. Path parameters. Query parameters. Cookies. Headers. Forms. Files. Conversion of output data: converting from Python data and types to network data (as JSON): Convert Python types ( str , int , float , bool , list , etc). datetime objects. UUID objects. Database models. ...and many more. Automatic interactive API", "start_char_idx": 2957, "end_char_idx": 4579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42153e38-c10a-43d7-8886-060568fa2c89": {"__data__": {"id_": "42153e38-c10a-43d7-8886-060568fa2c89", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5356e71e-b498-48bd-badf-140ed0db1276", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9ad3b53d5c3cb20c37c010e107367e3b0bc75e0831c0c296dfedc8a7a264e8cd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91f29a5f-f360-4c72-9e0b-38a859c38e5d", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "725396a52714bfe113e6b6f74d51962f550d992a858b2f0e3dd7953c2fe996a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b153444e-fad6-4ff4-85d3-3c11de5166fb", "node_type": "1", "metadata": {}, "hash": "7e37c1ab5e2cef0ba4ce768eb6c00ec50b521ced5363a49e4b1d7f5c7812ab94", "class_name": "RelatedNodeInfo"}}, "text": "documentation, including 2 alternative user interfaces: Swagger UI. ReDoc. Coming back to the previous code example, FastAPI will: Validate that there is an item_id in the path for GET and PUT requests. Validate that the item_id is of type int for GET and PUT requests. If it is not, the client will see a useful, clear error. Check if there is an optional query parameter named q (as in http://127.0.0.1:8000/items/foo?q=somequery ) for GET requests. As the q parameter is declared with = None , it is optional. Without the None it would be required (as is the body in the case with PUT ). For PUT requests to /items/{item_id} , read the body as JSON: Check that it has a required attribute name that should be a str . Check that it has a required attribute price that has to be a float . Check that it has an optional attribute is_offer , that should be a bool , if present. All this would also work for deeply nested JSON objects. Convert from and to JSON automatically. Document everything with OpenAPI, that can be used by: Interactive documentation systems. Automatic client code generation systems, for many languages. Provide 2 interactive documentation web interfaces directly. We just scratched the surface, but you already get the idea of how it all works. Try changing the line with: return { \"item_name\" : item . name , \"item_id\" : item_id } ...from: ... \"item_name\" : item . name ... ...to: ... \"item_price\" : item . price ... ...and see how your editor will auto-complete the attributes and know their types: For a more complete example including more features, see the Tutorial - User Guide . Spoiler alert : the tutorial - user guide includes: Declaration of parameters from other different places as: headers , cookies , form fields and files . How to set validation constraints as maximum_length or regex . A very powerful and easy to use Dependency Injection system. Security and authentication, including support for OAuth2 with JWT tokens and HTTP Basic auth. More advanced (but equally easy) techniques for declaring deeply nested JSON models (thanks to Pydantic). GraphQL integration with Strawberry and other libraries. Many extra features (thanks to Starlette) as: WebSockets extremely easy tests based on HTTPX and pytest CORS Cookie Sessions ...and more. Performance Independent TechEmpower benchmarks show FastAPI applications running under Uvicorn as one of the fastest Python frameworks available , only below Starlette and Uvicorn themselves (used internally by FastAPI). (*) To understand more about it, see the section Benchmarks . Dependencies FastAPI depends on Pydantic and Starlette. standard Dependencies When you install FastAPI with pip install \"fastapi[standard]\" it comes with the standard group of optional dependencies: Used by Pydantic: email-validator - for email validation. Used by Starlette: httpx - Required if you want to use the TestClient . jinja2 - Required if you want to use the default template configuration. python-multipart - Required if you want to support form \"parsing\", with request.form() . Used by FastAPI / Starlette: uvicorn - for the server that loads and serves your application. This includes uvicorn[standard] , which includes some dependencies (e.g. uvloop ) needed for high performance serving. fastapi-cli - to provide the fastapi command. Without standard Dependencies If you don't want to include the standard optional dependencies, you can install with pip install fastapi instead of pip install \"fastapi[standard]\" . Additional Optional Dependencies There are some additional dependencies you might want to install. Additional optional Pydantic dependencies: pydantic-settings - for settings management. pydantic-extra-types - for extra types to be used with Pydantic. Additional optional FastAPI dependencies: orjson - Required if you want to use ORJSONResponse . ujson - Required if you want to use UJSONResponse . License This project is licensed under the terms of the MIT license. About FastAPI framework, high performance, easy to learn, fast to code, ready for production fastapi.tiangolo.com/ Topics python api json framework web rest json-schema async swagger openapi python3 asyncio swagger-ui redoc openapi3 python-types uvicorn starlette pydantic fastapi Resources Readme License MIT license Security policy Security policy Uh oh! There was an error while loading. Please reload this page .", "start_char_idx": 0, "end_char_idx": 4382, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b153444e-fad6-4ff4-85d3-3c11de5166fb": {"__data__": {"id_": "b153444e-fad6-4ff4-85d3-3c11de5166fb", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5356e71e-b498-48bd-badf-140ed0db1276", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9ad3b53d5c3cb20c37c010e107367e3b0bc75e0831c0c296dfedc8a7a264e8cd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42153e38-c10a-43d7-8886-060568fa2c89", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2d8a50ad6291846d222a8a9fa8cd50fbda34b09912358a2a10af50ed3bb01788", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fb6bac18-c9d9-408e-a2cc-5dcb6c874f6a", "node_type": "1", "metadata": {}, "hash": "cf95c689f047e56c1e294f887adf76526f575525e5a6f7ac345009dcb7acb75c", "class_name": "RelatedNodeInfo"}}, "text": "Additional Optional Dependencies There are some additional dependencies you might want to install. Additional optional Pydantic dependencies: pydantic-settings - for settings management. pydantic-extra-types - for extra types to be used with Pydantic. Additional optional FastAPI dependencies: orjson - Required if you want to use ORJSONResponse . ujson - Required if you want to use UJSONResponse . License This project is licensed under the terms of the MIT license. About FastAPI framework, high performance, easy to learn, fast to code, ready for production fastapi.tiangolo.com/ Topics python api json framework web rest json-schema async swagger openapi python3 asyncio swagger-ui redoc openapi3 python-types uvicorn starlette pydantic fastapi Resources Readme License MIT license Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 85.1k stars Watchers 717 watching Forks 7.4k forks Report repository Releases 204 0.115.12 Latest Mar 23, 2025 + 203 releases Sponsor this project Sponsor Uh oh! There was an error while loading. Please reload this page . Learn more about GitHub Sponsors Packages 0 No packages published Used by 763k + 763,463 Contributors 820 Uh oh! There was an error while loading. Please reload this page . + 806 contributors Languages Python 100.0% You can\u2019t perform that action at this time.", "start_char_idx": 3497, "end_char_idx": 4897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb6bac18-c9d9-408e-a2cc-5dcb6c874f6a": {"__data__": {"id_": "fb6bac18-c9d9-408e-a2cc-5dcb6c874f6a", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_30_0.txt", "file_name": "github.com_30_0.txt", "file_type": "text/plain", "file_size": 4387, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3343c873-f472-4679-b09d-e07803d5331a", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_30_0.txt", "file_name": "github.com_30_0.txt", "file_type": "text/plain", "file_size": 4387, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d1637bb326371d150d34e900fb26639b96240da3773d275f1c7c0be6d7e8293d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b153444e-fad6-4ff4-85d3-3c11de5166fb", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "247862b6892d87af504e05ae1c884fa7601653a2f85c00b85b0aa877c67b8334", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c598f390-0ab1-44e8-b0d1-1e2262aa0a7b", "node_type": "1", "metadata": {}, "hash": "f145fc6e17a7d19f2dbfd08827f3d77615af53f3deffa2c64e3b58aee0847030", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - django/django: The Web framework for perfectionists with deadlines. Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert django / django Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 32.6k Star 83.7k The Web framework for perfectionists with deadlines. www.djangoproject.com/ License BSD-3-Clause, Unknown licenses found Licenses found BSD-3-Clause LICENSE Unknown LICENSE.python 83.7k stars 32.6k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings django/django main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 33,586 Commits .github .github .tx .tx django django docs docs extras extras js_tests js_tests scripts scripts tests tests .editorconfig .editorconfig .flake8 .flake8 .git-blame-ignore-revs .git-blame-ignore-revs .gitattributes .gitattributes .gitignore .gitignore .pre-commit-config.yaml .pre-commit-config.yaml .readthedocs.yml .readthedocs.yml AUTHORS AUTHORS CONTRIBUTING.rst CONTRIBUTING.rst Gruntfile.js Gruntfile.js INSTALL INSTALL LICENSE LICENSE LICENSE.python LICENSE.python MANIFEST.in MANIFEST.in README.rst README.rst eslint.config.mjs eslint.config.mjs package.json package.json pyproject.toml pyproject.toml tox.ini tox.ini View all files Repository files navigation Django Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Thanks for checking it out. All documentation is in the \" docs \" directory and online at https://docs.djangoproject.com/en/stable/ . If you're just getting started, here's how we recommend you read the docs: First, read docs/intro/install.txt for instructions on installing Django. Next, work through the tutorials in order ( docs/intro/tutorial01.txt , docs/intro/tutorial02.txt , etc.). If you want to set up an actual deployment server, read docs/howto/deployment/index.txt for instructions. You'll probably want to read through the topical guides (in docs/topics ) next; from there you can jump to the HOWTOs (in docs/howto ) for specific problems, and check out the reference ( docs/ref ) for gory details. See docs/README for instructions on building an HTML version of the docs. Docs are updated rigorously. If you find any problems in the docs, or think they should be clarified in any way, please take 30 seconds to fill out a ticket here: https://code.djangoproject.com/newticket To get more help: Join the Django Discord community . Join the community on the Django Forum . To contribute to Django: Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for information about getting involved. To run Django's test suite: Follow the instructions in the \"Unit tests\" section of docs/internals/contributing/writing-code/unit-tests.txt , published online at https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests Supporting the Development of Django Django's development depends on your contributions. If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/ About The Web framework for perfectionists with deadlines. www.djangoproject.com/ Topics python django views framework orm web apps templates models Resources Readme License BSD-3-Clause, Unknown licenses found Licenses found BSD-3-Clause LICENSE Unknown LICENSE.python Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 83.7k stars Watchers 2.3k watching Forks 32.6k forks Report repository Releases 444 tags Sponsor this project Uh oh! There was an error while loading. Please reload this page . https://www.djangoproject.com/fundraising/ Learn more about GitHub Sponsors Packages 0 No packages published Used by 2m + 1,975,715 Contributors 2,653 Uh oh! There was an error while loading. Please reload this page . + 2,639 contributors Languages Python 97.2% Jinja 1.4% Other 1.4% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 4385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c598f390-0ab1-44e8-b0d1-1e2262aa0a7b": {"__data__": {"id_": "c598f390-0ab1-44e8-b0d1-1e2262aa0a7b", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_33_0.txt", "file_name": "github.com_33_0.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5612d3c8-00a5-4198-bc07-3b7e59cb8992", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_33_0.txt", "file_name": "github.com_33_0.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2d2f60dda99c4f8dee669c75b83e4ac65defbda884f2963e66085d0d6eabc3d6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb6bac18-c9d9-408e-a2cc-5dcb6c874f6a", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_30_0.txt", "file_name": "github.com_30_0.txt", "file_type": "text/plain", "file_size": 4387, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d1637bb326371d150d34e900fb26639b96240da3773d275f1c7c0be6d7e8293d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67d70904-6234-4235-8ba8-07c55872e630", "node_type": "1", "metadata": {}, "hash": "df12c475e1dd9fe3f1ae124fb73a840cb15f7cae1661d95b0ebeee2c54cb437b", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - pallets/flask: The Python micro framework for building web applications. Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert pallets / flask Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 16.4k Star 69.6k The Python micro framework for building web applications. flask.palletsprojects.com License BSD-3-Clause license 69.6k stars 16.4k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings pallets/flask main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 5,424 Commits .devcontainer .devcontainer .github .github docs docs examples examples src/ flask src/ flask tests tests .editorconfig .editorconfig .gitignore .gitignore .pre-commit-config.yaml .pre-commit-config.yaml .readthedocs.yaml .readthedocs.yaml CHANGES.rst CHANGES.rst LICENSE.txt LICENSE.txt README.md README.md pyproject.toml pyproject.toml uv.lock uv.lock View all files Repository files navigation Flask Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around Werkzeug and Jinja , and has become one of the most popular Python web application frameworks. Flask offers suggestions, but doesn't enforce any dependencies or project layout. It is up to the developer to choose the tools and libraries they want to use. There are many extensions provided by the community that make adding new functionality easy. A Simple Example # save this as app.py from flask import Flask app = Flask ( __name__ ) @ app . route ( \"/\" ) def hello (): return \"Hello, World!\" $ flask run * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Donate The Pallets organization develops and supports Flask and the libraries it uses. In order to grow the community of contributors and users, and allow the maintainers to devote more time to the projects, please donate today . Contributing See our detailed contributing documentation for many ways to contribute, including reporting issues, requesting features, asking or answering questions, and making PRs. About The Python micro framework for building web applications. flask.palletsprojects.com Topics python flask web-framework wsgi jinja werkzeug pallets Resources Readme License BSD-3-Clause license Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 69.6k stars Watchers 2.1k watching Forks 16.4k forks Report repository Releases 36 3.1.1 Latest May 13, 2025 + 35 releases Sponsor this project Uh oh! There was an error while loading. Please reload this page . https://palletsprojects.com/donate tidelift.com/funding/github/ pypi/Flask thanks.dev/ u/gh/pallets Learn more about GitHub Sponsors Used by 2.6m + 2,629,950 Contributors 728 + 714 contributors Languages Python 99.9% Other 0.1% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 3327, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67d70904-6234-4235-8ba8-07c55872e630": {"__data__": {"id_": "67d70904-6234-4235-8ba8-07c55872e630", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "861270ac-e102-4a7b-a475-20dbe68b66ae", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "32abdba86d3d89b8aab85f5824c1d77bc5405daf9726fbb46a408c25ded6181a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c598f390-0ab1-44e8-b0d1-1e2262aa0a7b", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_33_0.txt", "file_name": "github.com_33_0.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2d2f60dda99c4f8dee669c75b83e4ac65defbda884f2963e66085d0d6eabc3d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb7c34bb-2421-464e-84db-0e648a9db5b3", "node_type": "1", "metadata": {}, "hash": "b5e8923bb1c2b1767ca4941ea480bfad149435a43d9043341cfdd2824b619711", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - scikit-learn/scikit-learn: scikit-learn: machine learning in Python Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert scikit-learn / scikit-learn Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 25.9k Star 62.1k scikit-learn: machine learning in Python scikit-learn.org License BSD-3-Clause license 62.1k stars 25.9k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings scikit-learn/scikit-learn main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 32,487 Commits .binder .binder .circleci .circleci .github .github .spin .spin asv_benchmarks asv_benchmarks benchmarks benchmarks build_tools build_tools doc doc examples examples maint_tools maint_tools sklearn sklearn .codecov.yml .codecov.yml .coveragerc .coveragerc .git-blame-ignore-revs .git-blame-ignore-revs .gitattributes .gitattributes .gitignore .gitignore .mailmap .mailmap .pre-commit-config.yaml .pre-commit-config.yaml CITATION.cff CITATION.cff CODE_OF_CONDUCT.md CODE_OF_CONDUCT.md CONTRIBUTING.md CONTRIBUTING.md COPYING COPYING Makefile Makefile README.rst README.rst SECURITY.md SECURITY.md azure-pipelines.yml azure-pipelines.yml meson.build meson.build pyproject.toml pyproject.toml View all files Repository files navigation scikit-learn is a Python module for machine learning built on top of SciPy and is distributed under the 3-Clause BSD license. The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed. See the About us page for a list of core contributors. It is currently maintained by a team of volunteers. Website: https://scikit-learn.org Installation Dependencies scikit-learn requires: Python (>= 3.10) NumPy (>= 1.22.0) SciPy (>= 1.8.0) joblib (>= 1.2.0) threadpoolctl (>= 3.1.0) Scikit-learn plotting capabilities (i.e., functions start with plot_ and classes end with Display ) require Matplotlib (>= 3.5.0). For running the examples Matplotlib >= 3.5.0 is required. A few examples require scikit-image >= 0.19.0, a few examples require pandas >= 1.4.0, some examples require seaborn >= 0.9.0 and plotly >= 5.14.0. User installation If you already have a working installation of NumPy and SciPy, the easiest way to install scikit-learn is using pip : pip install -U scikit-learn or conda : conda install -c conda-forge scikit-learn The documentation includes more detailed installation instructions . Changelog See the changelog for a history of notable changes to scikit-learn. Development We welcome new contributors of all experience levels. The scikit-learn community goals are to be helpful, welcoming, and effective. The Development Guide has detailed information about contributing code, documentation, tests, and more. We've included some basic information in this README. Important links Official source code repo: https://github.com/scikit-learn/scikit-learn Download releases: https://pypi.org/project/scikit-learn/ Issue tracker: https://github.com/scikit-learn/scikit-learn/issues Source code You can check the latest sources with the command: git clone https://github.com/scikit-learn/scikit-learn.git Contributing To learn more about making a contribution to scikit-learn, please see our Contributing guide . Testing After installation, you can launch the test suite from outside the source directory (you will need to have pytest >= 7.1.2 installed): pytest sklearn See the web page https://scikit-learn.org/dev/developers/contributing.html#testing-and-improving-test-coverage for more information. Random number generation can be controlled during testing by setting the SKLEARN_SEED environment variable.", "start_char_idx": 0, "end_char_idx": 4021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb7c34bb-2421-464e-84db-0e648a9db5b3": {"__data__": {"id_": "cb7c34bb-2421-464e-84db-0e648a9db5b3", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "861270ac-e102-4a7b-a475-20dbe68b66ae", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "32abdba86d3d89b8aab85f5824c1d77bc5405daf9726fbb46a408c25ded6181a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67d70904-6234-4235-8ba8-07c55872e630", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7b2d1b9395b83dea42c5c3ae0a1923aac897026195d1c9ba8c056738aed69855", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ca456b1-cc3d-4ee8-bb27-8c59c496919f", "node_type": "1", "metadata": {}, "hash": "4aa710d6060a459f13d53b1585bf1573d74152cf8b12094bb85fa4e0592757db", "class_name": "RelatedNodeInfo"}}, "text": "We've included some basic information in this README. Important links Official source code repo: https://github.com/scikit-learn/scikit-learn Download releases: https://pypi.org/project/scikit-learn/ Issue tracker: https://github.com/scikit-learn/scikit-learn/issues Source code You can check the latest sources with the command: git clone https://github.com/scikit-learn/scikit-learn.git Contributing To learn more about making a contribution to scikit-learn, please see our Contributing guide . Testing After installation, you can launch the test suite from outside the source directory (you will need to have pytest >= 7.1.2 installed): pytest sklearn See the web page https://scikit-learn.org/dev/developers/contributing.html#testing-and-improving-test-coverage for more information. Random number generation can be controlled during testing by setting the SKLEARN_SEED environment variable. Submitting a Pull Request Before opening a Pull Request, have a look at the full Contributing page to make sure your code complies with our guidelines: https://scikit-learn.org/stable/developers/index.html Project History The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed. See the About us page for a list of core contributors. The project is currently maintained by a team of volunteers. Note : scikit-learn was previously referred to as scikits.learn. Help and Support Documentation HTML documentation (stable release): https://scikit-learn.org HTML documentation (development version): https://scikit-learn.org/dev/ FAQ: https://scikit-learn.org/stable/faq.html Communication Main Channels Website : https://scikit-learn.org Blog : https://blog.scikit-learn.org Mailing list : https://mail.python.org/mailman/listinfo/scikit-learn Developer & Support GitHub Discussions : https://github.com/scikit-learn/scikit-learn/discussions Stack Overflow : https://stackoverflow.com/questions/tagged/scikit-learn Discord : https://discord.gg/h9qyrK8Jc8 Social Media Platforms LinkedIn : https://www.linkedin.com/company/scikit-learn YouTube : https://www.youtube.com/channel/UCJosFjYm0ZYVUARxuOZqnnw/playlists Facebook : https://www.facebook.com/scikitlearnofficial/ Instagram : https://www.instagram.com/scikitlearnofficial/ TikTok : https://www.tiktok.com/@scikit.learn Bluesky : https://bsky.app/profile/scikit-learn.org Mastodon : https://mastodon.social/@sklearn@fosstodon.org Resources Calendar : https://blog.scikit-learn.org/calendar/ Logos & Branding : https://github.com/scikit-learn/scikit-learn/tree/main/doc/logos Citation If you use scikit-learn in a scientific publication, we would appreciate citations: https://scikit-learn.org/stable/about.html#citing-scikit-learn About scikit-learn: machine learning in Python scikit-learn.org Topics python data-science machine-learning statistics data-analysis Resources Readme License BSD-3-Clause license Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 62.1k stars Watchers 2.1k watching Forks 25.9k forks Report repository Releases 45 Scikit-learn 1.6.1 Latest Jan 10, 2025 + 44 releases Sponsor this project Uh oh! There was an error while loading. Please reload this page . https://numfocus.org/donate-to-scikit-learn Packages 0 No packages published Used by 1.2m + 1,247,570 Contributors 3,036 + 3,022 contributors Languages Python 92.5% Cython 5.4% C++ 1.1% Shell 0.4% C 0.3% Meson", "start_char_idx": 3126, "end_char_idx": 6659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ca456b1-cc3d-4ee8-bb27-8c59c496919f": {"__data__": {"id_": "2ca456b1-cc3d-4ee8-bb27-8c59c496919f", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_35_1.txt", "file_name": "github.com_35_1.txt", "file_type": "text/plain", "file_size": 61, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd37c02a-85dc-4552-9a7b-3cf0c74c1de6", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_35_1.txt", "file_name": "github.com_35_1.txt", "file_type": "text/plain", "file_size": 61, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a9c4d1743c6f295f0bca9524209fd2d71e97af0adb5c6026516064ea900895d0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb7c34bb-2421-464e-84db-0e648a9db5b3", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b3e22a8c56697c8cf23fb7fc642af6813852e140251759994ec875dbbf429f18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f35885f3-3d1f-4ca9-807f-4093f3e6a9d1", "node_type": "1", "metadata": {}, "hash": "08bf543952c4495e543505e3fd3ff78e8ec0484f2c537739ed7e4bf51a8c36f5", "class_name": "RelatedNodeInfo"}}, "text": "0.2% Other 0.1% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 59, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f35885f3-3d1f-4ca9-807f-4093f3e6a9d1": {"__data__": {"id_": "f35885f3-3d1f-4ca9-807f-4093f3e6a9d1", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "44687a84-1741-4935-8752-a74128cdc174", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "25b945dd5f44668f66e071910eb88a8653affd7c7fa88077d978f25b1e444041", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ca456b1-cc3d-4ee8-bb27-8c59c496919f", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_35_1.txt", "file_name": "github.com_35_1.txt", "file_type": "text/plain", "file_size": 61, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a9c4d1743c6f295f0bca9524209fd2d71e97af0adb5c6026516064ea900895d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2162ef32-b963-47b0-b336-96ea503bec72", "node_type": "1", "metadata": {}, "hash": "7cb0efd99e91a0cd44b0ca4a1494926848f276fa4427de31a06be0742001a9b6", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - pandas-dev/pandas: Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert pandas-dev / pandas Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 18.5k Star 45.5k Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more pandas.pydata.org License BSD-3-Clause license 45.5k stars 18.5k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings pandas-dev/pandas main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 36,151 Commits .github .github LICENSES LICENSES asv_bench asv_bench ci ci doc doc gitpod gitpod pandas pandas scripts scripts tooling/ debug tooling/ debug typings typings web web .devcontainer.json .devcontainer.json .gitattributes .gitattributes .gitignore .gitignore .gitpod.yml .gitpod.yml .pre-commit-config.yaml .pre-commit-config.yaml AUTHORS.md AUTHORS.md CITATION.cff CITATION.cff Dockerfile Dockerfile LICENSE LICENSE MANIFEST.in MANIFEST.in README.md README.md codecov.yml codecov.yml environment.yml environment.yml generate_pxi.py generate_pxi.py generate_version.py generate_version.py meson.build meson.build pyproject.toml pyproject.toml pyright_reportGeneralTypeIssues.json pyright_reportGeneralTypeIssues.json requirements-dev.txt requirements-dev.txt setup.py setup.py View all files Repository files navigation pandas: powerful Python data analysis toolkit Testing Package Meta What is it? pandas is a Python package that provides fast, flexible, and expressive data structures designed to make working with \"relational\" or \"labeled\" data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis / manipulation tool available in any language . It is already well on its way towards this goal. Table of Contents Main Features Where to get it Dependencies Installation from sources License Documentation Background Getting Help Discussion and Development Contributing to pandas Main Features Here are just a few of the things that pandas does well: Easy handling of missing data (represented as NaN , NA , or NaT ) in floating point as well as non-floating point data Size mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects Automatic and explicit data alignment : objects can be explicitly aligned to a set of labels, or the user can simply ignore the labels and let Series , DataFrame , etc. automatically align the data for you in computations Powerful, flexible group by functionality to perform split-apply-combine operations on data sets, for both aggregating and transforming data Make it easy to convert ragged, differently-indexed data in other Python and NumPy data structures into DataFrame objects Intelligent label-based slicing , fancy indexing , and subsetting of large data sets Intuitive merging and joining data sets Flexible reshaping and pivoting of data sets Hierarchical labeling of axes (possible to have multiple labels per tick) Robust IO tools for loading data from flat files (CSV and delimited), Excel files , databases , and saving/loading data from the ultrafast HDF5 format Time series -specific functionality: date range generation and frequency conversion, moving window statistics, date shifting and lagging Where to get it The source code is currently hosted on GitHub at: https://github.com/pandas-dev/pandas Binary installers for the latest released version are available at the Python Package Index (PyPI) and on Conda . # conda conda install -c conda-forge pandas # or PyPI pip install pandas The list of changes to pandas between each release can be found here . For full details, see the commit logs at https://github.com/pandas-dev/pandas . Dependencies NumPy - Adds support for large, multi-dimensional arrays, matrices and high-level mathematical functions to operate on these arrays python-dateutil - Provides powerful extensions to the standard datetime module pytz - Brings the Olson tz database into Python which allows accurate and cross platform timezone calculations See the full installation instructions for minimum supported versions of required, recommended and optional dependencies. Installation from sources To install pandas from source you need Cython in addition to the normal dependencies above.", "start_char_idx": 0, "end_char_idx": 5032, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2162ef32-b963-47b0-b336-96ea503bec72": {"__data__": {"id_": "2162ef32-b963-47b0-b336-96ea503bec72", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "44687a84-1741-4935-8752-a74128cdc174", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "25b945dd5f44668f66e071910eb88a8653affd7c7fa88077d978f25b1e444041", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f35885f3-3d1f-4ca9-807f-4093f3e6a9d1", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "18b8356c1d2c4d3459c9442117c990a28f11f42577753162911727db29458a17", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "332f00bc-1d73-4b91-9eee-561cb9bac095", "node_type": "1", "metadata": {}, "hash": "d5d032f0bcdc0511bdc3dd488cce97515a74ef4660cdffce820d5eefc395ec56", "class_name": "RelatedNodeInfo"}}, "text": "# conda conda install -c conda-forge pandas # or PyPI pip install pandas The list of changes to pandas between each release can be found here . For full details, see the commit logs at https://github.com/pandas-dev/pandas . Dependencies NumPy - Adds support for large, multi-dimensional arrays, matrices and high-level mathematical functions to operate on these arrays python-dateutil - Provides powerful extensions to the standard datetime module pytz - Brings the Olson tz database into Python which allows accurate and cross platform timezone calculations See the full installation instructions for minimum supported versions of required, recommended and optional dependencies. Installation from sources To install pandas from source you need Cython in addition to the normal dependencies above. Cython can be installed from PyPI: pip install cython In the pandas directory (same one where you found this file after cloning the git repo), execute: pip install . or for installing in development mode : python -m pip install -ve . --no-build-isolation -Ceditable-verbose=true See the full instructions for installing from source . License BSD 3 Documentation The official documentation is hosted on PyData.org . Background Work on pandas started at AQR (a quantitative hedge fund) in 2008 and has been under active development since then. Getting Help For", "start_char_idx": 4234, "end_char_idx": 5591, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "332f00bc-1d73-4b91-9eee-561cb9bac095": {"__data__": {"id_": "332f00bc-1d73-4b91-9eee-561cb9bac095", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_36_1.txt", "file_name": "github.com_36_1.txt", "file_type": "text/plain", "file_size": 2955, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6060671e-a630-49e8-a82c-fa6ff5913ca8", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_36_1.txt", "file_name": "github.com_36_1.txt", "file_type": "text/plain", "file_size": 2955, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d582d440036e5a02691df3957bb89f41e0c672418269df3f0c3280e3af8571bc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2162ef32-b963-47b0-b336-96ea503bec72", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6cca74e086d3f9376a166845e01e462ede0747d1697db8ddcd0d17930c04199b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11631a3c-ae1e-44fb-bfb7-8728ed5f0451", "node_type": "1", "metadata": {}, "hash": "81de75cd570307918e316f28ffbfbda5f31741da9f86fac962172b2f74183ad3", "class_name": "RelatedNodeInfo"}}, "text": "usage questions, the best place to go to is StackOverflow . Further, general questions and discussions can also take place on the pydata mailing list . Discussion and Development Most development discussions take place on GitHub in this repo, via the GitHub issue tracker . Further, the pandas-dev mailing list can also be used for specialized discussions or design issues, and a Slack channel is available for quick development related questions. There are also frequent community meetings for project maintainers open to the community as well as monthly new contributor meetings to help support new contributors. Additional information on the communication channels can be found on the contributor community page. Contributing to pandas All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome. A detailed overview on how to contribute can be found in the contributing guide . If you are simply looking to start working with the pandas codebase, navigate to the GitHub \"issues\" tab and start looking through interesting issues. There are a number of issues listed under Docs and good first issue where you could start out. You can also triage issues which may include reproducing bug reports, or asking for vital information such as version numbers or reproduction instructions. If you would like to start triaging issues, one easy way to get started is to subscribe to pandas on CodeTriage . Or maybe through using pandas you have an idea of your own or are looking for something in the documentation and thinking \u2018this can be improved\u2019...you can do something about it! Feel free to ask questions on the mailing list or on Slack . As contributors and maintainers to this project, you are expected to abide by pandas' code of conduct. More information can be found at: Contributor Code of Conduct Go to Top About Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more pandas.pydata.org Topics python data-science flexible pandas alignment data-analysis Resources Readme License BSD-3-Clause license Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 45.5k stars Watchers 1.1k watching Forks 18.5k forks Report repository Releases 109 Pandas 2.2.3 Latest Sep 20, 2024 + 108 releases Sponsor this project Uh oh! There was an error while loading. Please reload this page . https://pandas.pydata.org/donate.html tidelift.com/funding/github/ pypi/pandas Learn more about GitHub Sponsors Packages 0 No packages published Used by 2.6m + 2,600,044 Contributors 3,449 Uh oh! There was an error while loading. Please reload this page . + 3,435 contributors Languages Python 90.3% Cython 6.0% HTML 2.0% C 1.5% Shell 0.1% Meson 0.1% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 2949, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11631a3c-ae1e-44fb-bfb7-8728ed5f0451": {"__data__": {"id_": "11631a3c-ae1e-44fb-bfb7-8728ed5f0451", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb8df448-b98c-4f7b-a3ff-0a3486eefca9", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "035976c4fe720aa5c2f80ad25e08e3b43ea95ad12eb5aba145a956158d2398d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "332f00bc-1d73-4b91-9eee-561cb9bac095", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_36_1.txt", "file_name": "github.com_36_1.txt", "file_type": "text/plain", "file_size": 2955, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d582d440036e5a02691df3957bb89f41e0c672418269df3f0c3280e3af8571bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d90e68c-e993-4c9b-9616-d2ea68869670", "node_type": "1", "metadata": {}, "hash": "379653a7ed3c5f9b94c0410fcc7b2d827593ae4c1d67f4c97faed8e26894d89a", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - keras-team/keras: Deep Learning for humans Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert keras-team / keras Public Notifications You must be signed in to change notification settings Fork 19.6k Star 63k Deep Learning for humans keras.io/ License Apache-2.0 license 63k stars 19.6k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings keras-team/keras master Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 11,526 Commits .devcontainer .devcontainer .github .github .kokoro .kokoro benchmarks benchmarks examples examples guides guides integration_tests integration_tests keras keras shell shell .gitignore .gitignore .pre-commit-config.yaml .pre-commit-config.yaml CONTRIBUTING.md CONTRIBUTING.md LICENSE LICENSE README.md README.md SECURITY.md SECURITY.md api_gen.py api_gen.py codecov.yml codecov.yml conftest.py conftest.py pip_build.py pip_build.py pyproject.toml pyproject.toml requirements-common.txt requirements-common.txt requirements-jax-cuda.txt requirements-jax-cuda.txt requirements-tensorflow-cuda.txt requirements-tensorflow-cuda.txt requirements-torch-cuda.txt requirements-torch-cuda.txt requirements.txt requirements.txt View all files Repository files navigation Keras 3: Deep Learning for Humans Keras 3 is a multi-backend deep learning framework, with support for JAX, TensorFlow, PyTorch, and OpenVINO (for inference-only). Effortlessly build and train models for computer vision, natural language processing, audio processing, timeseries forecasting, recommender systems, etc. Accelerated model development : Ship deep learning solutions faster thanks to the high-level UX of Keras and the availability of easy-to-debug runtimes like PyTorch or JAX eager execution. State-of-the-art performance : By picking the backend that is the fastest for your model architecture (often JAX!), leverage speedups ranging from 20% to 350% compared to other frameworks. Benchmark here . Datacenter-scale training : Scale confidently from your laptop to large clusters of GPUs or TPUs. Join nearly three million developers, from burgeoning startups to global enterprises, in harnessing the power of Keras 3. Installation Install with pip Keras 3 is available on PyPI as keras . Note that Keras 2 remains available as the tf-keras package. Install keras : pip install keras --upgrade Install backend package(s). To use keras , you should also install the backend of choice: tensorflow , jax , or torch . Note that tensorflow is required for using certain Keras 3 features: certain preprocessing layers as well as tf.data pipelines. Local installation Minimal installation Keras 3 is compatible with Linux and MacOS systems. For Windows users, we recommend using WSL2 to run Keras. To install a local development version: Install dependencies: pip install -r requirements.txt Run installation command from the root directory. python pip_build.py --install Run API generation script when creating PRs that update keras_export public APIs: ./shell/api_gen.sh Adding GPU support The requirements.txt file will install a CPU-only version of TensorFlow, JAX, and PyTorch. For GPU support, we also provide a separate requirements-{backend}-cuda.txt for TensorFlow, JAX, and PyTorch. These install all CUDA dependencies via pip and expect a NVIDIA driver to be pre-installed. We recommend a clean python environment for each backend to avoid CUDA version mismatches. As an example, here is how to create a Jax GPU environment with conda : conda create -y -n keras-jax python=3.10 conda activate keras-jax pip install -r requirements-jax-cuda.txt python pip_build.py --install Configuring your backend You can export the environment variable KERAS_BACKEND or you can edit your local config file at ~/.keras/keras.json to configure your backend. Available backend options are: \"tensorflow\" , \"jax\" , \"torch\" , \"openvino\" . Example: export KERAS_BACKEND=\"jax\" In Colab, you can do: import os os . environ [ \"KERAS_BACKEND\" ] = \"jax\" import keras Note: The backend must be configured before importing keras , and the backend cannot be changed after the package has been imported. Note: The OpenVINO backend is an inference-only backend, meaning it is designed only for running model predictions using model.predict() method.", "start_char_idx": 0, "end_char_idx": 4556, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d90e68c-e993-4c9b-9616-d2ea68869670": {"__data__": {"id_": "7d90e68c-e993-4c9b-9616-d2ea68869670", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb8df448-b98c-4f7b-a3ff-0a3486eefca9", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "035976c4fe720aa5c2f80ad25e08e3b43ea95ad12eb5aba145a956158d2398d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11631a3c-ae1e-44fb-bfb7-8728ed5f0451", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "db88c616ca159c6d7e9c6678e53a8d077c0e6508599c6c9606a4d6e97e94d47d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9666c00-e257-43d9-9ef0-bef792a18789", "node_type": "1", "metadata": {}, "hash": "725c60e8e44be6b65a0487e7ac34633283c62a6c2993ce7731ff2c131be6ec07", "class_name": "RelatedNodeInfo"}}, "text": "Available backend options are: \"tensorflow\" , \"jax\" , \"torch\" , \"openvino\" . Example: export KERAS_BACKEND=\"jax\" In Colab, you can do: import os os . environ [ \"KERAS_BACKEND\" ] = \"jax\" import keras Note: The backend must be configured before importing keras , and the backend cannot be changed after the package has been imported. Note: The OpenVINO backend is an inference-only backend, meaning it is designed only for running model predictions using model.predict() method. Backwards compatibility Keras 3 is intended to work as a drop-in replacement for tf.keras (when using the TensorFlow backend). Just take your existing tf.keras code, make sure that your calls to model.save() are using the up-to-date .keras format, and you're done. If your tf.keras model does not include custom components, you can start running it on top of JAX or PyTorch immediately. If it does include custom components (e.g. custom layers or a custom train_step() ), it is usually possible to convert it to a backend-agnostic implementation in just a few minutes. In addition, Keras models can consume datasets in any format, regardless of the backend you're using: you can train your models with your existing tf.data.Dataset pipelines or PyTorch DataLoaders . Why use Keras 3? Run your high-level Keras workflows on top of any framework -- benefiting at will from the advantages of each framework, e.g. the scalability and performance of JAX or the production ecosystem options of TensorFlow. Write custom components (e.g. layers, models, metrics) that you can use in low-level workflows", "start_char_idx": 4080, "end_char_idx": 5651, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9666c00-e257-43d9-9ef0-bef792a18789": {"__data__": {"id_": "d9666c00-e257-43d9-9ef0-bef792a18789", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_44_1.txt", "file_name": "github.com_44_1.txt", "file_type": "text/plain", "file_size": 1254, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9d28837-e655-4431-8d88-bf9a1d90b748", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_44_1.txt", "file_name": "github.com_44_1.txt", "file_type": "text/plain", "file_size": 1254, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c0dc74020b4f359af2b08696930abae032c6bc7a086d533f03f6fcb5a1c2fc10", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d90e68c-e993-4c9b-9616-d2ea68869670", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "4e96f45bde6b8ce73002fda00a4307d7957bf23b9755cd4fe5521e6c48bc9b93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f2fa209-a46e-44b5-87fb-afc8da4d9e5a", "node_type": "1", "metadata": {}, "hash": "83a11c2ddc4be6c71d3904ebbc762c6c4670f2bc64251f7ba1020efa214ae246", "class_name": "RelatedNodeInfo"}}, "text": "in any framework. You can take a Keras model and train it in a training loop written from scratch in native TF, JAX, or PyTorch. You can take a Keras model and use it as part of a PyTorch-native Module or as part of a JAX-native model function. Make your ML code future-proof by avoiding framework lock-in. As a PyTorch user: get access to power and usability of Keras, at last! As a JAX user: get access to a fully-featured, battle-tested, well-documented modeling and training library. Read more in the Keras 3 release announcement . About Deep Learning for humans keras.io/ Topics python data-science machine-learning deep-learning tensorflow pytorch neural-networks jax Resources Readme License Apache-2.0 license Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 63k stars Watchers 1.9k watching Forks 19.6k forks Report repository Releases 77 Keras 3.10.0 Latest May 19, 2025 + 76 releases Packages 0 No packages published Uh oh! There was an error while loading. Please reload this page . Contributors 1,326 Uh oh! There was an error while loading. Please reload this page . + 1,312 contributors Languages Python 100.0% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 1252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f2fa209-a46e-44b5-87fb-afc8da4d9e5a": {"__data__": {"id_": "0f2fa209-a46e-44b5-87fb-afc8da4d9e5a", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2bd04e90-e47e-4570-a25f-e7abf668e187", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2d95916fa9209361756911a271e7781a7f509e4e36c72a421ae090a20f8ad036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9666c00-e257-43d9-9ef0-bef792a18789", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_44_1.txt", "file_name": "github.com_44_1.txt", "file_type": "text/plain", "file_size": 1254, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c0dc74020b4f359af2b08696930abae032c6bc7a086d533f03f6fcb5a1c2fc10", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07518aee-b1b5-4b99-aecc-51f4567b4dcb", "node_type": "1", "metadata": {}, "hash": "40be5963d8ded6643df295efd7ee00d434ea7a5747bdb352a11c01c079e5d7f1", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - pytorch/pytorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert pytorch / pytorch Public Notifications You must be signed in to change notification settings Fork 24.3k Star 90.3k Tensors and Dynamic neural networks in Python with strong GPU acceleration pytorch.org License View license 90.3k stars 24.3k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings pytorch/pytorch main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 88,166 Commits .ci .ci .circleci .circleci .ctags.d .ctags.d .devcontainer .devcontainer .github .github .vscode .vscode android android aten aten benchmarks benchmarks binaries binaries c10 c10 caffe2 caffe2 cmake cmake docs docs functorch functorch mypy_plugins mypy_plugins scripts scripts test test third_party third_party tools tools torch torch torchgen torchgen .bazelignore .bazelignore .bazelrc .bazelrc .bazelversion .bazelversion .clang-format .clang-format .clang-tidy .clang-tidy .cmakelintrc .cmakelintrc .coveragerc .coveragerc .dockerignore .dockerignore .editorconfig .editorconfig .flake8 .flake8 .gdbinit .gdbinit .git-blame-ignore-revs .git-blame-ignore-revs .gitattributes .gitattributes .gitignore .gitignore .gitmodules .gitmodules .lintrunner.toml .lintrunner.toml .lldbinit .lldbinit BUCK.oss BUCK.oss BUILD.bazel BUILD.bazel CITATION.cff CITATION.cff CMakeLists.txt CMakeLists.txt CODEOWNERS CODEOWNERS CODE_OF_CONDUCT.md CODE_OF_CONDUCT.md CONTRIBUTING.md CONTRIBUTING.md Dockerfile Dockerfile GLOSSARY.md GLOSSARY.md LICENSE LICENSE MANIFEST.in MANIFEST.in Makefile Makefile NOTICE NOTICE README.md README.md RELEASE.md RELEASE.md SECURITY.md SECURITY.md WORKSPACE WORKSPACE aten.bzl aten.bzl buckbuild.bzl buckbuild.bzl build.bzl build.bzl build_variables.bzl build_variables.bzl defs.bzl defs.bzl docker.Makefile docker.Makefile mypy-strict.ini mypy-strict.ini mypy.ini mypy.ini pt_ops.bzl pt_ops.bzl pt_template_srcs.bzl pt_template_srcs.bzl pyproject.toml pyproject.toml pytest.ini pytest.ini requirements.txt requirements.txt setup.py setup.py ubsan.supp ubsan.supp ufunc_defs.bzl ufunc_defs.bzl version.txt version.txt View all files Repository files navigation PyTorch is a Python package that provides two high-level features: Tensor computation (like NumPy) with strong GPU acceleration Deep neural networks built on a tape-based autograd system You can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed. Our trunk health (Continuous Integration signals) can be found at hud.pytorch.org . More About PyTorch A GPU-Ready Tensor Library Dynamic Neural Networks: Tape-Based Autograd Python First Imperative Experiences Fast and Lean Extensions Without Pain Installation Binaries NVIDIA Jetson Platforms From Source Prerequisites NVIDIA CUDA Support AMD ROCm Support Intel GPU Support Get the PyTorch Source Install Dependencies Install PyTorch Adjust Build Options (Optional) Docker Image Using pre-built images Building the image yourself Building the Documentation Building a PDF Previous Versions Getting Started Resources Communication Releases and Contributing The Team License More About PyTorch Learn the basics of PyTorch At a granular level, PyTorch is a library that consists of the following components: Component Description torch A Tensor library like NumPy, with strong GPU support torch.autograd A tape-based automatic differentiation library that supports all differentiable Tensor operations in torch torch.jit A compilation stack (TorchScript) to create serializable and optimizable models from PyTorch code torch.nn A neural networks library deeply integrated with autograd designed for maximum flexibility torch.multiprocessing Python multiprocessing, but with magical memory sharing of torch Tensors across processes. Useful for data loading and Hogwild training torch.utils DataLoader and other utility functions for convenience Usually, PyTorch is used either as: A replacement for NumPy to use the power of GPUs. A deep learning research platform that provides maximum flexibility and speed. Elaborating Further: A GPU-Ready Tensor Library If you use NumPy, then you have used Tensors (a.k.a. ndarray).", "start_char_idx": 0, "end_char_idx": 4548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07518aee-b1b5-4b99-aecc-51f4567b4dcb": {"__data__": {"id_": "07518aee-b1b5-4b99-aecc-51f4567b4dcb", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2bd04e90-e47e-4570-a25f-e7abf668e187", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2d95916fa9209361756911a271e7781a7f509e4e36c72a421ae090a20f8ad036", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f2fa209-a46e-44b5-87fb-afc8da4d9e5a", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "19dae373aadb3550e3cc449acdf861295eb27fec97aedc4b18cc2e97970b7909", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7dd10a8c-8b63-4cd2-8c3e-dc87bb9c9de9", "node_type": "1", "metadata": {}, "hash": "8e2a7631d6074f4dec946150d65b8a2de7d05faacf8b72aa5b8ee9d7b90af6a0", "class_name": "RelatedNodeInfo"}}, "text": "Useful for data loading and Hogwild training torch.utils DataLoader and other utility functions for convenience Usually, PyTorch is used either as: A replacement for NumPy to use the power of GPUs. A deep learning research platform that provides maximum flexibility and speed. Elaborating Further: A GPU-Ready Tensor Library If you use NumPy, then you have used Tensors (a.k.a. ndarray). PyTorch provides Tensors that can live either on the CPU or the GPU and accelerates the computation by a huge amount. We provide a wide variety of tensor routines to accelerate and fit your scientific computation needs such as slicing, indexing, mathematical operations, linear algebra, reductions. And they are fast! Dynamic Neural Networks: Tape-Based Autograd PyTorch has a unique way of building neural networks: using and replaying a tape recorder. Most frameworks such as TensorFlow, Theano, Caffe, and CNTK have a static view of the world. One has to build a neural network and reuse the same structure again and again. Changing the way the network behaves means that one has to start from scratch. With PyTorch, we use a technique called reverse-mode auto-differentiation, which allows you to change the way your network behaves arbitrarily with zero lag or overhead. Our inspiration comes from several research papers on this topic, as well as current and past work such as torch-autograd , autograd , Chainer , etc. While this technique is not unique to PyTorch, it's one of the fastest implementations of it to date. You get the best of speed and flexibility for your crazy research. Python First PyTorch is not a Python binding into a monolithic C++ framework. It is built to be deeply integrated into Python. You can use it naturally like you would use NumPy / SciPy / scikit-learn etc.", "start_char_idx": 4161, "end_char_idx": 5948, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dd10a8c-8b63-4cd2-8c3e-dc87bb9c9de9": {"__data__": {"id_": "7dd10a8c-8b63-4cd2-8c3e-dc87bb9c9de9", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94b99940-dba6-441d-99e6-c5113214a786", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6c7528e46d917edd6834355469cc75f60871b063c1145977a38ed08a4cc68c95", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07518aee-b1b5-4b99-aecc-51f4567b4dcb", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "972b0bfe9206605f1057ea9daca8d3a4538b68d1b8e0311fbb58731c54b18344", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a49cc39-450f-498f-921b-c240fa5fff2f", "node_type": "1", "metadata": {}, "hash": "eba16ceffd091d8e19d77511c842f6f1e8887695a31aabbf77155ea4b433fec4", "class_name": "RelatedNodeInfo"}}, "text": "You can write your new neural network layers in Python itself, using your favorite libraries and use packages such as Cython and Numba . Our goal is to not reinvent the wheel where appropriate. Imperative Experiences PyTorch is designed to be intuitive, linear in thought, and easy to use. When you execute a line of code, it gets executed. There isn't an asynchronous view of the world. When you drop into a debugger or receive error messages and stack traces, understanding them is straightforward. The stack trace points to exactly where your code was defined. We hope you never spend hours debugging your code because of bad stack traces or asynchronous and opaque execution engines. Fast and Lean PyTorch has minimal framework overhead. We integrate acceleration libraries such as Intel MKL and NVIDIA ( cuDNN , NCCL ) to maximize speed. At the core, its CPU and GPU Tensor and neural network backends are mature and have been tested for years. Hence, PyTorch is quite fast \u2014 whether you run small or large neural networks. The memory usage in PyTorch is extremely efficient compared to Torch or some of the alternatives. We've written custom memory allocators for the GPU to make sure that your deep learning models are maximally memory efficient. This enables you to train bigger deep learning models than before. Extensions Without Pain Writing new neural network modules, or interfacing with PyTorch's Tensor API was designed to be straightforward and with minimal abstractions. You can write new neural network layers in Python using the torch API or your favorite NumPy-based libraries such as SciPy . If you want to write your layers in C/C++, we provide a convenient extension API that is efficient and with minimal boilerplate. No wrapper code needs to be written. You can see a tutorial here and an example here . Installation Binaries Commands to install binaries via Conda or pip wheels are on our website: https://pytorch.org/get-started/locally/ NVIDIA Jetson Platforms Python wheels for NVIDIA's Jetson Nano, Jetson TX1/TX2, Jetson Xavier NX/AGX, and Jetson AGX Orin are provided here and the L4T container is published here They require JetPack 4.2 and above, and @dusty-nv and @ptrblck are maintaining them. From Source Prerequisites If you are installing from source, you will need: Python 3.9 or later A compiler that fully supports C++17, such as clang or gcc (gcc 9.4.0 or newer is required, on Linux) Visual Studio or Visual Studio Build Tool (Windows only) * PyTorch CI uses Visual C++ BuildTools, which come with Visual Studio Enterprise, Professional, or Community Editions. You can also install the build tools from https://visualstudio.microsoft.com/visual-cpp-build-tools/ . The build tools do not come with Visual Studio Code by default. An example of environment setup is shown below: Linux: $ source < CONDA_INSTALL_DIR > /bin/activate $ conda create -y -n < CONDA_NAME > $ conda activate < CONDA_NAME > Windows: $ source < CONDA_INSTALL_DIR > \\S cripts \\a ctivate.bat $ conda create -y -n < CONDA_NAME > $ conda activate < CONDA_NAME > $ call \" C:\\Program Files\\Microsoft Visual Studio\\<VERSION>\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat \" x64 NVIDIA CUDA Support If you want to compile with CUDA support, select a supported version of CUDA from our support matrix , then install the following: NVIDIA CUDA NVIDIA cuDNN v8.5 or above Compiler compatible with CUDA Note: You could refer to the cuDNN Support Matrix for cuDNN versions with the various supported CUDA, CUDA driver and NVIDIA hardware If you want to disable CUDA support, export the environment variable USE_CUDA=0 . Other potentially useful environment variables may be found in setup.py . If you are building for NVIDIA's Jetson platforms (Jetson Nano, TX1, TX2, AGX Xavier), Instructions to install PyTorch for Jetson Nano are available here AMD ROCm Support If you want to compile with ROCm support, install AMD ROCm 4.0 and above installation ROCm is currently supported only for Linux systems. By default the build system expects ROCm to be installed in /opt/rocm . If ROCm is installed in a different directory, the ROCM_PATH environment variable must be set to the ROCm installation directory. The build system automatically detects the AMD GPU architecture.", "start_char_idx": 0, "end_char_idx": 4267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a49cc39-450f-498f-921b-c240fa5fff2f": {"__data__": {"id_": "8a49cc39-450f-498f-921b-c240fa5fff2f", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94b99940-dba6-441d-99e6-c5113214a786", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6c7528e46d917edd6834355469cc75f60871b063c1145977a38ed08a4cc68c95", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dd10a8c-8b63-4cd2-8c3e-dc87bb9c9de9", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "3b3ae463875691d0d113a97ac714fa83ea999624af466cb774bab84db6d6c8d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2600b5b6-a35c-4404-9336-824f250d6ac3", "node_type": "1", "metadata": {}, "hash": "2364c77785df8bd30f194b0093219606edef3e92dfd1ea000108203d4a0d2efc", "class_name": "RelatedNodeInfo"}}, "text": "Other potentially useful environment variables may be found in setup.py . If you are building for NVIDIA's Jetson platforms (Jetson Nano, TX1, TX2, AGX Xavier), Instructions to install PyTorch for Jetson Nano are available here AMD ROCm Support If you want to compile with ROCm support, install AMD ROCm 4.0 and above installation ROCm is currently supported only for Linux systems. By default the build system expects ROCm to be installed in /opt/rocm . If ROCm is installed in a different directory, the ROCM_PATH environment variable must be set to the ROCm installation directory. The build system automatically detects the AMD GPU architecture. Optionally, the AMD GPU architecture can be explicitly set with the PYTORCH_ROCM_ARCH environment variable AMD GPU architecture If you want to disable ROCm support, export the environment variable USE_ROCM=0 . Other potentially useful environment variables may be found in setup.py . Intel GPU Support If you want to compile with Intel GPU support, follow these PyTorch Prerequisites for Intel GPUs instructions. Intel GPU is supported for Linux and Windows. If you want to disable Intel GPU support, export the environment variable USE_XPU=0 . Other potentially useful environment variables may be found in setup.py . Get the PyTorch Source git clone https://github.com/pytorch/pytorch cd pytorch # if you are updating an existing checkout git submodule sync git submodule", "start_char_idx": 3618, "end_char_idx": 5041, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2600b5b6-a35c-4404-9336-824f250d6ac3": {"__data__": {"id_": "2600b5b6-a35c-4404-9336-824f250d6ac3", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10cb4c4c-5ec6-4808-8d89-04899e27327f", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7a01375d14a9e225d5959812b46c4b4277a1b47a473c33a1ccc42be8a0d34901", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a49cc39-450f-498f-921b-c240fa5fff2f", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b48fb3b2bfea101972cb494b280d9e4f629b3733e586651adf96830d29a346e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68439ca1-ad54-467e-9497-cd69d945220e", "node_type": "1", "metadata": {}, "hash": "fddefcd26a13dbe9c606270e51e07831b4a1f788ed068e8fa82d696f452f17d0", "class_name": "RelatedNodeInfo"}}, "text": "update --init --recursive Install Dependencies Common conda install cmake ninja # Run this command from the PyTorch directory after cloning the source code using the \u201cGet the PyTorch Source\u201c section below pip install -r requirements.txt On Linux pip install mkl-static mkl-include # CUDA only: Add LAPACK support for the GPU if needed # magma installation: run with active conda environment. specify CUDA version to install .ci/docker/common/install_magma_conda.sh 12.4 # (optional) If using torch.compile with inductor/triton, install the matching version of triton # Run from the pytorch directory after cloning # For Intel GPU support, please explicitly `export USE_XPU=1` before running command. make triton On MacOS # Add this package on intel x86 processor machines only pip install mkl-static mkl-include # Add these packages if torch.distributed is needed conda install pkg-config libuv On Windows pip install mkl-static mkl-include # Add these packages if torch.distributed is needed. # Distributed package support on Windows is a prototype feature and is subject to changes. conda install -c conda-forge libuv=1.39 Install PyTorch On Linux If you're compiling for AMD ROCm then first run this command: # Only run this if you're compiling for ROCm python tools/amd_build/build_amd.py Install PyTorch export CMAKE_PREFIX_PATH= \" ${CONDA_PREFIX :- ' $(dirname $(which conda))/../ ' } : ${CMAKE_PREFIX_PATH} \" python setup.py develop On macOS python3 setup.py develop On Windows If you want to build legacy python code, please refer to Building on legacy code and CUDA CPU-only builds In this mode PyTorch computations will run on your CPU, not your GPU. python setup.py develop Note on OpenMP: The desired OpenMP implementation is Intel OpenMP (iomp). In order to link against iomp, you'll need to manually download the library and set up the building environment by tweaking CMAKE_INCLUDE_PATH and LIB . The instruction here is an example for setting up both MKL and Intel OpenMP. Without these configurations for CMake, Microsoft Visual C OpenMP runtime (vcomp) will be used. CUDA based build In this mode PyTorch computations will leverage your GPU via CUDA for faster number crunching NVTX is needed to build Pytorch with CUDA. NVTX is a part of CUDA distributive, where it is called \"Nsight Compute\". To install it onto an already installed CUDA run CUDA installation once again and check the corresponding checkbox. Make sure that CUDA with Nsight Compute is installed after Visual Studio. Currently, VS 2017 / 2019, and Ninja are supported as the generator of CMake. If ninja.exe is detected in PATH , then Ninja will be used as the default generator, otherwise, it will use VS 2017 / 2019. If Ninja is selected as the generator, the latest MSVC will get selected as the underlying toolchain. Additional libraries such as Magma , oneDNN, a.k.a. MKLDNN or DNNL , and Sccache are often needed. Please refer to the installation-helper to install them. You can refer to the build_pytorch.bat script for some other environment variables configurations cmd :: Set the environment variables after you have downloaded and unzipped the mkl package, :: else CMake would throw an error as `Could NOT find OpenMP`. set CMAKE_INCLUDE_PATH = {Your directory}\\mkl\\include set LIB = {Your directory}\\mkl\\lib; %LIB% :: Read the content in the previous section carefully before you proceed. :: [Optional] If you want to override the underlying toolset used by Ninja and Visual Studio with CUDA, please run the following script block. :: \"Visual Studio 2019 Developer Command Prompt\" will be run automatically. :: Make sure you have CMake >= 3.12 before you do this when you use the Visual Studio generator.", "start_char_idx": 0, "end_char_idx": 3702, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68439ca1-ad54-467e-9497-cd69d945220e": {"__data__": {"id_": "68439ca1-ad54-467e-9497-cd69d945220e", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10cb4c4c-5ec6-4808-8d89-04899e27327f", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7a01375d14a9e225d5959812b46c4b4277a1b47a473c33a1ccc42be8a0d34901", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2600b5b6-a35c-4404-9336-824f250d6ac3", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ced499d3ef822be5246314f92e520882e4665d16f4fbb6a59fb2a86e4466c822", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84bea96a-343b-4e94-b112-e499de685027", "node_type": "1", "metadata": {}, "hash": "095a79e848b064e1d99a6dbf4ba3ed1604ce8b077ef48432a64ddc9d493513e8", "class_name": "RelatedNodeInfo"}}, "text": "MKLDNN or DNNL , and Sccache are often needed. Please refer to the installation-helper to install them. You can refer to the build_pytorch.bat script for some other environment variables configurations cmd :: Set the environment variables after you have downloaded and unzipped the mkl package, :: else CMake would throw an error as `Could NOT find OpenMP`. set CMAKE_INCLUDE_PATH = {Your directory}\\mkl\\include set LIB = {Your directory}\\mkl\\lib; %LIB% :: Read the content in the previous section carefully before you proceed. :: [Optional] If you want to override the underlying toolset used by Ninja and Visual Studio with CUDA, please run the following script block. :: \"Visual Studio 2019 Developer Command Prompt\" will be run automatically. :: Make sure you have CMake >= 3.12 before you do this when you use the Visual Studio generator. set CMAKE_GENERATOR_TOOLSET_VERSION = 14.27 set DISTUTILS_USE_SDK = 1 for /f \" usebackq tokens=* \" %i in (`\"% ProgramFiles(x86) %\\Microsoft Visual Studio\\Installer\\vswhere.exe\" -version [15^,17^) -products * -latest -property installationPath`) do call \"% i\\VC\\Auxiliary\\Build\\vcvarsall.bat \" x64 -vcvars_ver= %CMAKE_GENERATOR_TOOLSET_VERSION% :: [Optional] If you want to override the CUDA host compiler set CUDAHOSTCXX = C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\bin\\HostX64\\x64\\cl.exe python setup.py develop Intel GPU builds In this mode PyTorch with Intel GPU support will be built. Please make sure the common prerequisites as well as the prerequisites for Intel GPU are properly installed and the environment variables are configured prior to starting the build. For build tool support, Visual Studio 2022 is required. Then PyTorch can be built with the command: :: CMD Commands: :: Set the CMAKE_PREFIX_PATH to help find corresponding packages :: %CONDA_PREFIX% only works after `conda activate custom_env` if defined CMAKE_PREFIX_PATH ( set \" CMAKE_PREFIX_PATH = %CONDA_PREFIX% \\Library; %CMAKE_PREFIX_PATH% \" ) else ( set \" CMAKE_PREFIX_PATH = %CONDA_PREFIX% \\Library \" ) python setup.py develop Adjust Build Options (Optional) You can adjust the configuration of cmake variables optionally (without building first), by doing the following. For example, adjusting the pre-detected directories for CuDNN or BLAS can be done with such a step. On Linux export CMAKE_PREFIX_PATH= \" ${CONDA_PREFIX :- ' $(dirname $(which conda))/../ ' } : ${CMAKE_PREFIX_PATH} \" python setup.py build", "start_char_idx": 2859, "end_char_idx": 5337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84bea96a-343b-4e94-b112-e499de685027": {"__data__": {"id_": "84bea96a-343b-4e94-b112-e499de685027", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d262813f-0c13-431b-8292-8386cd7a9aef", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a54259962d8e70cf165488f8b377b7fa90e8107b09d878555202ec4df90b597d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68439ca1-ad54-467e-9497-cd69d945220e", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b7fac3d5bb98f23decf753514239102374755b5864ab33a22b0bc66f6c304f13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae9f50a4-bfb6-4f4b-97ee-d31adcdb1c9f", "node_type": "1", "metadata": {}, "hash": "5dd246fe958be387a7b7fb1ef9b102cc35ebc6399313cc0ffb551b769b16281f", "class_name": "RelatedNodeInfo"}}, "text": "--cmake-only ccmake build # or cmake-gui build On macOS export CMAKE_PREFIX_PATH= \" ${CONDA_PREFIX :- ' $(dirname $(which conda))/../ ' } : ${CMAKE_PREFIX_PATH} \" MACOSX_DEPLOYMENT_TARGET=10.9 CC=clang CXX=clang++ python setup.py build --cmake-only ccmake build # or cmake-gui build Docker Image Using pre-built images You can also pull a pre-built docker image from Docker Hub and run with docker v19.03+ docker run --gpus all --rm -ti --ipc=host pytorch/pytorch:latest Please note that PyTorch uses shared memory to share data between processes, so if torch multiprocessing is used (e.g. for multithreaded data loaders) the default shared memory segment size that container runs with is not enough, and you should increase shared memory size either with --ipc=host or --shm-size command line options to nvidia-docker run . Building the image yourself NOTE: Must be built with a docker version > 18.06 The Dockerfile is supplied to build images with CUDA 11.1 support and cuDNN v8. You can pass PYTHON_VERSION=x.y make variable to specify which Python version is to be used by Miniconda, or leave it unset to use the default. make -f docker.Makefile # images are tagged as docker.io/${your_docker_username}/pytorch You can also pass the CMAKE_VARS=\"...\" environment variable to specify additional CMake variables to be passed to CMake during the build. See setup.py for the list of available variables. make -f docker.Makefile Building the Documentation To build documentation in various formats, you will need Sphinx and the pytorch_sphinx_theme2. Before you build the documentation locally, ensure torch is installed in your environment. For small fixes, you can install the nightly version as described in Getting Started . For more complex fixes, such as adding a new module and docstrings for the new module, you might need to install torch from source . See Docstring Guidelines for docstring conventions. cd docs/ pip install -r requirements.txt make html make serve Run make to get a list of all available output formats. If you get a katex error run npm install katex . If it persists, try npm install -g katex Note If you installed nodejs with a different package manager (e.g., conda ) then npm will probably install a version of katex that is not compatible with your version of nodejs and doc builds will fail. A combination of versions that is known to work is node@6.13.1 and katex@0.13.18 . To install the latter with npm you can run npm install -g katex@0.13.18 Note If you see a numpy incompatibility error, run: pip install 'numpy<2' When you make changes to the dependencies run by CI, edit the .ci/docker/requirements-docs.txt file. Building a PDF To compile a PDF of all PyTorch documentation, ensure you have texlive and LaTeX installed. On macOS, you can install them using: brew install --cask mactex To create the PDF: Run: make latexpdf This will generate the necessary files in the build/latex directory. Navigate to this directory and execute: make LATEXOPTS=\"-interaction=nonstopmode\" This will produce a pytorch.pdf with the desired content. Run this command one more time so that it generates the correct table of contents and index. Note To view the Table of Contents, switch to the Table of Contents view in your PDF viewer. Previous Versions Installation instructions and binaries for previous PyTorch versions may be found on our website . Getting Started Three-pointers to get you started: Tutorials: get you started with understanding and using PyTorch Examples: easy to understand PyTorch code across all domains The API Reference Glossary Resources PyTorch.org PyTorch Tutorials PyTorch Examples PyTorch Models Intro to Deep Learning with PyTorch from Udacity Intro to Machine Learning with PyTorch from Udacity Deep Neural Networks with PyTorch from Coursera PyTorch Twitter PyTorch Blog PyTorch YouTube Communication Forums: Discuss implementations, research, etc. https://discuss.pytorch.org GitHub Issues: Bug reports, feature requests, install issues, RFCs, thoughts, etc. Slack: The PyTorch Slack hosts a primary audience of moderate to experienced PyTorch users and developers for general chat, online discussions, collaboration, etc. If you are a beginner looking for help, the primary medium is PyTorch Forums .", "start_char_idx": 0, "end_char_idx": 4261, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae9f50a4-bfb6-4f4b-97ee-d31adcdb1c9f": {"__data__": {"id_": "ae9f50a4-bfb6-4f4b-97ee-d31adcdb1c9f", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d262813f-0c13-431b-8292-8386cd7a9aef", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a54259962d8e70cf165488f8b377b7fa90e8107b09d878555202ec4df90b597d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84bea96a-343b-4e94-b112-e499de685027", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f15a084aaa104885bd55e5860435cfc6f785c5968b01a2c470487d4b5d5cde1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9df2d79d-4a32-4d7a-8d64-32b4862c0daa", "node_type": "1", "metadata": {}, "hash": "c8456fcbfd9c0553b16399e5ee178e590c197472a7c1e395c68c2a7cbba77f00", "class_name": "RelatedNodeInfo"}}, "text": "Getting Started Three-pointers to get you started: Tutorials: get you started with understanding and using PyTorch Examples: easy to understand PyTorch code across all domains The API Reference Glossary Resources PyTorch.org PyTorch Tutorials PyTorch Examples PyTorch Models Intro to Deep Learning with PyTorch from Udacity Intro to Machine Learning with PyTorch from Udacity Deep Neural Networks with PyTorch from Coursera PyTorch Twitter PyTorch Blog PyTorch YouTube Communication Forums: Discuss implementations, research, etc. https://discuss.pytorch.org GitHub Issues: Bug reports, feature requests, install issues, RFCs, thoughts, etc. Slack: The PyTorch Slack hosts a primary audience of moderate to experienced PyTorch users and developers for general chat, online discussions, collaboration, etc. If you are a beginner looking for help, the primary medium is PyTorch Forums . If you need a slack invite, please fill this form: https://goo.gl/forms/PP1AGvNHpSaJP8to1 Newsletter: No-noise, a one-way email newsletter with important announcements about PyTorch. You can sign-up here: https://eepurl.com/cbG0rv Facebook Page: Important announcements about PyTorch. https://www.facebook.com/pytorch For brand guidelines, please visit our website at pytorch.org Releases and Contributing Typically, PyTorch has three minor releases a year. Please let us know if you encounter a bug by filing an issue . We appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion. If you plan to contribute new features, utility functions, or extensions to the core, please first open an issue and discuss the feature with us. Sending a PR without discussion might end up resulting in a rejected PR because we might be taking the core in a different direction than you might be aware of. To learn more", "start_char_idx": 3377, "end_char_idx": 5231, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9df2d79d-4a32-4d7a-8d64-32b4862c0daa": {"__data__": {"id_": "9df2d79d-4a32-4d7a-8d64-32b4862c0daa", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_45_4.txt", "file_name": "github.com_45_4.txt", "file_type": "text/plain", "file_size": 1853, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be71a699-f052-4f1f-ad19-875988339108", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_45_4.txt", "file_name": "github.com_45_4.txt", "file_type": "text/plain", "file_size": 1853, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "32a722162c7eeea6afb9a06fa6f8e3be6fb2b0f4b1421f3a0bfd7877e9556dc8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae9f50a4-bfb6-4f4b-97ee-d31adcdb1c9f", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5b107ab4dfe11b32d35dc6d326ed646bf25f099efd00de88587fbfea60561d7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "254ed956-2758-4d7b-a5db-892909e52868", "node_type": "1", "metadata": {}, "hash": "6a2a018f5b74ee310e3dc471780038d6a396acb50f87803cd74215c312fccf16", "class_name": "RelatedNodeInfo"}}, "text": "about making a contribution to Pytorch, please see our Contribution page . For more information about PyTorch releases, see Release page . The Team PyTorch is a community-driven project with several skillful engineers and researchers contributing to it. PyTorch is currently maintained by Soumith Chintala , Gregory Chanan , Dmytro Dzhulgakov , Edward Yang , and Nikita Shulga with major contributions coming from hundreds of talented individuals in various forms and means. A non-exhaustive but growing list needs to mention: Trevor Killeen , Sasank Chilamkurthy , Sergey Zagoruyko , Adam Lerer , Francisco Massa , Alykhan Tejani , Luca Antiga , Alban Desmaison , Andreas Koepf , James Bradbury , Zeming Lin , Yuandong Tian , Guillaume Lample , Marat Dukhan , Natalia Gimelshein , Christian Sarofeen , Martin Raison , Edward Yang , Zachary Devito . Note: This project is unrelated to hughperkins/pytorch with the same name. Hugh is a valuable contributor to the Torch community and has helped with many things Torch and PyTorch. License PyTorch has a BSD-style license, as found in the LICENSE file. About Tensors and Dynamic neural networks in Python with strong GPU acceleration pytorch.org Topics python machine-learning deep-learning neural-network gpu numpy autograd tensor Resources Readme License View license Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 90.3k stars Watchers 1.8k watching Forks 24.3k forks Report repository Releases 59 PyTorch 2.7.0 Release Latest Apr 23, 2025 + 58 releases Packages 0 No packages published Used by 763k + 763,246 Contributors 3,835 + 3,821 contributors Languages Python 57.6% C++ 34.2% Cuda 3.0% C 1.5% Objective-C++ 1.1% CMake 0.7% Other 1.9% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 1851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "254ed956-2758-4d7b-a5db-892909e52868": {"__data__": {"id_": "254ed956-2758-4d7b-a5db-892909e52868", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5867e41-f15c-48ac-937e-d02bb843eee1", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7539cd81f4901d608a7e6b6133ee3e76890ed00d3cb750c228a72572aef5d264", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9df2d79d-4a32-4d7a-8d64-32b4862c0daa", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_45_4.txt", "file_name": "github.com_45_4.txt", "file_type": "text/plain", "file_size": 1853, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "32a722162c7eeea6afb9a06fa6f8e3be6fb2b0f4b1421f3a0bfd7877e9556dc8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ccca712f-95ba-4083-95db-1f8441d17cdb", "node_type": "1", "metadata": {}, "hash": "81f1be0795ee9610781d02828d90790247e40c71a2556aaa48e6e6a1e96b53ec", "class_name": "RelatedNodeInfo"}}, "text": "GitHub - python/cpython: The Python programming language Skip to content You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert python / cpython Public Uh oh! There was an error while loading. Please reload this page . Notifications You must be signed in to change notification settings Fork 32k Star 67.2k The Python programming language www.python.org License View license 67.2k stars 32k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings python/cpython main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 127,232 Commits .azure-pipelines .azure-pipelines .devcontainer .devcontainer .github .github Android Android Doc Doc Grammar Grammar Include Include InternalDocs InternalDocs Lib Lib Mac Mac Misc Misc Modules Modules Objects Objects PC PC PCbuild PCbuild Parser Parser Programs Programs Python Python Tools Tools iOS iOS .coveragerc .coveragerc .editorconfig .editorconfig .gitattributes .gitattributes .gitignore .gitignore .mailmap .mailmap .pre-commit-config.yaml .pre-commit-config.yaml .readthedocs.yml .readthedocs.yml .ruff.toml .ruff.toml LICENSE LICENSE Makefile.pre.in Makefile.pre.in README.rst README.rst aclocal.m4 aclocal.m4 config.guess config.guess config.sub config.sub configure configure configure.ac configure.ac install-sh install-sh pyconfig.h.in pyconfig.h.in View all files Repository files navigation This is Python version 3.15.0 alpha 0 Copyright \u00a9 2001 Python Software Foundation. All rights reserved. See the end of this file for further copyright and license information. Contents General Information Contributing to CPython Using Python Build Instructions Profile Guided Optimization Link Time Optimization What's New Documentation Testing Installing multiple versions Release Schedule Copyright and License Information General Information Website: https://www.python.org Source code: https://github.com/python/cpython Issue tracker: https://github.com/python/cpython/issues Documentation: https://docs.python.org Developer's Guide: https://devguide.python.org/ Contributing to CPython For more complete instructions on contributing to CPython development, see the Developer Guide . Using Python Installable Python kits, and information about using Python, are available at python.org . Build Instructions On Unix, Linux, BSD, macOS, and Cygwin: ./configure make make test sudo make install This will install Python as python3 . You can pass many options to the configure script; run ./configure --help to find out more. On macOS case-insensitive file systems and on Cygwin, the executable is called python.exe ; elsewhere it's just python . Building a complete Python installation requires the use of various additional third-party libraries, depending on your build platform and configure options. Not all standard library modules are buildable or usable on all platforms. Refer to the Install dependencies section of the Developer Guide for current detailed information on dependencies for various Linux distributions and macOS. On macOS, there are additional configure and build options related to macOS framework and universal builds. Refer to Mac/README.rst . On Windows, see PCbuild/readme.txt . To build Windows installer, see Tools/msi/README.txt . If you wish, you can create a subdirectory and invoke configure from there. For example: mkdir debug cd debug ../configure --with-pydebug make make test (This will fail if you also built at the top-level directory. You should do a make clean at the top-level first.) To get an optimized build of Python, configure --enable-optimizations before you run make . This sets the default make targets up to enable Profile Guided Optimization (PGO) and may be used to auto-enable Link Time Optimization (LTO) on some platforms. For more details, see the sections below. Profile Guided Optimization PGO takes advantage of recent versions of the GCC or Clang compilers. If used, either via configure --enable-optimizations or by manually running make profile-opt regardless of configure flags, the optimized build process will perform the following steps: The entire Python directory is cleaned of temporary files that may have resulted from a previous compilation. An instrumented version of the interpreter is built, using suitable compiler flags for each flavor. Note that this is just an intermediary step. The binary resulting from this step is not good for real-life workloads as it has profiling instructions embedded inside. After the instrumented interpreter is built, the Makefile will run a training workload. This is necessary in order to profile the interpreter's execution.", "start_char_idx": 0, "end_char_idx": 4883, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccca712f-95ba-4083-95db-1f8441d17cdb": {"__data__": {"id_": "ccca712f-95ba-4083-95db-1f8441d17cdb", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5867e41-f15c-48ac-937e-d02bb843eee1", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7539cd81f4901d608a7e6b6133ee3e76890ed00d3cb750c228a72572aef5d264", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "254ed956-2758-4d7b-a5db-892909e52868", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e2975b7cac19a43d40e9d8ee864e70972132929d319c4b1ffb6dd8e8de393847", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e6eee08-c9d1-453e-a8f3-db82607dfe39", "node_type": "1", "metadata": {}, "hash": "3f748fc367107c9cc701a7649b52a3dbd7ed8667b56cf5bda0a35726dccd209c", "class_name": "RelatedNodeInfo"}}, "text": "For more details, see the sections below. Profile Guided Optimization PGO takes advantage of recent versions of the GCC or Clang compilers. If used, either via configure --enable-optimizations or by manually running make profile-opt regardless of configure flags, the optimized build process will perform the following steps: The entire Python directory is cleaned of temporary files that may have resulted from a previous compilation. An instrumented version of the interpreter is built, using suitable compiler flags for each flavor. Note that this is just an intermediary step. The binary resulting from this step is not good for real-life workloads as it has profiling instructions embedded inside. After the instrumented interpreter is built, the Makefile will run a training workload. This is necessary in order to profile the interpreter's execution. Note also that any output, both stdout and stderr, that may appear at this step is suppressed. The final step is to build the actual interpreter, using the information collected from the instrumented one. The end result will be a Python binary that is optimized; suitable for distribution or production installation. Link Time Optimization Enabled via configure's --with-lto flag. LTO takes advantage of the ability of recent compiler toolchains to optimize across the otherwise arbitrary .o file boundary when building final executables or shared libraries for additional performance gains. What's New We have a comprehensive overview of the changes in the What's New in Python 3.14 document. For a more detailed change log, read Misc/NEWS , but a full accounting of changes can", "start_char_idx": 4026, "end_char_idx": 5663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e6eee08-c9d1-453e-a8f3-db82607dfe39": {"__data__": {"id_": "4e6eee08-c9d1-453e-a8f3-db82607dfe39", "embedding": null, "metadata": {"file_path": "docs\\python\\github.com_8_1.txt", "file_name": "github.com_8_1.txt", "file_type": "text/plain", "file_size": 3886, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f4ac4c2-68ce-4c3e-ab50-c73b6815d615", "node_type": "4", "metadata": {"file_path": "docs\\python\\github.com_8_1.txt", "file_name": "github.com_8_1.txt", "file_type": "text/plain", "file_size": 3886, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0e49bb9381f64ecb607a37a948bba07e4921f59cec90433353300742b126c1ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccca712f-95ba-4083-95db-1f8441d17cdb", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "36832e9ff7a011057099dd9eaa09df0147c475f7a050b57fd85ff99a6f0079ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30c11c89-e7f7-4520-aedf-f784281a8d63", "node_type": "1", "metadata": {}, "hash": "871515b346cfd981ccbaaf38634726c78a877ca9d5fa504e9b12008dfd9d39e5", "class_name": "RelatedNodeInfo"}}, "text": "only be gleaned from the commit history . If you want to install multiple versions of Python, see the section below entitled \"Installing multiple versions\". Documentation Documentation for Python 3.14 is online, updated daily. It can also be downloaded in many formats for faster access. The documentation is downloadable in HTML, PDF, and reStructuredText formats; the latter version is primarily for documentation authors, translators, and people with special formatting requirements. For information about building Python's documentation, refer to Doc/README.rst . Testing To test the interpreter, type make test in the top-level directory. The test set produces some output. You can generally ignore the messages about skipped tests due to optional features which can't be imported. If a message is printed about a failed test or a traceback or core dump is produced, something is wrong. By default, tests are prevented from overusing resources like disk space and memory. To enable these tests, run make buildbottest . If any tests fail, you can re-run the failing test(s) in verbose mode. For example, if test_os and test_gdb failed, you can run: make test TESTOPTS=\"-v test_os test_gdb\" If the failure persists and appears to be a problem with Python rather than your environment, you can file a bug report and include relevant output from that command to show the issue. See Running & Writing Tests for more on running tests. Installing multiple versions On Unix and Mac systems if you intend to install multiple versions of Python using the same installation prefix ( --prefix argument to the configure script) you must take care that your primary python executable is not overwritten by the installation of a different version. All files and directories installed using make altinstall contain the major and minor version and can thus live side-by-side. make install also creates ${prefix}/bin/python3 which refers to ${prefix}/bin/python3.X . If you intend to install multiple versions using the same prefix you must decide which version (if any) is your \"primary\" version. Install that version using make install . Install all other versions using make altinstall . For example, if you want to install Python 2.7, 3.6, and 3.14 with 3.14 being the primary version, you would execute make install in your 3.14 build directory and make altinstall in the others. Release Schedule See PEP 745 for Python 3.14 release details. Copyright and License Information Copyright \u00a9 2001 Python Software Foundation. All rights reserved. Copyright \u00a9 2000 BeOpen.com. All rights reserved. Copyright \u00a9 1995-2001 Corporation for National Research Initiatives. All rights reserved. Copyright \u00a9 1991-1995 Stichting Mathematisch Centrum. All rights reserved. See the LICENSE for information on the history of this software, terms & conditions for usage, and a DISCLAIMER OF ALL WARRANTIES. This Python distribution contains no GNU General Public License (GPL) code, so it may be used in proprietary projects. There are interfaces to some GNU code but these are entirely optional. All trademarks referenced herein are property of their respective holders. About The Python programming language www.python.org Resources Readme License View license Code of conduct Code of conduct Security policy Security policy Uh oh! There was an error while loading. Please reload this page . Activity Custom properties Stars 67.2k stars Watchers 1.5k watching Forks 32k forks Report repository Releases 611 tags Sponsor this project Uh oh! There was an error while loading. Please reload this page . https://www.python.org/psf/donations/python-dev/ Learn more about GitHub Sponsors Packages 0 No packages published Used by 628k + 627,767 Contributors 3,080 + 3,066 contributors Languages Python 61.9% C 36.1% C++ 0.8% M4 0.4% HTML 0.3% Batchfile 0.1% Other 0.4% You can\u2019t perform that action at this time.", "start_char_idx": 0, "end_char_idx": 3880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30c11c89-e7f7-4520-aedf-f784281a8d63": {"__data__": {"id_": "30c11c89-e7f7-4520-aedf-f784281a8d63", "embedding": null, "metadata": {"file_path": "docs\\python\\medium.com_24_0.txt", "file_name": "medium.com_24_0.txt", "file_type": "text/plain", "file_size": 3327, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd970fd6-d428-4d27-ae5c-3ffbcfde7dfd", "node_type": "4", "metadata": {"file_path": "docs\\python\\medium.com_24_0.txt", "file_name": "medium.com_24_0.txt", "file_type": "text/plain", "file_size": 3327, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fcbb2a77a35a693c2706c6eb7d7262f38252a15244947b17ca3e64c6521a0e96", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e6eee08-c9d1-453e-a8f3-db82607dfe39", "node_type": "1", "metadata": {"file_path": "docs\\python\\github.com_8_1.txt", "file_name": "github.com_8_1.txt", "file_type": "text/plain", "file_size": 3886, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0e49bb9381f64ecb607a37a948bba07e4921f59cec90433353300742b126c1ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e619c0b7-a450-4bb5-8f8c-9eb4a088a7ab", "node_type": "1", "metadata": {}, "hash": "e237eb894b4c9668be40c32d4d4813eb89a47c0393821463628ea28b73c48030", "class_name": "RelatedNodeInfo"}}, "text": "The most insightful stories about Python - Medium Sitemap Open in app Sign up Sign in Medium Logo Write Sign up Sign in Explore topics Python Programming Languages Software Development Programming Data Science Machine Learning Python Programming Artificial Intelligence Money Coding Mental Health Python Topic \u00b7 3.8M followers \u00b7 279K stories Follow Recommended stories Sandeep Dhakal Efficiently dissolving adjacent polygons by attributes in a large GIS database Do you have a large GIS dataset where you want to efficiently dissolve all adjacent polygons with the same attribute? In this post, I will\u2026 May 15 Francesco Franco Object Detection with Python and HuggingFace Transformers YOLO! If you\u2019re familiar with machine learning, you\u2019ll recognize the acronym. Indeed, You Only Look Once has become one of the default\u2026 1d ago A response icon 1 In Data Science Collective by Han HELOIR, Ph.D. \u2615\ufe0f Talking to Your Data with MCP: No code for data analysis Data analysis for business decision makers, marketers, and project managers (No-developer profile) 2d ago A response icon 1 2d ago A response icon 1 In Level Up Coding by Fareed Khan Cutting Tokens by 40% to Lower LLM API Costs Using a Memory-Efficient Algorithm Let your LLM remember only relevant thing 3d ago A response icon 4 3d ago A response icon 4 Rhett Allain Visualizing Faraday\u2019s Law with Python Sometimes it\u2019s easier to actually calculate the real thing than it is to make a drawing. Here\u2019s a case where that\u2019s true \u2014 showing the\u2026 4d ago A response icon 1 4d ago A response icon 1 Sandeep Dhakal Efficiently dissolving adjacent polygons by attributes in a large GIS database Do you have a large GIS dataset where you want to efficiently dissolve all adjacent polygons with the same attribute? In this post, I will\u2026 May 15 Francesco Franco Object Detection with Python and HuggingFace Transformers YOLO! If you\u2019re familiar with machine learning, you\u2019ll recognize the acronym. Indeed, You Only Look Once has become one of the default\u2026 1d ago A response icon 1 In Data Science Collective by Han HELOIR, Ph.D. \u2615\ufe0f Talking to Your Data with MCP: No code for data analysis Data analysis for business decision makers, marketers, and project managers (No-developer profile) 2d ago A response icon 1 In Level Up Coding by Fareed Khan Cutting Tokens by 40% to Lower LLM API Costs Using a Memory-Efficient Algorithm Let your LLM remember only relevant thing 3d ago A response icon 4 Rhett Allain Visualizing Faraday\u2019s Law with Python Sometimes it\u2019s easier to actually calculate the real thing than it is to make a drawing. Here\u2019s a case where that\u2019s true \u2014 showing the\u2026 4d ago A response icon 1 In AI Advances by Patrick Kalkman Beyond Brittle: Building Resilient UI Testing How we combined Playwright, OmniParser, and the OpenAI Agents SDK to end our maintenance nightmares 4d ago A response icon 2 In Running with Rock by Brian Rock Boston Qualifying Times and Hills Revisited: Data from Boston 2025 \u2014 Running with Rock Last month, I published an analysis of the impact of downhill marathons on the Boston Marathon qualifying process. 6d ago A response icon 1 In Radio Hackers by Simon Quellen Field Python Radio 39: Secret Unbreakable Code A One-Time Pad is Cryptographically Secure. 5d ago See more recommended stories", "start_char_idx": 0, "end_char_idx": 3275, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e619c0b7-a450-4bb5-8f8c-9eb4a088a7ab": {"__data__": {"id_": "e619c0b7-a450-4bb5-8f8c-9eb4a088a7ab", "embedding": null, "metadata": {"file_path": "docs\\python\\numpy.org_18_0.txt", "file_name": "numpy.org_18_0.txt", "file_type": "text/plain", "file_size": 1243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8cd240f4-004b-40f5-a69b-3f77f4135d82", "node_type": "4", "metadata": {"file_path": "docs\\python\\numpy.org_18_0.txt", "file_name": "numpy.org_18_0.txt", "file_type": "text/plain", "file_size": 1243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "eb98e7063ab24c682bccfb38db4e6722122b721a9286a43759668c75635a3800", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30c11c89-e7f7-4520-aedf-f784281a8d63", "node_type": "1", "metadata": {"file_path": "docs\\python\\medium.com_24_0.txt", "file_name": "medium.com_24_0.txt", "file_type": "text/plain", "file_size": 3327, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fcbb2a77a35a693c2706c6eb7d7262f38252a15244947b17ca3e64c6521a0e96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00a16b99-ea97-4d17-b1cb-6eb723440378", "node_type": "1", "metadata": {}, "hash": "417457160fc67ba2e5edf75bacd1c41f4d8e4b3e644ecfc4a7f0c22623cfe58b", "class_name": "RelatedNodeInfo"}}, "text": "NumPy Documentation NumPy.org NumPy Documentation Web Latest (development) documentation NumPy Enhancement Proposals Versions: Numpy 2.2 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 2.1 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 2.0 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.26 Manual [HTML+zip] Numpy 1.25 Manual [HTML+zip] Numpy 1.24 Manual [HTML+zip] Numpy 1.23 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.22 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.21 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.20 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.19 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.18 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.17 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.16 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.15 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.14 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Numpy 1.13 Manual [HTML+zip] [Reference Guide PDF] [User Guide PDF] Older versions (on scipy.org) \u00a9 Copyright 2008-2022 NumPy. All rights reserved.", "start_char_idx": 0, "end_char_idx": 1242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00a16b99-ea97-4d17-b1cb-6eb723440378": {"__data__": {"id_": "00a16b99-ea97-4d17-b1cb-6eb723440378", "embedding": null, "metadata": {"file_path": "docs\\python\\pandas.pydata.org_19_0.txt", "file_name": "pandas.pydata.org_19_0.txt", "file_type": "text/plain", "file_size": 1377, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "02c9d39d-cf55-475d-b584-1d619cb18f59", "node_type": "4", "metadata": {"file_path": "docs\\python\\pandas.pydata.org_19_0.txt", "file_name": "pandas.pydata.org_19_0.txt", "file_type": "text/plain", "file_size": 1377, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8d3678b77d0c266250e7c8b112bd30c0db0f4e28db3bb233acbacfcdd6e62db1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e619c0b7-a450-4bb5-8f8c-9eb4a088a7ab", "node_type": "1", "metadata": {"file_path": "docs\\python\\numpy.org_18_0.txt", "file_name": "numpy.org_18_0.txt", "file_type": "text/plain", "file_size": 1243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "eb98e7063ab24c682bccfb38db4e6722122b721a9286a43759668c75635a3800", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc4a4ea1-f1ad-4f0f-af3a-a34dc477eec5", "node_type": "1", "metadata": {}, "hash": "f3d8187fea754e81fbc5bcb75e4370f020be1f4e28835d2a62c8c176a11e8246", "class_name": "RelatedNodeInfo"}}, "text": "pandas documentation \u2014 pandas 2.2.3 documentation Skip to main content Back to top GitHub Twitter Mastodon pandas documentation # Date : Sep 20, 2024 Version : 2.2.3 Download documentation : Zipped HTML Previous versions : Documentation of previous pandas versions is available at pandas.pydata.org . Useful links : Binary Installers | Source Repository | Issues & Ideas | Q&A Support | Mailing List pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. Getting started New to pandas ? Check out the getting started guides. They contain an introduction to pandas\u00e2\u0080\u0099 main concepts and links to additional tutorials. To the getting started guides User guide The user guide provides in-depth information on the key concepts of pandas with useful background information and explanation. To the user guide API reference The reference guide contains a detailed description of the pandas API. The reference describes how the methods work and which parameters can be used. It assumes that you have an understanding of the key concepts. To the reference guide Developer guide Saw a typo in the documentation? Want to improve existing functionalities? The contributing guidelines will guide you through the process of improving pandas. To the development guide Show Source", "start_char_idx": 0, "end_char_idx": 1372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc4a4ea1-f1ad-4f0f-af3a-a34dc477eec5": {"__data__": {"id_": "dc4a4ea1-f1ad-4f0f-af3a-a34dc477eec5", "embedding": null, "metadata": {"file_path": "docs\\python\\pypi.org_2_0.txt", "file_name": "pypi.org_2_0.txt", "file_type": "text/plain", "file_size": 836, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3e5faa8-0551-4392-a02b-1d1bb614fcab", "node_type": "4", "metadata": {"file_path": "docs\\python\\pypi.org_2_0.txt", "file_name": "pypi.org_2_0.txt", "file_type": "text/plain", "file_size": 836, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c007b5d4330c56e9e9c6f9e906b9ecf2eaa878e89e0f94584d74b30fbd67451c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00a16b99-ea97-4d17-b1cb-6eb723440378", "node_type": "1", "metadata": {"file_path": "docs\\python\\pandas.pydata.org_19_0.txt", "file_name": "pandas.pydata.org_19_0.txt", "file_type": "text/plain", "file_size": 1377, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8d3678b77d0c266250e7c8b112bd30c0db0f4e28db3bb233acbacfcdd6e62db1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "18761ce4-84a2-482e-b6cf-8f0eac9b73b8", "node_type": "1", "metadata": {}, "hash": "3a4866b0018df6881967319d69181f0e381ff0e794ee57035f706fd51715a645", "class_name": "RelatedNodeInfo"}}, "text": "PyPI \u00b7 The Python Package Index Skip to main content Switch to mobile version Warning Some features may not work without JavaScript. Please try enabling it if you encounter problems. Find, install and publish Python packages with the Python Package Index Or browse projects 639,987 projects 6,978,045 releases 14,351,179 files 927,273 users The Python Package Index (PyPI) is a repository of software for the Python programming language. PyPI helps you find and install software developed and shared by the Python community. Learn about installing packages . Package authors use PyPI to distribute their software. Learn how to package your Python code for PyPI . Supported by AWS Cloud computing and Security Sponsor Datadog Monitoring Fastly CDN Google Download Analytics Pingdom Monitoring Sentry Error logging StatusPage Status page", "start_char_idx": 0, "end_char_idx": 835, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18761ce4-84a2-482e-b6cf-8f0eac9b73b8": {"__data__": {"id_": "18761ce4-84a2-482e-b6cf-8f0eac9b73b8", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_1.txt", "file_name": "python_1_chunk_1.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c11ab4fc-f4d8-4bb5-aeb5-b3b78fee855b", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_1.txt", "file_name": "python_1_chunk_1.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "19dc6623bc3ac2ad68151474aa7da139a349c8e404cc9c1d94ef2943d25f6744", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc4a4ea1-f1ad-4f0f-af3a-a34dc477eec5", "node_type": "1", "metadata": {"file_path": "docs\\python\\pypi.org_2_0.txt", "file_name": "pypi.org_2_0.txt", "file_type": "text/plain", "file_size": 836, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c007b5d4330c56e9e9c6f9e906b9ecf2eaa878e89e0f94584d74b30fbd67451c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b45e877-98d9-455e-8840-85b81b61a2e6", "node_type": "1", "metadata": {}, "hash": "e52806bd8ea8f58143b7e83398ba8e4791eb11cfe269fafcf826354fef0f6091", "class_name": "RelatedNodeInfo"}}, "text": "Changelog 1.Whetting Your Appetite This page Report a bug Show source Navigation index modules| next| previous| Python\u00bb 3.13.3 Documentation\u00bb The Python Tutorial | ThemeAutoLightDark| The Python Tutorial\u00b6 Tip This tutorial is designed forprogrammersthat are new to the Python language,notbeginnerswho are new to programming. Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site,https://www.python.org/, and may be freely distributed.", "start_char_idx": 0, "end_char_idx": 893, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b45e877-98d9-455e-8840-85b81b61a2e6": {"__data__": {"id_": "4b45e877-98d9-455e-8840-85b81b61a2e6", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_10.txt", "file_name": "python_1_chunk_10.txt", "file_type": "text/plain", "file_size": 975, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7c83c0c-01db-4a21-a67a-4da91460212e", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_10.txt", "file_name": "python_1_chunk_10.txt", "file_type": "text/plain", "file_size": 975, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cf1d39c8469b4da554d6acbd24d26e541fda1d8f54bffc0e8acffb582a7cc119", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18761ce4-84a2-482e-b6cf-8f0eac9b73b8", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_1.txt", "file_name": "python_1_chunk_1.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "19dc6623bc3ac2ad68151474aa7da139a349c8e404cc9c1d94ef2943d25f6744", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1956b9f2-8f0d-47ef-9831-8a9861273f6a", "node_type": "1", "metadata": {}, "hash": "1c554b7451fa7dd5b16f52a8bdd588188c8c149f4c9e5911ef202cd82d0f7d41", "class_name": "RelatedNodeInfo"}}, "text": "Iterators 9.9. Generators 9.10. Generator Expressions 10. Brief Tour of the Standard Library10.1. Operating System Interface10.2. File Wildcards10.3. Command Line Arguments10.4. Error Output Redirection and Program Termination10.5. String Pattern Matching10.6. Mathematics10.7. Internet Access10.8. Dates and Times10.9. Data Compression10.10. Performance Measurement10.11. Quality Control10.12. Batteries Included 10.1. Operating System Interface 10.2. File Wildcards 10.3. Command Line Arguments 10.4. Error Output Redirection and Program Termination 10.5. String Pattern Matching 10.6. Mathematics 10.7. Internet Access 10.8. Dates and Times 10.9. Data Compression 10.10. Performance Measurement 10.11. Quality Control 10.12. Batteries Included 11. Brief Tour of the Standard Library \u2014 Part II11.1. Output Formatting11.2. Templating11.3. Working with Binary Data Record Layouts11.4. Multi-threading11.5. Logging11.6. Weak References11.7. Tools for Working with Lists11.8.", "start_char_idx": 0, "end_char_idx": 973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1956b9f2-8f0d-47ef-9831-8a9861273f6a": {"__data__": {"id_": "1956b9f2-8f0d-47ef-9831-8a9861273f6a", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_11.txt", "file_name": "python_1_chunk_11.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d30c311-4a47-443b-afc2-16b61493a6cd", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_11.txt", "file_name": "python_1_chunk_11.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5332aa4f6cd783b91edac37d9fe3b41f1371d811a4fd1d986f04329803189a8e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b45e877-98d9-455e-8840-85b81b61a2e6", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_10.txt", "file_name": "python_1_chunk_10.txt", "file_type": "text/plain", "file_size": 975, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cf1d39c8469b4da554d6acbd24d26e541fda1d8f54bffc0e8acffb582a7cc119", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d2692bb6-cb65-4ad6-a8e0-9b6f10fd5d4b", "node_type": "1", "metadata": {}, "hash": "aabfef3ce65bef99de43c3b54d771db4a12f7b46267b4cd731bce45b1b6a772a", "class_name": "RelatedNodeInfo"}}, "text": "Decimal Floating-Point Arithmetic 11.1. Output Formatting 11.2. Templating 11.3. Working with Binary Data Record Layouts 11.4. Multi-threading 11.5. Logging 11.6. Weak References 11.7. Tools for Working with Lists 11.8. Decimal Floating-Point Arithmetic 12. Virtual Environments and Packages12.1. Introduction12.2. Creating Virtual Environments12.3. Managing Packages with pip 12.1. Introduction 12.2. Creating Virtual Environments 12.3. Managing Packages with pip 13. What Now? 14. Interactive Input Editing and History Substitution14.1. Tab Completion and History Editing14.2. Alternatives to the Interactive Interpreter 14.1. Tab Completion and History Editing 14.2. Alternatives to the Interactive Interpreter 15. Floating-Point Arithmetic: Issues and Limitations15.1. Representation Error 15.1. Representation Error 16. Appendix16.1. Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules 16.1.", "start_char_idx": 0, "end_char_idx": 985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2692bb6-cb65-4ad6-a8e0-9b6f10fd5d4b": {"__data__": {"id_": "d2692bb6-cb65-4ad6-a8e0-9b6f10fd5d4b", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_12.txt", "file_name": "python_1_chunk_12.txt", "file_type": "text/plain", "file_size": 454, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01738cca-4fe7-47b5-b79f-29469f76a7fd", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_12.txt", "file_name": "python_1_chunk_12.txt", "file_type": "text/plain", "file_size": 454, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6f3bc0541122f71ca6afaa0234fd390a4885a3172428e446273947ea6f52a559", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1956b9f2-8f0d-47ef-9831-8a9861273f6a", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_11.txt", "file_name": "python_1_chunk_11.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5332aa4f6cd783b91edac37d9fe3b41f1371d811a4fd1d986f04329803189a8e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db37d56c-28a7-42b0-a1cd-37b9e00c1cb1", "node_type": "1", "metadata": {}, "hash": "7f5b56d470c4b04e1eef05046369b76088694d2fcb5dbe7e27918cfc7fb9ab60", "class_name": "RelatedNodeInfo"}}, "text": "Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules 16.1.1. Error Handling 16.1.2. Executable Python Scripts 16.1.3. The Interactive Startup File 16.1.4. The Customization Modules Changelog 1.Whetting Your Appetite This page Report a bug Show source Navigation index modules| next| previous| Python\u00bb 3.13.3 Documentation\u00bb The Python Tutorial | ThemeAutoLightDark|", "start_char_idx": 0, "end_char_idx": 452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db37d56c-28a7-42b0-a1cd-37b9e00c1cb1": {"__data__": {"id_": "db37d56c-28a7-42b0-a1cd-37b9e00c1cb1", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_2.txt", "file_name": "python_1_chunk_2.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a918de1-e315-4893-959b-c62a1e8f3779", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_2.txt", "file_name": "python_1_chunk_2.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "148d1d04bd99f88d6e4af9f8fcb8f7a4d2aa2b279524be2e644f0fd008ac8478", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d2692bb6-cb65-4ad6-a8e0-9b6f10fd5d4b", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_12.txt", "file_name": "python_1_chunk_12.txt", "file_type": "text/plain", "file_size": 454, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6f3bc0541122f71ca6afaa0234fd390a4885a3172428e446273947ea6f52a559", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03e3a9a8-5eaf-4d86-892e-65c38ab0cb14", "node_type": "1", "metadata": {}, "hash": "21062b3a138bcde085627583e8a87d7941f0dbf7f2188a5b201269a3f4cef6b6", "class_name": "RelatedNodeInfo"}}, "text": "The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation. The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications. This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. Be aware that it expects you to have a basic understanding of programming in general. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well. For a description of standard objects and modules, seeThe Python Standard Library.The Python Language Referencegives a more formal definition of the language. To write extensions in C or C++, readExtending and Embedding the Python InterpreterandPython/C API Reference Manual.", "start_char_idx": 0, "end_char_idx": 997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03e3a9a8-5eaf-4d86-892e-65c38ab0cb14": {"__data__": {"id_": "03e3a9a8-5eaf-4d86-892e-65c38ab0cb14", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_3.txt", "file_name": "python_1_chunk_3.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7093dd4a-4396-4a2e-9073-a137f2ea510e", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_3.txt", "file_name": "python_1_chunk_3.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0d298205929c6a6efb560ded100989d8c049a945cab47905b2e5a38663858844", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db37d56c-28a7-42b0-a1cd-37b9e00c1cb1", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_2.txt", "file_name": "python_1_chunk_2.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "148d1d04bd99f88d6e4af9f8fcb8f7a4d2aa2b279524be2e644f0fd008ac8478", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f083465f-cf9c-4869-81d4-1bbf2d46f452", "node_type": "1", "metadata": {}, "hash": "3507bc5badc9421660521eb6d9f8dca73ced79b467171e5632338572f9ef8bf7", "class_name": "RelatedNodeInfo"}}, "text": "There are also several books covering Python in depth. This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python\u2019s most noteworthy features, and will give you a good idea of the language\u2019s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described inThe Python Standard Library. TheGlossaryis also worth going through. 1. Whetting Your Appetite 2. Using the Python Interpreter2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding 2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode 2.1.1. Argument Passing 2.1.2. Interactive Mode 2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding 2.2.1. Source Code Encoding 3.", "start_char_idx": 0, "end_char_idx": 969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f083465f-cf9c-4869-81d4-1bbf2d46f452": {"__data__": {"id_": "f083465f-cf9c-4869-81d4-1bbf2d46f452", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_4.txt", "file_name": "python_1_chunk_4.txt", "file_type": "text/plain", "file_size": 992, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c332c74-57ba-4e64-88a1-b01b716f27ca", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_4.txt", "file_name": "python_1_chunk_4.txt", "file_type": "text/plain", "file_size": 992, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0c892a3fcea7eeaea9a075a6453b111ee13e1f16c6f28ff26632af12987c6d51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03e3a9a8-5eaf-4d86-892e-65c38ab0cb14", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_3.txt", "file_name": "python_1_chunk_3.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0d298205929c6a6efb560ded100989d8c049a945cab47905b2e5a38663858844", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4526c03-d1ab-4060-b7db-8bf07399b7e5", "node_type": "1", "metadata": {}, "hash": "9b491974346e449ccf5cce91a0ec8c5075c43187f35d95b50def1b16c3d79089", "class_name": "RelatedNodeInfo"}}, "text": "An Informal Introduction to Python3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists3.2. First Steps Towards Programming 3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists 3.1.1. Numbers 3.1.2. Text 3.1.3. Lists 3.2. First Steps Towards Programming 4. More Control Flow Tools4.1.ifStatements4.2.forStatements4.3. Therange()Function4.4.breakandcontinueStatements4.5.elseClauses on Loops4.6.passStatements4.7.matchStatements4.8. Defining Functions4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations4.10. Intermezzo: Coding Style 4.1.ifStatements if 4.2.forStatements for 4.3. Therange()Function range() 4.4.", "start_char_idx": 0, "end_char_idx": 992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4526c03-d1ab-4060-b7db-8bf07399b7e5": {"__data__": {"id_": "a4526c03-d1ab-4060-b7db-8bf07399b7e5", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_5.txt", "file_name": "python_1_chunk_5.txt", "file_type": "text/plain", "file_size": 994, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39237fdb-9768-47e4-af37-04b845bd2773", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_5.txt", "file_name": "python_1_chunk_5.txt", "file_type": "text/plain", "file_size": 994, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7000ccae6ed0a3b3b0bafb2a6ecad9a21d16a780f402a57b8559a505983e60c8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f083465f-cf9c-4869-81d4-1bbf2d46f452", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_4.txt", "file_name": "python_1_chunk_4.txt", "file_type": "text/plain", "file_size": 992, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0c892a3fcea7eeaea9a075a6453b111ee13e1f16c6f28ff26632af12987c6d51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d296e4e-2cff-403a-b2bc-0bcb83747579", "node_type": "1", "metadata": {}, "hash": "6741e281c7323ff7d73d494a7a04c7b44f628025b7bb2bb12ff0d66470b0aeb3", "class_name": "RelatedNodeInfo"}}, "text": "breakandcontinueStatements break continue 4.5.elseClauses on Loops else 4.6.passStatements pass 4.7.matchStatements match 4.8. Defining Functions 4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations 4.9.1. Default Argument Values 4.9.2. Keyword Arguments 4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap 4.9.3.1. Positional-or-Keyword Arguments 4.9.3.2. Positional-Only Parameters 4.9.3.3. Keyword-Only Arguments 4.9.3.4. Function Examples 4.9.3.5. Recap 4.9.4. Arbitrary Argument Lists 4.9.5. Unpacking Argument Lists 4.9.6.", "start_char_idx": 0, "end_char_idx": 994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d296e4e-2cff-403a-b2bc-0bcb83747579": {"__data__": {"id_": "1d296e4e-2cff-403a-b2bc-0bcb83747579", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_6.txt", "file_name": "python_1_chunk_6.txt", "file_type": "text/plain", "file_size": 990, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f62d4dfb-eb39-4deb-a624-2ac5a7eda9c3", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_6.txt", "file_name": "python_1_chunk_6.txt", "file_type": "text/plain", "file_size": 990, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd6a41c00866d5b628e55220c098996e8e211168896a1d818c4751ca13cf1931", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4526c03-d1ab-4060-b7db-8bf07399b7e5", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_5.txt", "file_name": "python_1_chunk_5.txt", "file_type": "text/plain", "file_size": 994, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7000ccae6ed0a3b3b0bafb2a6ecad9a21d16a780f402a57b8559a505983e60c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "205517b3-c17d-49be-bd71-55bf2e7ec3f5", "node_type": "1", "metadata": {}, "hash": "60b50427c262fceb39a8e08ad67bf71bfa5934aa27f58ad2441e4339a46e3259", "class_name": "RelatedNodeInfo"}}, "text": "Lambda Expressions 4.9.7. Documentation Strings 4.9.8. Function Annotations 4.10. Intermezzo: Coding Style 5. Data Structures5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions5.2. Thedelstatement5.3. Tuples and Sequences5.4. Sets5.5. Dictionaries5.6. Looping Techniques5.7. More on Conditions5.8. Comparing Sequences and Other Types 5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions 5.1.1. Using Lists as Stacks 5.1.2. Using Lists as Queues 5.1.3. List Comprehensions 5.1.4. Nested List Comprehensions 5.2. Thedelstatement del 5.3. Tuples and Sequences 5.4. Sets 5.5. Dictionaries 5.6. Looping Techniques 5.7. More on Conditions 5.8. Comparing Sequences and Other Types 6. Modules6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. \u201cCompiled\u201d Python files6.2. Standard Modules6.3.", "start_char_idx": 0, "end_char_idx": 986, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "205517b3-c17d-49be-bd71-55bf2e7ec3f5": {"__data__": {"id_": "205517b3-c17d-49be-bd71-55bf2e7ec3f5", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_7.txt", "file_name": "python_1_chunk_7.txt", "file_type": "text/plain", "file_size": 999, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f69eaa7c-ac1d-456d-bef9-f07c81eb6bd2", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_7.txt", "file_name": "python_1_chunk_7.txt", "file_type": "text/plain", "file_size": 999, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "786826703226723b672613eeb874e438155f20e2647f70d66903b05f700d4f34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d296e4e-2cff-403a-b2bc-0bcb83747579", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_6.txt", "file_name": "python_1_chunk_6.txt", "file_type": "text/plain", "file_size": 990, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd6a41c00866d5b628e55220c098996e8e211168896a1d818c4751ca13cf1931", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0186aa0e-ea03-47a0-8525-642b355df110", "node_type": "1", "metadata": {}, "hash": "e6da9999b03981330b0d9b28244dd36077399434de2c172f8812f104a083bccc", "class_name": "RelatedNodeInfo"}}, "text": "Thedir()Function6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories 6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. \u201cCompiled\u201d Python files 6.1.1. Executing modules as scripts 6.1.2. The Module Search Path 6.1.3. \u201cCompiled\u201d Python files 6.2. Standard Modules 6.3. Thedir()Function dir() 6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories 6.4.1. Importing * From a Package 6.4.2. Intra-package References 6.4.3. Packages in Multiple Directories 7. Input and Output7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3. Manual String Formatting7.1.4. Old string formatting7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson 7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3.", "start_char_idx": 0, "end_char_idx": 991, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0186aa0e-ea03-47a0-8525-642b355df110": {"__data__": {"id_": "0186aa0e-ea03-47a0-8525-642b355df110", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_8.txt", "file_name": "python_1_chunk_8.txt", "file_type": "text/plain", "file_size": 974, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56ea3e30-b164-4155-9f49-75dcc225187f", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_8.txt", "file_name": "python_1_chunk_8.txt", "file_type": "text/plain", "file_size": 974, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "53ae66b7b94b5271a118264c7c4e2cb92e6713b17b3d38625e629b0e970bdcb8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "205517b3-c17d-49be-bd71-55bf2e7ec3f5", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_7.txt", "file_name": "python_1_chunk_7.txt", "file_type": "text/plain", "file_size": 999, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "786826703226723b672613eeb874e438155f20e2647f70d66903b05f700d4f34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f15953d2-ae76-45da-a764-698d5fbf35a0", "node_type": "1", "metadata": {}, "hash": "a84b3c4ed962d0250e242c9899c2e48312d78bdb3bbe7b1c3e8cedea0cb70268", "class_name": "RelatedNodeInfo"}}, "text": "Manual String Formatting7.1.4. Old string formatting 7.1.1. Formatted String Literals 7.1.2. The String format() Method 7.1.3. Manual String Formatting 7.1.4. Old string formatting 7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson 7.2.1. Methods of File Objects 7.2.2. Saving structured data withjson json 8. Errors and Exceptions8.1. Syntax Errors8.2. Exceptions8.3. Handling Exceptions8.4. Raising Exceptions8.5. Exception Chaining8.6. User-defined Exceptions8.7. Defining Clean-up Actions8.8. Predefined Clean-up Actions8.9. Raising and Handling Multiple Unrelated Exceptions8.10. Enriching Exceptions with Notes 8.1. Syntax Errors 8.2. Exceptions 8.3. Handling Exceptions 8.4. Raising Exceptions 8.5. Exception Chaining 8.6. User-defined Exceptions 8.7. Defining Clean-up Actions 8.8. Predefined Clean-up Actions 8.9. Raising and Handling Multiple Unrelated Exceptions 8.10. Enriching Exceptions with Notes 9. Classes9.1.", "start_char_idx": 0, "end_char_idx": 974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f15953d2-ae76-45da-a764-698d5fbf35a0": {"__data__": {"id_": "f15953d2-ae76-45da-a764-698d5fbf35a0", "embedding": null, "metadata": {"file_path": "docs\\python\\python_1_chunk_9.txt", "file_name": "python_1_chunk_9.txt", "file_type": "text/plain", "file_size": 988, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5649fa11-562a-4ac3-9aaf-2552d483c9ea", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_1_chunk_9.txt", "file_name": "python_1_chunk_9.txt", "file_type": "text/plain", "file_size": 988, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8f6eab47c120b9abbc02b81cf6dc45ea98c2f30554ad8976807c94d0ce7e4015", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0186aa0e-ea03-47a0-8525-642b355df110", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_8.txt", "file_name": "python_1_chunk_8.txt", "file_type": "text/plain", "file_size": 974, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "53ae66b7b94b5271a118264c7c4e2cb92e6713b17b3d38625e629b0e970bdcb8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "caa6ad7c-73b1-4b18-8756-a51fbfccc297", "node_type": "1", "metadata": {}, "hash": "047ae34463a048d7b8057f3d93907b31d21165ff1a67761ff7f37aa10059466c", "class_name": "RelatedNodeInfo"}}, "text": "A Word About Names and Objects9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables9.4. Random Remarks9.5. Inheritance9.5.1. Multiple Inheritance9.6. Private Variables9.7. Odds and Ends9.8. Iterators9.9. Generators9.10. Generator Expressions 9.1. A Word About Names and Objects 9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example 9.2.1. Scopes and Namespaces Example 9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables 9.3.1. Class Definition Syntax 9.3.2. Class Objects 9.3.3. Instance Objects 9.3.4. Method Objects 9.3.5. Class and Instance Variables 9.4. Random Remarks 9.5. Inheritance9.5.1. Multiple Inheritance 9.5.1. Multiple Inheritance 9.6. Private Variables 9.7. Odds and Ends 9.8.", "start_char_idx": 0, "end_char_idx": 988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "caa6ad7c-73b1-4b18-8756-a51fbfccc297": {"__data__": {"id_": "caa6ad7c-73b1-4b18-8756-a51fbfccc297", "embedding": null, "metadata": {"file_path": "docs\\python\\python_2_chunk_1.txt", "file_name": "python_2_chunk_1.txt", "file_type": "text/plain", "file_size": 1013, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bc0546f-7e13-4378-a00f-9e367b6f4c14", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_2_chunk_1.txt", "file_name": "python_2_chunk_1.txt", "file_type": "text/plain", "file_size": 1013, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "17cb93285b42acca0ccc30f9b79974d856d3abde8b8d839f571f48628d555aa0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f15953d2-ae76-45da-a764-698d5fbf35a0", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_1_chunk_9.txt", "file_name": "python_1_chunk_9.txt", "file_type": "text/plain", "file_size": 988, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8f6eab47c120b9abbc02b81cf6dc45ea98c2f30554ad8976807c94d0ce7e4015", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "04cca8ee-6206-4ff1-91ac-85fd2fd4b857", "node_type": "1", "metadata": {}, "hash": "688b54b2c37eb4be008480cd42a2d35654251d130a50b31c580a96881daee170", "class_name": "RelatedNodeInfo"}}, "text": "Start Here Learn PythonPython Tutorials \u2192In-depth articles and video coursesLearning Paths \u2192Guided study plans for accelerated learningQuizzes & Exercises \u2192Check your learning progressBrowse Topics \u2192Focus on a specific area or skill levelCommunity Chat \u2192Learn with other PythonistasOffice Hours \u2192Live Q&A calls with Python expertsPodcast \u2192Hear what\u2019s new in the world of PythonBooks \u2192Round out your knowledge and learn offlineReference \u2192Concise definitions for common Python termsCode Mentor \u2192BetaPersonalized code assistance & learning toolsUnlock All Content \u2192 MoreLearner StoriesPython NewsletterPython Job BoardMeet the TeamBecome a Tutorial WriterBecome a Video Instructor Search Join Sign\u2011In Real Python Tutorials Nested Loops in Python Learn how to use nested loops in Python to iterate over multiple sequences and perform repeated actions efficiently in your programs. May 21, 2025basicspython \u2014 FREE Email Series \u2014 \ud83d\udc0d Python Tricks \ud83d\udc8c \ud83d\udd12 No spam. Unsubscribe any time.", "start_char_idx": 0, "end_char_idx": 974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04cca8ee-6206-4ff1-91ac-85fd2fd4b857": {"__data__": {"id_": "04cca8ee-6206-4ff1-91ac-85fd2fd4b857", "embedding": null, "metadata": {"file_path": "docs\\python\\python_2_chunk_2.txt", "file_name": "python_2_chunk_2.txt", "file_type": "text/plain", "file_size": 138, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa37605f-ff53-4961-94c0-8252501630ff", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_2_chunk_2.txt", "file_name": "python_2_chunk_2.txt", "file_type": "text/plain", "file_size": 138, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d7df309d3f3abd2a6950e8fad50080b2ac009fc960ed36b2f88a1e5d0660ff4b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "caa6ad7c-73b1-4b18-8756-a51fbfccc297", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_2_chunk_1.txt", "file_name": "python_2_chunk_1.txt", "file_type": "text/plain", "file_size": 1013, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "17cb93285b42acca0ccc30f9b79974d856d3abde8b8d839f571f48628d555aa0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51c11839-076c-4595-b5f6-02a882e5ed61", "node_type": "1", "metadata": {}, "hash": "e3dedcbf908880a1033e2275e5ca84444d5ab96dc34389bb4841f5c293f66ac0", "class_name": "RelatedNodeInfo"}}, "text": "Explore Real Python New Releases First Steps With LangChain May 20, 2025intermediatedatabasesdata-science How to Group Data Using Polars .", "start_char_idx": 0, "end_char_idx": 138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51c11839-076c-4595-b5f6-02a882e5ed61": {"__data__": {"id_": "51c11839-076c-4595-b5f6-02a882e5ed61", "embedding": null, "metadata": {"file_path": "docs\\python\\python_2_chunk_3.txt", "file_name": "python_2_chunk_3.txt", "file_type": "text/plain", "file_size": 1000, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1013b37-f220-4cb0-b83b-de3edffe3caf", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_2_chunk_3.txt", "file_name": "python_2_chunk_3.txt", "file_type": "text/plain", "file_size": 1000, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fda71d099dbf36b6e8679819c84f776839bbc5c9242e9080204c2b0f2e35743e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "04cca8ee-6206-4ff1-91ac-85fd2fd4b857", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_2_chunk_2.txt", "file_name": "python_2_chunk_2.txt", "file_type": "text/plain", "file_size": 138, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d7df309d3f3abd2a6950e8fad50080b2ac009fc960ed36b2f88a1e5d0660ff4b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61cc5b8f-b11f-456a-af58-0e3827faef2f", "node_type": "1", "metadata": {}, "hash": "4be59116ac847377159c477ebc0764423806d20145b82c6f8644d2dc9fe5514e", "class_name": "RelatedNodeInfo"}}, "text": "group_by() May 19, 2025intermediatedata-sciencepython How to Get the Most Out of PyCon US May 14, 2025careercommunity Working With Missing Data in Polars May 13, 2025intermediatedata-sciencepython Python's T-Strings Coming Soon and Other Python News for May 2025 May 12, 2025community How to Use Loguru for Simpler Python Logging May 07, 2025intermediatetools Using the Python subprocess Module May 06, 2025intermediate Sets in Python May 05, 2025basicspython Modern Web Automation With Python and Selenium Apr 30, 2025intermediateprojectstestingweb-scraping Thread Safety in Python: Locks and Other Techniques Apr 29, 2025intermediatepython Managing Python Projects With uv: An All-in-One Solution Apr 28, 2025intermediatetools Getting Started With Python IDLE Apr 23, 2025basicseditors MySQL Databases and Python Apr 22, 2025intermediatedatabasesdata-science How to Copy Objects in Python: Shallow vs Deep Copy Explained Apr 21, 2025advancedpython How to Exit Loops Early With the Python Break Keyw", "start_char_idx": 0, "end_char_idx": 1000, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61cc5b8f-b11f-456a-af58-0e3827faef2f": {"__data__": {"id_": "61cc5b8f-b11f-456a-af58-0e3827faef2f", "embedding": null, "metadata": {"file_path": "docs\\python\\python_2_chunk_4.txt", "file_name": "python_2_chunk_4.txt", "file_type": "text/plain", "file_size": 527, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "203bfee5-757c-4a11-8372-0a8b0da4181b", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_2_chunk_4.txt", "file_name": "python_2_chunk_4.txt", "file_type": "text/plain", "file_size": 527, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "348622e8d75ba7fef194a2386d95bbf3830e8142f04989ce6f2c604457857c2d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51c11839-076c-4595-b5f6-02a882e5ed61", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_2_chunk_3.txt", "file_name": "python_2_chunk_3.txt", "file_type": "text/plain", "file_size": 1000, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fda71d099dbf36b6e8679819c84f776839bbc5c9242e9080204c2b0f2e35743e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab7790fa-ee4b-4874-a830-ba1cb81c00af", "node_type": "1", "metadata": {}, "hash": "5f82d49181829fc85dcb323455d1da6648e3618242e9440d70f5c0f983f6825d", "class_name": "RelatedNodeInfo"}}, "text": "ord Apr 16, 2025basicspython Creating a Python Dice Roll Application Apr 15, 2025basicsprojects Namespaces in Python Apr 14, 2025intermediatepython Using Python's .__dict__ to Work With Attributes Apr 09, 2025advancedpython Start Here Learning Resources Code Mentor Python Reference Support Center Learning Paths Quizzes & Exercises Browse Topics Workshops Books Podcast Newsletter Community Chat Office Hours Learner Stories Plans & Pricing Team Plans For Business For Schools Reviews Team Sponsorships Careers Press Kit Merch", "start_char_idx": 0, "end_char_idx": 527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab7790fa-ee4b-4874-a830-ba1cb81c00af": {"__data__": {"id_": "ab7790fa-ee4b-4874-a830-ba1cb81c00af", "embedding": null, "metadata": {"file_path": "docs\\python\\python_3_chunk_1.txt", "file_name": "python_3_chunk_1.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a0456d6-33d3-463b-9625-436cf6d85169", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_3_chunk_1.txt", "file_name": "python_3_chunk_1.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "28c23151e42763f9f9591d5a52fdb0cdd50b8df291326b90b8fabc8476acd5bc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61cc5b8f-b11f-456a-af58-0e3827faef2f", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_2_chunk_4.txt", "file_name": "python_2_chunk_4.txt", "file_type": "text/plain", "file_size": 527, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "348622e8d75ba7fef194a2386d95bbf3830e8142f04989ce6f2c604457857c2d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00f86411-b0a2-41d6-af14-fddd6f95b5c1", "node_type": "1", "metadata": {}, "hash": "a1a06cfc419fcc452bf40ec3d2b5ec4bc15e038743f2a2c61321b3db30e680c5", "class_name": "RelatedNodeInfo"}}, "text": "Tutorials HTML and CSS Data Analytics Web Building JavaScript Web Building Backend Data Analytics Web Building Exercises HTML and CSS Data Analytics JavaScript Backend Data Analytics Certificates HTML and CSS Data Analytics Programs JavaScript Programs Programs Backend Data Analytics All Our Services W3Schools offers a wide range of services and products for beginners and professionals,helping millions of people everyday to learn and master new skills. Enjoy our free tutorials like millions of other internet users since 1999 Explore our selection of references covering all popular coding languages Create your own website withW3Schools Spaces- no setup required Test your skills with different exercises Test yourself with multiple choice questions Document your knowledge Create afreeW3Schools Account to Improve Your Learning Experience Track your learning progress at W3Schools and collect rewards Become a PLUS user and unlock powerful features (ad-free, hosting, support,..", "start_char_idx": 0, "end_char_idx": 985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00f86411-b0a2-41d6-af14-fddd6f95b5c1": {"__data__": {"id_": "00f86411-b0a2-41d6-af14-fddd6f95b5c1", "embedding": null, "metadata": {"file_path": "docs\\python\\python_3_chunk_2.txt", "file_name": "python_3_chunk_2.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cac3af8c-76df-4457-aa67-276a051d7c3a", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_3_chunk_2.txt", "file_name": "python_3_chunk_2.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ab3bfa7e8af8afd58f67239fb14f5d6da1c419d2720eb154a84772af73109652", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab7790fa-ee4b-4874-a830-ba1cb81c00af", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_3_chunk_1.txt", "file_name": "python_3_chunk_1.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "28c23151e42763f9f9591d5a52fdb0cdd50b8df291326b90b8fabc8476acd5bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e5cadc3-a459-4cc0-a22d-1b4f5e4bebc2", "node_type": "1", "metadata": {}, "hash": "f21b160c0d1ddaf206895f5da336f3a1a5e7596e568dcab40f59f86a7c167b07", "class_name": "RelatedNodeInfo"}}, "text": ") Not sure where you want to start? Follow our guided path With our online code editor, you can edit code and view the result in your browser Learn the basics of HTML in a fun and engaging video tutorial We have created a bunch of responsive website templates you can use - for free! Host your own website, and share it to the world withW3Schools Spaces Create your own server using Python, PHP, React.js, Node.js, Java, C#, etc. Large collection of code snippets for HTML, CSS and JavaScript Build fast and responsive sites using our freeW3.CSSframework Read long term trends of browser usage Test your typing speed Use our color picker to find different RGB, HEX and HSL colors. W3Schools Coding Game! Help the lynx collect pine cones Join our newsletter and get access to exclusive content every month Contact us about W3Schools Academy for educational institutions Contact us about W3Schools Academy for your organization About sales:sales@w3schools.comAbout errors:help@w3schools.", "start_char_idx": 0, "end_char_idx": 985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e5cadc3-a459-4cc0-a22d-1b4f5e4bebc2": {"__data__": {"id_": "4e5cadc3-a459-4cc0-a22d-1b4f5e4bebc2", "embedding": null, "metadata": {"file_path": "docs\\python\\python_3_chunk_3.txt", "file_name": "python_3_chunk_3.txt", "file_type": "text/plain", "file_size": 894, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19b1fb52-d09a-4659-b72f-217dccd8c104", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_3_chunk_3.txt", "file_name": "python_3_chunk_3.txt", "file_type": "text/plain", "file_size": 894, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c37736e0e9f113b73b6460f94812194cc5228dc4efe8a605a3c0220ffd487531", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00f86411-b0a2-41d6-af14-fddd6f95b5c1", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_3_chunk_2.txt", "file_name": "python_3_chunk_2.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ab3bfa7e8af8afd58f67239fb14f5d6da1c419d2720eb154a84772af73109652", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59041a62-54a9-46a4-a9a6-8c03b41038a8", "node_type": "1", "metadata": {}, "hash": "5309c24f9caa6c79ffcdc286e90107f5b43390882194f422b9e63a66e0daa768", "class_name": "RelatedNodeInfo"}}, "text": "com PythonTutorial File Handling Python Modules Python Matplotlib Machine Learning Python DSA Python MySQL Python MongoDB Python Reference Module Reference Python How To Python Examples PythonTutorial Learn Python Python is a popular programming language. Python can be used on a server to create web applications. Learning by Examples With our \"Try it Yourself\" editor, you can edit Python code and view the result. Example Click on the \"Try it Yourself\" button to see how it works. Python File Handling In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling Python Database Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Python Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge.", "start_char_idx": 0, "end_char_idx": 894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59041a62-54a9-46a4-a9a6-8c03b41038a8": {"__data__": {"id_": "59041a62-54a9-46a4-a9a6-8c03b41038a8", "embedding": null, "metadata": {"file_path": "docs\\python\\python_3_chunk_4.txt", "file_name": "python_3_chunk_4.txt", "file_type": "text/plain", "file_size": 904, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5b3ffd0-158b-4696-bb7f-bbef0705360c", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_3_chunk_4.txt", "file_name": "python_3_chunk_4.txt", "file_type": "text/plain", "file_size": 904, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "368b9e923d1330d09a2324b23c827f41e56c765c2d5ffd36f35dc9fe85855048", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e5cadc3-a459-4cc0-a22d-1b4f5e4bebc2", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_3_chunk_3.txt", "file_name": "python_3_chunk_3.txt", "file_type": "text/plain", "file_size": 894, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c37736e0e9f113b73b6460f94812194cc5228dc4efe8a605a3c0220ffd487531", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ea03d4d7-e05f-42b4-b70c-4344822d1626", "node_type": "1", "metadata": {}, "hash": "c0b91caa48a3b3381596401dae6efd448e7651f495145dcbba686fa9b878f552", "class_name": "RelatedNodeInfo"}}, "text": "See all Python Exercises Python Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Python Quiz Test your Python skills with a quiz. Python Quiz Track Your Progress View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note:This is an optional feature. You can study at W3Schools without creating an account. Python Reference You will also find complete function and method references: Reference Overview Built-in Functions String Methods List/Array Methods Dictionary Methods Tuple Methods Set Methods File Methods Python Keywords Python Exceptions Python Glossary Random Module Requests Module Math Module CMath Module Download Python Download Python from the official Python web site:https://python.", "start_char_idx": 0, "end_char_idx": 904, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea03d4d7-e05f-42b4-b70c-4344822d1626": {"__data__": {"id_": "ea03d4d7-e05f-42b4-b70c-4344822d1626", "embedding": null, "metadata": {"file_path": "docs\\python\\python_3_chunk_5.txt", "file_name": "python_3_chunk_5.txt", "file_type": "text/plain", "file_size": 322, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d7e5f23-8c6a-4b5f-a0db-af396b196a5d", "node_type": "4", "metadata": {"file_path": "docs\\python\\python_3_chunk_5.txt", "file_name": "python_3_chunk_5.txt", "file_type": "text/plain", "file_size": 322, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a1c3052b813316b8992f4e5e5a041a5eddb7d5876945e707c871cb07c439b9f8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59041a62-54a9-46a4-a9a6-8c03b41038a8", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_3_chunk_4.txt", "file_name": "python_3_chunk_4.txt", "file_type": "text/plain", "file_size": 904, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "368b9e923d1330d09a2324b23c827f41e56c765c2d5ffd36f35dc9fe85855048", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b320b6aa-5996-4021-a817-34f116f4aff7", "node_type": "1", "metadata": {}, "hash": "5b247d5de594fe2050c045f2b4a0257286fcb47616a02eb3c829ce527598a716", "class_name": "RelatedNodeInfo"}}, "text": "org Kickstart your career Get certified by completingthecourse Contact Sales If you want to use W3Schools services as an educational institution, team or enterprise, send us an e-mail:sales@w3schools.com Report Error If you want to report an error, or if you want to make a suggestion, send us an e-mail:help@w3schools.com", "start_char_idx": 0, "end_char_idx": 322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b320b6aa-5996-4021-a817-34f116f4aff7": {"__data__": {"id_": "b320b6aa-5996-4021-a817-34f116f4aff7", "embedding": null, "metadata": {"file_path": "docs\\python\\pythonbasics.org_16_0.txt", "file_name": "pythonbasics.org_16_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d2de8e3-c342-4751-a0b3-13be15e6c9e0", "node_type": "4", "metadata": {"file_path": "docs\\python\\pythonbasics.org_16_0.txt", "file_name": "pythonbasics.org_16_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1004adf5523cbfb8301c1ac5d6c514563948d76f8eea95ae058357b3e549719d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ea03d4d7-e05f-42b4-b70c-4344822d1626", "node_type": "1", "metadata": {"file_path": "docs\\python\\python_3_chunk_5.txt", "file_name": "python_3_chunk_5.txt", "file_type": "text/plain", "file_size": 322, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a1c3052b813316b8992f4e5e5a041a5eddb7d5876945e707c871cb07c439b9f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2dc1ce6-0adb-4d23-a11d-272f3396f05e", "node_type": "1", "metadata": {}, "hash": "5b247d5de594fe2050c045f2b4a0257286fcb47616a02eb3c829ce527598a716", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python Programming - Python Tutorial Learn Python Programming This site contains materials and exercises for the Python 3 programming language. In this course you will learn how to write code, the basics and see examples. Python is a programming language supports several programming paradigms including Object-Orientated Programming (OOP) and functional programming. Related course: Complete Python Programming Course & Exercises Table of Contents: Overview of articles and exercises: Introduction 7 reasons to learn Python Why Python is Awesome Learn Python Getting started Execute Python scripts Variables Strings Replace Join String find Split Random numbers Keyboard input Control structures If statements For Loops While loop Data and operations Functions List List operations Sort list Range function Dictionary Read file Write file Nested loops Slices Multiple return Scope time and date Try exception How to use pip and pypi OOP Class Constructor Getter and setter Modules Inheritance Static method Iterable Class method Multiple Inheritance Advanced Virtualenv Enumerate Pickle Regular Expressions JSON Read JSON file Decorators Web server Audio Play Sound Text to speech Convert MP3 to WAV Transcribe audio Tkinter Tkinter Tkinter button Tkinter menu Tkinter label Tkinter image Tkinter canvas tkinter checkbox tkinter entry tkinter filedialog tkinter frame tkinter listbox tkinter messagebox tkinter radiobutton tkinter scale Plotting Matplotlib Bar Chart Matplotlib Line Chart Seaborn Distplot Seaborn barplot Seaborn boxplot Seaborn heatmap Seaborn line plot Seaborn pairplot Seaborn palette Seaborn pandas Seaborn scatterplot Plotly PyQt PyQt Install pyqt PyQt Hello World PyQt Buttons PyQt QMessageBox PyQt grid QLineEdit PyQt QPixmap PyQt Combobox QCheckBox QSlider Progressbar PyQt table QVBoxLayout PyQt style Compile PyQt to exe QDial Qcheckbox Pyqt-radiobutton Pyqt-groupbox Pyqt-tooltip PyQt toolbox PyQt toolbar PyQt menubar PyQt tabwidget PyQt auto complete PyQt list box PyQt input dialog Qt designer python Machine Learning Data Science How to seriously start with Machine Learning and AI Why Python for Machine Learning? Machine Learning Libraries What is Machine Learning? Difference Machine Learning, Deep Learning and AI? Machine Learning Machine Learning Algorithms Comparison Why use Scikit-Learn? How to load Machine Learning Data in Python Machine Learning Classifier Machine Learning Regression Polynomial Regression in Python Decision Tree k-Nearest Neighbors Split Train Test Face Detection How to prepare your Data for Machine Learning with Scikit Learn Selenium Selenium browsers Selenium cookies Selenium execute javascript Selenium find element Selenium firefox headless Selenium firefox Selenium get html Selenium keyboard Selenium maximize Selenium screenshot Selenium scroll down Selenium switch to_window Selenium wait for page to load Flask Tutorial What is Flask Flask Tutorial - Hello World Flask Tutorial - Templates Flask Tutorial - Routes Python to Web Flask HTTP methods Flask Static Files Flask Template Data Flask cookies Flask sessions Flask redirect and errors Flask upload file Flask extensions Flask mail Flask SQLite Flask SQLAlchemy Flask Sijax Deploy Flask App Flask REST API Flask MongoDB Flask Login Flask boilerplate Pandas What is Pandas Pandas series Pandas Dataframe Read csv with pandas Read Excel Write Excel Pandas Web Scraping Pandas JSON Pandas iterate dataframe Web Development Python Web Frameworks Django Web App Flask vs Django Django Template Language About This is a collection of tutorials for the Python programming language. It covers many topics ranging from beginner level to professional level. I write about many things including web development, machine learning, web automation and various other topics. However, if you want to learn Python or are new to the world of programming, it can be quite though getting started. There are so many things to learn: coding, object orienated programming, building desktop apps, creating web apps with Flask or Django, learning how to plot and even how to use Machine Learning or Artificial Intelligence. You may have many questions or perhaps you don\u2019t know where to start, the book below helps you master Python in no time. Related course: Complete Python Programming Course & Exercises It helps you get started with Python, and makes learning Python a breathe. On top of that, many exercises and a video course is included with the book, making learning great fun.", "start_char_idx": 0, "end_char_idx": 4498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2dc1ce6-0adb-4d23-a11d-272f3396f05e": {"__data__": {"id_": "b2dc1ce6-0adb-4d23-a11d-272f3396f05e", "embedding": null, "metadata": {"file_path": "docs\\python\\pythonbasics.org_41_0.txt", "file_name": "pythonbasics.org_41_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cffc16df-9469-4c29-8220-b608c711ccff", "node_type": "4", "metadata": {"file_path": "docs\\python\\pythonbasics.org_41_0.txt", "file_name": "pythonbasics.org_41_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "dc871a15530691344e3c5e96792aad36f6d48074479bc5837e316a1338c2f56d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b320b6aa-5996-4021-a817-34f116f4aff7", "node_type": "1", "metadata": {"file_path": "docs\\python\\pythonbasics.org_16_0.txt", "file_name": "pythonbasics.org_16_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1004adf5523cbfb8301c1ac5d6c514563948d76f8eea95ae058357b3e549719d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6f71baf-ce1b-44e9-b7a1-4c0dc989f252", "node_type": "1", "metadata": {}, "hash": "bc47e4c77917f091bffd631696b3b2d9a9221930227890f16c9722d4912eabcf", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python Programming - Python Tutorial Learn Python Programming This site contains materials and exercises for the Python 3 programming language. In this course you will learn how to write code, the basics and see examples. Python is a programming language supports several programming paradigms including Object-Orientated Programming (OOP) and functional programming. Related course: Complete Python Programming Course & Exercises Table of Contents: Overview of articles and exercises: Introduction 7 reasons to learn Python Why Python is Awesome Learn Python Getting started Execute Python scripts Variables Strings Replace Join String find Split Random numbers Keyboard input Control structures If statements For Loops While loop Data and operations Functions List List operations Sort list Range function Dictionary Read file Write file Nested loops Slices Multiple return Scope time and date Try exception How to use pip and pypi OOP Class Constructor Getter and setter Modules Inheritance Static method Iterable Class method Multiple Inheritance Advanced Virtualenv Enumerate Pickle Regular Expressions JSON Read JSON file Decorators Web server Audio Play Sound Text to speech Convert MP3 to WAV Transcribe audio Tkinter Tkinter Tkinter button Tkinter menu Tkinter label Tkinter image Tkinter canvas tkinter checkbox tkinter entry tkinter filedialog tkinter frame tkinter listbox tkinter messagebox tkinter radiobutton tkinter scale Plotting Matplotlib Bar Chart Matplotlib Line Chart Seaborn Distplot Seaborn barplot Seaborn boxplot Seaborn heatmap Seaborn line plot Seaborn pairplot Seaborn palette Seaborn pandas Seaborn scatterplot Plotly PyQt PyQt Install pyqt PyQt Hello World PyQt Buttons PyQt QMessageBox PyQt grid QLineEdit PyQt QPixmap PyQt Combobox QCheckBox QSlider Progressbar PyQt table QVBoxLayout PyQt style Compile PyQt to exe QDial Qcheckbox Pyqt-radiobutton Pyqt-groupbox Pyqt-tooltip PyQt toolbox PyQt toolbar PyQt menubar PyQt tabwidget PyQt auto complete PyQt list box PyQt input dialog Qt designer python Machine Learning Data Science How to seriously start with Machine Learning and AI Why Python for Machine Learning? Machine Learning Libraries What is Machine Learning? Difference Machine Learning, Deep Learning and AI? Machine Learning Machine Learning Algorithms Comparison Why use Scikit-Learn? How to load Machine Learning Data in Python Machine Learning Classifier Machine Learning Regression Polynomial Regression in Python Decision Tree k-Nearest Neighbors Split Train Test Face Detection How to prepare your Data for Machine Learning with Scikit Learn Selenium Selenium browsers Selenium cookies Selenium execute javascript Selenium find element Selenium firefox headless Selenium firefox Selenium get html Selenium keyboard Selenium maximize Selenium screenshot Selenium scroll down Selenium switch to_window Selenium wait for page to load Flask Tutorial What is Flask Flask Tutorial - Hello World Flask Tutorial - Templates Flask Tutorial - Routes Python to Web Flask HTTP methods Flask Static Files Flask Template Data Flask cookies Flask sessions Flask redirect and errors Flask upload file Flask extensions Flask mail Flask SQLite Flask SQLAlchemy Flask Sijax Deploy Flask App Flask REST API Flask MongoDB Flask Login Flask boilerplate Pandas What is Pandas Pandas series Pandas Dataframe Read csv with pandas Read Excel Write Excel Pandas Web Scraping Pandas JSON Pandas iterate dataframe Web Development Python Web Frameworks Django Web App Flask vs Django Django Template Language About This is a collection of tutorials for the Python programming language. It covers many topics ranging from beginner level to professional level. I write about many things including web development, machine learning, web automation and various other topics. However, if you want to learn Python or are new to the world of programming, it can be quite though getting started. There are so many things to learn: coding, object orienated programming, building desktop apps, creating web apps with Flask or Django, learning how to plot and even how to use Machine Learning or Artificial Intelligence. You may have many questions or perhaps you don\u2019t know where to start, the book below helps you master Python in no time. Related course: Complete Python Programming Course & Exercises It helps you get started with Python, and makes learning Python a breathe. On top of that, many exercises and a video course is included with the book, making learning great fun.", "start_char_idx": 0, "end_char_idx": 4498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6f71baf-ce1b-44e9-b7a1-4c0dc989f252": {"__data__": {"id_": "c6f71baf-ce1b-44e9-b7a1-4c0dc989f252", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_0.txt", "file_name": "realpython.com_14_0.txt", "file_type": "text/plain", "file_size": 5286, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd762952-0014-418a-8ecf-470162a8d368", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_0.txt", "file_name": "realpython.com_14_0.txt", "file_type": "text/plain", "file_size": 5286, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "61d5f266819c56c8239dc5c8fe05edd299295ee9a8277d25a5f0c0e2f146712e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2dc1ce6-0adb-4d23-a11d-272f3396f05e", "node_type": "1", "metadata": {"file_path": "docs\\python\\pythonbasics.org_41_0.txt", "file_name": "pythonbasics.org_41_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "dc871a15530691344e3c5e96792aad36f6d48074479bc5837e316a1338c2f56d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e23c228-ed9a-428e-a6a9-e0eef0d261e1", "node_type": "1", "metadata": {}, "hash": "98304f081a9b87afd21da13eb90543725d6457c1cf3233869c2664dce14b6998", "class_name": "RelatedNodeInfo"}}, "text": "Object-Oriented Programming (OOP) in Python \u2013 Real Python Object-Oriented Programming (OOP) in Python by David Amos Dec 15, 2024 intermediate python Mark as Completed Share Table of Contents What Is Object-Oriented Programming in Python? How Do You Define a Class in Python? Classes vs Instances Class Definition How Do You Instantiate a Class in Python? Class and Instance Attributes Instance Methods How Do You Inherit From Another Class in Python? Example: Dog Park Parent Classes vs Child Classes Parent Class Functionality Extension Conclusion Frequently Asked Questions Remove ads Watch Now This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: Intro to Object-Oriented Programming (OOP) in Python Object-oriented programming (OOP) in Python helps you structure your code by grouping related data and behaviors into objects. You start by defining classes, which act as blueprints, and then create objects from them. OOP simplifies modeling real-world concepts in your programs and enables you to build systems that are more reusable and scalable. By the end of this tutorial, you\u2019ll understand that: Object-oriented programming in Python involves creating classes as blueprints for objects. These objects contain data and the methods needed to manipulate that data. The four key concepts of OOP in Python are encapsulation, inheritance, abstraction, and polymorphism. You create an object in Python by instantiating a class , which involves calling the class name followed by parentheses. Class inheritance in Python allows a class to inherit attributes and methods from another class, known as the parent class. You use super() in Python to call a method from the parent class, allowing you to extend or modify inherited behavior. You\u2019ll explore how to define classes, instantiate classes to create objects, and leverage inheritance to build robust systems in Python. Note: This tutorial is adapted from the chapter \u201cObject-Oriented Programming (OOP)\u201d in Python Basics: A Practical Introduction to Python 3 . The book uses Python\u2019s built-in IDLE editor to create and edit Python files and interact with the Python shell, so you\u2019ll see occasional references to IDLE throughout this tutorial. If you don\u2019t use IDLE, you can run the example code from the editor and environment of your choice. Get Your Code: Click here to download the free sample code that shows you how to do object-oriented programming with classes in Python 3. Take the Quiz: Test your knowledge with our interactive \u201cObject-Oriented Programming (OOP) in Python\u201d quiz. You\u2019ll receive a score upon completion to help you track your learning progress: Interactive Quiz Object-Oriented Programming (OOP) in Python Object-oriented programming (OOP) is a method of structuring a program by bundling related properties and behaviors into individual objects. What Is Object-Oriented Programming in Python? Object-oriented programming is a programming paradigm that provides a means of structuring programs so that properties and behaviors are bundled into individual objects . For example, an object could represent a person with properties like a name, age, and address and behaviors such as walking, talking, breathing, and running. Or it could represent an email with properties like a recipient list, subject, and body and behaviors like adding attachments and sending. Put another way, object-oriented programming is an approach for modeling concrete, real-world things, like cars, as well as relations between things, like companies and employees or students and teachers. OOP models real-world entities as software objects that have some data associated with them and can perform certain operations. OOP also exists in other programming languages and is often described to center around the four pillars, or four tenants of OOP : Encapsulation allows you to bundle data (attributes) and behaviors (methods) within a class to create a cohesive unit. By defining methods to control access to attributes and its modification, encapsulation helps maintain data integrity and promotes modular, secure code. Inheritance enables the creation of hierarchical relationships between classes, allowing a subclass to inherit attributes and methods from a parent class. This promotes code reuse and reduces duplication. Abstraction focuses on hiding implementation details and exposing only the essential functionality of an object. By enforcing a consistent interface, abstraction simplifies interactions with objects, allowing developers to focus on what an object does rather than how it achieves its functionality. Polymorphism allows you to treat objects of different types as instances of the same base type, as long as they implement a common interface or behavior. Python\u2019s duck typing make it especially suited for polymorphism, as it allows you to access attributes and methods on objects without needing to worry about their actual class. In this tutorial you\u2019ll take a practical approach to understanding OOP in Python. But keeping these four concepts of object-oriented programming in mind may help you to remember the information that you gather. The key takeaway is that objects are at the", "start_char_idx": 0, "end_char_idx": 5260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e23c228-ed9a-428e-a6a9-e0eef0d261e1": {"__data__": {"id_": "4e23c228-ed9a-428e-a6a9-e0eef0d261e1", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_1.txt", "file_name": "realpython.com_14_1.txt", "file_type": "text/plain", "file_size": 4564, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8e99237-77ac-464e-8904-3945f5912190", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_1.txt", "file_name": "realpython.com_14_1.txt", "file_type": "text/plain", "file_size": 4564, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7743379d9b5deddf233fb5b687c5d560df06e6f65353b52b4bf6d3f35183ad51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6f71baf-ce1b-44e9-b7a1-4c0dc989f252", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_0.txt", "file_name": "realpython.com_14_0.txt", "file_type": "text/plain", "file_size": 5286, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "61d5f266819c56c8239dc5c8fe05edd299295ee9a8277d25a5f0c0e2f146712e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f1ef21e-a47c-495e-9ccf-184e8e4fd5b7", "node_type": "1", "metadata": {}, "hash": "b872c78ec0c7b0489db161c9fbd4a00609ee940dbddae6899d2377cc8092b2e0", "class_name": "RelatedNodeInfo"}}, "text": "center of object-oriented programming in Python. In other programming paradigms, objects only represent the data. In OOP, they additionally inform the overall structure of the program. Remove ads How Do You Define a Class in Python? In Python, you define a class by using the class keyword followed by a name and a colon. Then you use .__init__() to declare which attributes each instance of the class should have: Python class Employee : def __init__ ( self , name , age ): self . name = name self . age = age But what does all of that mean? And why do you even need classes in the first place? Take a step back and consider using built-in, primitive data structures as an alternative. Primitive data structures\u2014like numbers , strings , and lists \u2014are designed to represent straightforward pieces of information, such as the cost of an apple, the name of a poem, or your favorite colors, respectively. What if you want to represent something more complex? For example, you might want to track employees in an organization. You need to store some basic information about each employee, such as their name, age, position, and the year they started working. One way to do this is to represent each employee as a list : Python kirk = [ \"James Kirk\" , 34 , \"Captain\" , 2265 ] spock = [ \"Spock\" , 35 , \"Science Officer\" , 2254 ] mccoy = [ \"Leonard McCoy\" , \"Chief Medical Officer\" , 2266 ] There are a number of issues with this approach. First, it can make larger code files more difficult to manage. If you reference kirk[0] several lines away from where you declared the kirk list, will you remember that the element with index 0 is the employee\u2019s name? Second, it can introduce errors if employees don\u2019t have the same number of elements in their respective lists. In the mccoy list above, the age is missing, so mccoy[1] will return \"Chief Medical Officer\" instead of Dr. McCoy\u2019s age. A great way to make this type of code more manageable and more maintainable is to use classes . Classes vs Instances Classes allow you to create user-defined data structures. Classes define functions called methods , which identify the behaviors and actions that an object created from the class can perform with its data. In this tutorial, you\u2019ll create a Dog class that stores some information about the characteristics and behaviors that an individual dog can have. A class is a blueprint for how to define something. It doesn\u2019t actually contain any data. The Dog class specifies that a name and an age are necessary for defining a dog, but it doesn\u2019t contain the name or age of any specific dog. While the class is the blueprint, an instance is an object that\u2019s built from a class and contains real data. An instance of the Dog class is not a blueprint anymore. It\u2019s an actual dog with a name, like Miles, who\u2019s four years old. Put another way, a class is like a form or questionnaire. An instance is like a form that you\u2019ve filled out with information. Just like many people can fill out the same form with their own unique information, you can create many instances from a single class. Class Definition You start all class definitions with the class keyword, then add the name of the class and a colon. Python will consider any code that you indent below the class definition as part of the class\u2019s body. Here\u2019s an example of a Dog class: Python dog.py class Dog : pass The body of the Dog class consists of a single statement: the pass keyword. Python programmers often use pass as a placeholder indicating where code will eventually go. It allows you to run this code without Python throwing an error. Note: Python class names are written in CapitalizedWords notation by convention. For example, a class for a specific breed of dog, like the Jack Russell Terrier, would be written as JackRussellTerrier . The Dog class isn\u2019t very interesting right now, so you\u2019ll spruce it up a bit by defining some properties that all Dog objects should have. There are several properties that you can choose from, including name, age, coat color, and breed. To keep the example small in scope, you\u2019ll just use name and age. You define the properties that all Dog objects must have in a method called .__init__() . Every time you create a new Dog object, .__init__() sets the initial state of the object by assigning the values of the object\u2019s properties. That is, .__init__() initializes each new instance of the class. You can give .__init__() any number of parameters, but the first parameter will always be a variable called self . When you create", "start_char_idx": 0, "end_char_idx": 4528, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f1ef21e-a47c-495e-9ccf-184e8e4fd5b7": {"__data__": {"id_": "5f1ef21e-a47c-495e-9ccf-184e8e4fd5b7", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_2.txt", "file_name": "realpython.com_14_2.txt", "file_type": "text/plain", "file_size": 4426, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "960c7773-c2d8-42cd-8893-9b543944b74e", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_2.txt", "file_name": "realpython.com_14_2.txt", "file_type": "text/plain", "file_size": 4426, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "15fc68c6735c724cb84ad8aad6ada0e038e6bb00fed87d298311cb34e27af4ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e23c228-ed9a-428e-a6a9-e0eef0d261e1", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_1.txt", "file_name": "realpython.com_14_1.txt", "file_type": "text/plain", "file_size": 4564, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7743379d9b5deddf233fb5b687c5d560df06e6f65353b52b4bf6d3f35183ad51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "896be9bc-1801-451b-b64f-3117cb484a66", "node_type": "1", "metadata": {}, "hash": "661873b85b309fb0b2f52bec13d9ec98be0ec0e95c0d3d9d50526893f92554ad", "class_name": "RelatedNodeInfo"}}, "text": "a new class instance, then Python automatically passes the instance to the self parameter in .__init__() so that Python can define the new attributes on the object. Update the Dog class with an .__init__() method that creates .name and .age attributes: Python dog.py class Dog : def __init__ ( self , name , age ): self . name = name self . age = age Make sure that you indent the .__init__() method\u2019s signature by four spaces, and the body of the method by eight spaces. This indentation is vitally important. It tells Python that the .__init__() method belongs to the Dog class. In the body of .__init__() , there are two statements using the self variable: self.name = name creates an attribute called name and assigns the value of the name parameter to it. self.age = age creates an attribute called age and assigns the value of the age parameter to it. Attributes created in .__init__() are called instance attributes . An instance attribute\u2019s value is specific to a particular instance of the class. All Dog objects have a name and an age, but the values for the name and age attributes will vary depending on the Dog instance. On the other hand, class attributes are attributes that have the same value for all class instances. You can define a class attribute by assigning a value to a variable name outside of .__init__() . For example, the following Dog class has a class attribute called species with the value \"Canis familiaris\" : Python dog.py class Dog : species = \"Canis familiaris\" def __init__ ( self , name , age ): self . name = name self . age = age You define class attributes directly beneath the first line of the class name and indent them by four spaces. You always need to assign them an initial value. When you create an instance of the class, then Python automatically creates and assigns class attributes to their initial values. Use class attributes to define properties that should have the same value for every class instance. Use instance attributes for properties that vary from one instance to another. Now that you have a Dog class, it\u2019s time to create some dogs! Remove ads How Do You Instantiate a Class in Python? Creating a new object from a class is called instantiating a class. You can create a new object by typing the name of the class, followed by opening and closing parentheses: Python >>> class Dog : ... pass ... >>> Dog () <__main__.Dog object at 0x106702d30> You first create a new Dog class with no attributes or methods, and then you instantiate the Dog class to create a Dog object. In the output above, you can see that you now have a new Dog object at 0x106702d30 . This funny-looking string of letters and numbers is a memory address that indicates where Python stores the Dog object in your computer\u2019s memory. Note that the address on your screen will be different. Now instantiate the Dog class a second time to create another Dog object: Python >>> Dog () <__main__.Dog object at 0x0004ccc90> The new Dog instance is located at a different memory address. That\u2019s because it\u2019s an entirely new instance and is completely unique from the first Dog object that you created. To see this another way, type the following: Python >>> a = Dog () >>> b = Dog () >>> a == b False In this code, you create two new Dog objects and assign them to the variables a and b . When you compare a and b using the == operator, the result is False . Even though a and b are both instances of the Dog class, they represent two distinct objects in memory. Class and Instance Attributes Now create a new Dog class with a class attribute called .species and two instance attributes called .name and .age : Python >>> class Dog : ... species = \"Canis familiaris\" ... def __init__ ( self , name , age ): ... self . name = name ... self . age = age ... To instantiate this Dog class, you need to provide values for name and age . If you don\u2019t, then Python raises a TypeError : Python >>> Dog () Traceback (most recent call last): ... TypeError : __init__() missing 2 required positional arguments: 'name' and 'age' To pass arguments to the name and age parameters, put values into the parentheses after the class name: Python >>> miles = Dog ( \"Miles\" , 4 ) >>> buddy = Dog ( \"Buddy\" , 9 ) This creates two new Dog instances\u2014one for a four-year-old dog named Miles and one for a nine-year-old dog named Buddy. The Dog class\u2019s .__init__() method has three parameters, so why are", "start_char_idx": 0, "end_char_idx": 4408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "896be9bc-1801-451b-b64f-3117cb484a66": {"__data__": {"id_": "896be9bc-1801-451b-b64f-3117cb484a66", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_3.txt", "file_name": "realpython.com_14_3.txt", "file_type": "text/plain", "file_size": 4317, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "252135e2-98fe-49b5-9cef-7cb7d5c52a32", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_3.txt", "file_name": "realpython.com_14_3.txt", "file_type": "text/plain", "file_size": 4317, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6b0730938438d1e3b2e860dbac1144b91e588cdd79e25a4ea578744ae6bec067", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f1ef21e-a47c-495e-9ccf-184e8e4fd5b7", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_2.txt", "file_name": "realpython.com_14_2.txt", "file_type": "text/plain", "file_size": 4426, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "15fc68c6735c724cb84ad8aad6ada0e038e6bb00fed87d298311cb34e27af4ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78421b7e-a77d-4e56-b6e4-17a2beb15ec8", "node_type": "1", "metadata": {}, "hash": "fef3f4b1afab460d258bc32b5b4353d446766ab5870ba965e108ad2786ac90eb", "class_name": "RelatedNodeInfo"}}, "text": "you only passing two arguments to it in the example? When you instantiate the Dog class, Python creates a new instance of Dog and passes it to the first parameter of .__init__() . This essentially removes the self parameter, so you only need to worry about the name and age parameters. Note: Behind the scenes, Python both creates and initializes a new object when you use this syntax. If you want to dive deeper, then you can read the dedicated tutorial about the Python class constructor . After you create the Dog instances, you can access their instance attributes using dot notation : Python >>> miles . name 'Miles' >>> miles . age 4 >>> buddy . name 'Buddy' >>> buddy . age 9 You can access class attributes the same way: Python >>> buddy . species 'Canis familiaris' One of the biggest advantages of using classes to organize data is that instances are guaranteed to have the attributes you expect. All Dog instances have .species , .name , and .age attributes, so you can use those attributes with confidence, knowing that they\u2019ll always return a value. Although the attributes are guaranteed to exist, their values can change dynamically: Python >>> buddy . age = 10 >>> buddy . age 10 >>> miles . species = \"Felis silvestris\" >>> miles . species 'Felis silvestris' In this example, you change the .age attribute of the buddy object to 10 . Then you change the .species attribute of the miles object to \"Felis silvestris\" , which is a species of cat. That makes Miles a pretty strange dog, but it\u2019s valid Python! The key takeaway here is that custom objects are mutable by default. An object is mutable if you can alter it dynamically. For example, lists and dictionaries are mutable, but strings and tuples are immutable . Remove ads Instance Methods Instance methods are functions that you define inside a class and can only call on an instance of that class. Just like .__init__() , an instance method always takes self as its first parameter. Open a new editor window in IDLE and type in the following Dog class: Python dog.py class Dog : species = \"Canis familiaris\" def __init__ ( self , name , age ): self . name = name self . age = age # Instance method def description ( self ): return f \" { self . name } is { self . age } years old\" # Another instance method def speak ( self , sound ): return f \" { self . name } says { sound } \" This Dog class has two instance methods: .description() returns a string displaying the name and age of the dog. .speak() has one parameter called sound and returns a string containing the dog\u2019s name and the sound that the dog makes. Save the modified Dog class to a file called dog.py and press F5 to run the program. Then open the interactive window and type the following to see your instance methods in action: Python >>> miles = Dog ( \"Miles\" , 4 ) >>> miles . description () 'Miles is 4 years old' >>> miles . speak ( \"Woof Woof\" ) 'Miles says Woof Woof' >>> miles . speak ( \"Bow Wow\" ) 'Miles says Bow Wow' In the above Dog class, .description() returns a string containing information about the Dog instance miles . When writing your own classes, it\u2019s a good idea to have a method that returns a string containing useful information about an instance of the class. However, .description() isn\u2019t the most Pythonic way of doing this. When you create a list object, you can use print() to display a string that looks like the list: Python >>> names = [ \"Miles\" , \"Buddy\" , \"Jack\" ] >>> print ( names ) ['Miles', 'Buddy', 'Jack'] Go ahead and print the miles object to see what output you get: Python >>> print ( miles ) <__main__.Dog object at 0x00aeff70> When you print miles , you get a cryptic-looking message telling you that miles is a Dog object at the memory address 0x00aeff70 . This message isn\u2019t very helpful. You can change what gets printed by defining a special instance method called .__str__() . In the editor window, change the name of the Dog class\u2019s .description() method to .__str__() : Python dog.py class Dog : # ... def __str__ ( self ): return f \" { self . name } is { self . age } years old\" Save the file and press F5 . Now, when you print miles , you get a much friendlier output: Python >>> miles = Dog ( \"Miles\" , 4 ) >>> print ( miles ) 'Miles is 4 years old' Methods like .__init__() and .__str__() are called dunder", "start_char_idx": 0, "end_char_idx": 4303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78421b7e-a77d-4e56-b6e4-17a2beb15ec8": {"__data__": {"id_": "78421b7e-a77d-4e56-b6e4-17a2beb15ec8", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_4.txt", "file_name": "realpython.com_14_4.txt", "file_type": "text/plain", "file_size": 4633, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5560e97-7bfd-45a6-8e72-7f72ce24ae3f", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_4.txt", "file_name": "realpython.com_14_4.txt", "file_type": "text/plain", "file_size": 4633, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "282ed1259f8f3fb49a9f5ac2d90898b4238073b9bdc73fe3914e9ec4009f21f4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "896be9bc-1801-451b-b64f-3117cb484a66", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_3.txt", "file_name": "realpython.com_14_3.txt", "file_type": "text/plain", "file_size": 4317, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6b0730938438d1e3b2e860dbac1144b91e588cdd79e25a4ea578744ae6bec067", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35f70f8e-5935-4ddb-b125-d152c4ea1f5a", "node_type": "1", "metadata": {}, "hash": "2a6d195f80056e1bb48b4d636283e34a201ed468e3c1ec0a6b18dd65a6be4e8e", "class_name": "RelatedNodeInfo"}}, "text": "methods because they begin and end with double underscores . There are many dunder methods that you can use to customize classes in Python. Understanding dunder methods is an important part of mastering object-oriented programming in Python, but for your first exploration of the topic, you\u2019ll stick with these two dunder methods. Note: Check out When Should You Use .__repr__() vs .__str__() in Python? to learn more about .__str__() and its cousin .__repr__() . If you want to reinforce your understanding with a practical exercise, then you can click on the block below and work on solving the challenge: Exercise: Create a Car Class Show/Hide Create a Car class with two instance attributes: .color , which stores the name of the car\u2019s color as a string .mileage , which stores the number of miles on the car as an integer Then create two Car objects\u2014a blue car with twenty thousand miles and a red car with thirty thousand miles\u2014and print out their colors and mileage. Your output should look like this: Shell The blue car has 20,000 miles The red car has 30,000 miles There are multiple ways to solve this challenge. To effectively practice what you\u2019ve learned so far, try to solve the task with the information about classes in Python that you\u2019ve gathered in this section. When you\u2019re done with your own implementation of the challenge, then you can expand the block below to see a possible solution: Solution: Create a Car Class Show/Hide First, create a Car class with .color and .mileage instance attributes, and a .__str__() method to format the display of objects when you pass them to print() : Python >>> class Car : ... def __init__ ( self , color , mileage ): ... self . color = color ... self . mileage = mileage ... def __str__ ( self ): ... return f \"The { self . color } car has { self . mileage : , } miles\" ... The color and mileage parameters of .__init__() are assigned to self.color and self.mileage , which creates the two instance attributes. The .__str__() method interpolates both instance attributes into an f-string and uses the :, format specifier to print the mileage grouped by thousands and separated with a comma. Now you can create the two Car instances: Python >>> blue_car = Car ( color = \"blue\" , mileage = 20_000 ) >>> red_car = Car ( color = \"red\" , mileage = 30_000 ) You create the blue_car instance by passing the value \"blue\" to the color parameter and 20_000 to the mileage parameter. Similarly, you create red_car with the values \"red\" and 30_000 . To print the color and mileage of each Car object, you can loop over a tuple containing both objects and print each object: Python >>> for car in ( blue_car , red_car ): ... print ( car ) ... The blue car has 20,000 miles The red car has 30,000 miles Because you\u2019ve defined their string representation in .__str__() , printing the objects gives you the desired text output. When you\u2019re ready, you can move on to the next section. There, you\u2019ll see how to take your knowledge one step further and create classes from other classes. Remove ads How Do You Inherit From Another Class in Python? Inheritance is the process by which one class takes on the attributes and methods of another. Newly formed classes are called child classes , and the classes that you derive child classes from are called parent classes . You inherit from a parent class by creating a new class and putting the name of the parent class into parentheses: Python inheritance.py class Parent : hair_color = \"brown\" class Child ( Parent ): pass In this minimal example, the child class Child inherits from the parent class Parent . Because child classes take on the attributes and methods of parent classes, Child.hair_color is also \"brown\" without your explicitly defining that. Note: This tutorial is adapted from the chapter \u201cObject-Oriented Programming (OOP)\u201d in Python Basics: A Practical Introduction to Python 3 . If you enjoy what you\u2019re reading, then be sure to check out the rest of the book and the learning path . You can also check out the Python Basics: Building Systems With Classes video course to reinforce the skills that you\u2019ll develop in this section of the tutorial. Child classes can override or extend the attributes and methods of parent classes. In other words, child classes inherit all of the parent\u2019s attributes and methods but can also specify attributes and methods that are unique to themselves. Although the analogy isn\u2019t perfect, you can think of object inheritance sort of like genetic inheritance. You may have inherited your hair color from your parents. It\u2019s an attribute that you were born with.", "start_char_idx": 0, "end_char_idx": 4599, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35f70f8e-5935-4ddb-b125-d152c4ea1f5a": {"__data__": {"id_": "35f70f8e-5935-4ddb-b125-d152c4ea1f5a", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_5.txt", "file_name": "realpython.com_14_5.txt", "file_type": "text/plain", "file_size": 4204, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b76dbb5-62a0-4922-8157-ce58c9c25211", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_5.txt", "file_name": "realpython.com_14_5.txt", "file_type": "text/plain", "file_size": 4204, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2523b4a290c44e36651e13c93950ca4243391296849d2784c2bbe6f822e7e01c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "78421b7e-a77d-4e56-b6e4-17a2beb15ec8", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_4.txt", "file_name": "realpython.com_14_4.txt", "file_type": "text/plain", "file_size": 4633, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "282ed1259f8f3fb49a9f5ac2d90898b4238073b9bdc73fe3914e9ec4009f21f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91444fbc-34e7-4bb5-b125-00db1ed71de8", "node_type": "1", "metadata": {}, "hash": "f9f5fc947d54ab49f448f60032287721810c215cfdf93e974b9461bef3d9c477", "class_name": "RelatedNodeInfo"}}, "text": "But maybe you decide to color your hair purple. Assuming that your parents don\u2019t have purple hair, you\u2019ve just overridden the hair color attribute that you inherited from your parents: Python inheritance.py class Parent : hair_color = \"brown\" class Child ( Parent ): hair_color = \"purple\" If you change the code example like this, then Child.hair_color will be \"purple\" . You also inherit, in a sense, your language from your parents. If your parents speak English, then you\u2019ll also speak English. Now imagine you decide to learn a second language, like German. In this case, you\u2019ve extended your attributes because you\u2019ve added an attribute that your parents don\u2019t have: Python inheritance.py class Parent : speaks = [ \"English\" ] class Child ( Parent ): def __init__ ( self ): super () . __init__ () self . speaks . append ( \"German\" ) You\u2019ll learn more about how the code above works in the sections below. But before you dive deeper into inheritance in Python, you\u2019ll take a walk to a dog park to better understand why you might want to use inheritance in your own code. Example: Dog Park Pretend for a moment that you\u2019re at a dog park. There are many dogs of different breeds at the park, all engaging in various dog behaviors. Suppose now that you want to model the dog park with Python classes. The Dog class that you wrote in the previous section can distinguish dogs by name and age but not by breed. You could modify the Dog class in the editor window by adding a .breed attribute: Python dog.py class Dog : species = \"Canis familiaris\" def __init__ ( self , name , age , breed ): self . name = name self . age = age self . breed = breed def __str__ ( self ): return f \" { self . name } is { self . age } years old\" def speak ( self , sound ): return f \" { self . name } says { sound } \" Press F5 to save the file. Now you can model the dog park by creating a bunch of different dogs in the interactive window: Python >>> miles = Dog ( \"Miles\" , 4 , \"Jack Russell Terrier\" ) >>> buddy = Dog ( \"Buddy\" , 9 , \"Dachshund\" ) >>> jack = Dog ( \"Jack\" , 3 , \"Bulldog\" ) >>> jim = Dog ( \"Jim\" , 5 , \"Bulldog\" ) Each breed of dog has slightly different behaviors. For example, bulldogs have a low bark that sounds like woof , but dachshunds have a higher-pitched bark that sounds more like yap . Using just the Dog class, you must supply a string for the sound argument of .speak() every time you call it on a Dog instance: Python >>> buddy . speak ( \"Yap\" ) 'Buddy says Yap' >>> jim . speak ( \"Woof\" ) 'Jim says Woof' >>> jack . speak ( \"Woof\" ) 'Jack says Woof' Passing a string to every call to .speak() is repetitive and inconvenient. Moreover, the .breed attribute should determine the string representing the sound that each Dog instance makes, but here you have to manually pass the correct string to .speak() every time you call it. You can simplify the experience of working with the Dog class by creating a child class for each breed of dog. This allows you to extend the functionality that each child class inherits, including specifying a default argument for .speak() . Remove ads Parent Classes vs Child Classes In this section, you\u2019ll create a child class for each of the three breeds mentioned above: Jack Russell terrier, dachshund, and bulldog. For reference, here\u2019s the full definition of the Dog class that you\u2019re currently working with: Python dog.py class Dog : species = \"Canis familiaris\" def __init__ ( self , name , age ): self . name = name self . age = age def __str__ ( self ): return f \" { self . name } is { self . age } years old\" def speak ( self , sound ): return f \" { self . name } says { sound } \" After doing the dog park example in the previous section, you\u2019ve removed .breed again. You\u2019ll now write code to keep track of a dog\u2019s breed using child classes instead. To create a child class, you create a new class with its own name and then put the name of the parent class in parentheses. Add the following to the dog.py file to create three new child classes of the Dog class: Python dog.py # ... class JackRussellTerrier ( Dog ): pass class Dachshund ( Dog ): pass class Bulldog ( Dog ): pass Press F5 to save and run the file. With", "start_char_idx": 0, "end_char_idx": 4174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91444fbc-34e7-4bb5-b125-00db1ed71de8": {"__data__": {"id_": "91444fbc-34e7-4bb5-b125-00db1ed71de8", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0bbf9f34-961f-45b3-98a9-59b77218051a", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e1350ae8da9f53ca0f687992e8024901dc0bb7b156507193b85ef4978000fc1e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35f70f8e-5935-4ddb-b125-d152c4ea1f5a", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_5.txt", "file_name": "realpython.com_14_5.txt", "file_type": "text/plain", "file_size": 4204, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2523b4a290c44e36651e13c93950ca4243391296849d2784c2bbe6f822e7e01c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae8ea22d-47b3-46e4-80ab-adc79986572c", "node_type": "1", "metadata": {}, "hash": "46582675aa2bdf9ba573def93fd9c4e702ce3a4c91dc0bef0f5cc2346b34f3f5", "class_name": "RelatedNodeInfo"}}, "text": "the child classes defined, you can now create some dogs of specific breeds in the interactive window: Python >>> miles = JackRussellTerrier ( \"Miles\" , 4 ) >>> buddy = Dachshund ( \"Buddy\" , 9 ) >>> jack = Bulldog ( \"Jack\" , 3 ) >>> jim = Bulldog ( \"Jim\" , 5 ) Instances of child classes inherit all of the attributes and methods of the parent class: Python >>> miles . species 'Canis familiaris' >>> buddy . name 'Buddy' >>> print ( jack ) Jack is 3 years old >>> jim . speak ( \"Woof\" ) 'Jim says Woof' To determine which class a given object belongs to, you can use the built-in type() : Python >>> type ( miles ) <class '__main__.JackRussellTerrier'> What if you want to determine if miles is also an instance of the Dog class? You can do this with the built-in isinstance() : Python >>> isinstance ( miles , Dog ) True Notice that isinstance() takes two arguments, an object and a class. In the example above, isinstance() checks if miles is an instance of the Dog class and returns True . The miles , buddy , jack , and jim objects are all Dog instances, but miles isn\u2019t a Bulldog instance, and jack isn\u2019t a Dachshund instance: Python >>> isinstance ( miles , Bulldog ) False >>> isinstance ( jack , Dachshund ) False More generally, all objects created from a child class are instances of the parent class, although they may not be instances of other child classes. Now that you\u2019ve created child classes for some different breeds of dogs, you can give each breed its own sound. Remove ads Parent Class Functionality Extension Since different breeds of dogs have slightly different barks, you want to provide a default value for the sound argument of their respective .speak() methods. To do this, you need to override .speak() in the class definition for each breed. To override a method defined on the parent class, you define a method with the same name on the child class. Here\u2019s what that looks like for the JackRussellTerrier class: Python dog.py # ... class JackRussellTerrier ( Dog ): def speak ( self , sound = \"Arf\" ): return f \" { self . name } says { sound } \" # ... Now .speak() is defined on the JackRussellTerrier class with the default argument for sound set to \"Arf\" . Update dog.py with the new JackRussellTerrier class and press F5 to save and run the file. You can now call .speak() on a JackRussellTerrier instance without passing an argument to sound : Python >>> miles = JackRussellTerrier ( \"Miles\" , 4 ) >>> miles . speak () 'Miles says Arf' Sometimes dogs make different noises, so if Miles gets angry and growls, you can still call .speak() with a different sound: Python >>> miles . speak ( \"Grrr\" ) 'Miles says Grrr' One thing to keep in mind about class inheritance is that changes to the parent class automatically propagate to child classes. This occurs as long as the attribute or method being changed isn\u2019t overridden in the child class. For example, in the editor window, change the string returned by .speak() in the Dog class: Python dog.py class Dog : # ... def speak ( self , sound ): return f \" { self . name } barks: { sound } \" # ... Save the file and press F5 . Now, when you create a new Bulldog instance named jim , jim.speak() returns the new string: Python >>> jim = Bulldog ( \"Jim\" , 5 ) >>> jim . speak ( \"Woof\" ) 'Jim barks: Woof' However, calling .speak() on a JackRussellTerrier instance won\u2019t show the new style of output: Python >>> miles = JackRussellTerrier ( \"Miles\" , 4 ) >>> miles . speak () 'Miles says Arf' Sometimes it makes sense to completely override a method from a parent class. But in this case, you don\u2019t want the JackRussellTerrier class to lose any changes that you might make to the formatting of the Dog.speak() output string. To do this, you still need to define a .speak() method on the child JackRussellTerrier class.", "start_char_idx": 0, "end_char_idx": 3797, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae8ea22d-47b3-46e4-80ab-adc79986572c": {"__data__": {"id_": "ae8ea22d-47b3-46e4-80ab-adc79986572c", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0bbf9f34-961f-45b3-98a9-59b77218051a", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e1350ae8da9f53ca0f687992e8024901dc0bb7b156507193b85ef4978000fc1e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91444fbc-34e7-4bb5-b125-00db1ed71de8", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "387157507c29f037f3d7373383a84c2492e17e3124c4bcc3750b378e3539523d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d59ca20c-8ac3-421a-aa3a-b92349060e73", "node_type": "1", "metadata": {}, "hash": "1b7fcc217e2b165ca5207b9b7155f654a2db100eee3812f5c1ea0b804c153192", "class_name": "RelatedNodeInfo"}}, "text": "Now, when you create a new Bulldog instance named jim , jim.speak() returns the new string: Python >>> jim = Bulldog ( \"Jim\" , 5 ) >>> jim . speak ( \"Woof\" ) 'Jim barks: Woof' However, calling .speak() on a JackRussellTerrier instance won\u2019t show the new style of output: Python >>> miles = JackRussellTerrier ( \"Miles\" , 4 ) >>> miles . speak () 'Miles says Arf' Sometimes it makes sense to completely override a method from a parent class. But in this case, you don\u2019t want the JackRussellTerrier class to lose any changes that you might make to the formatting of the Dog.speak() output string. To do this, you still need to define a .speak() method on the child JackRussellTerrier class. But instead of explicitly defining the output string, you need to call the Dog class\u2019s .speak() from inside the child class\u2019s .speak() using the same arguments that you passed to JackRussellTerrier.speak() . You can access the parent class from inside a method of a child class by using super() : Python dog.py # ... class JackRussellTerrier ( Dog ): def speak ( self , sound = \"Arf\" ): return super () . speak ( sound ) # ... When you call super().speak(sound) inside JackRussellTerrier , Python searches the parent class, Dog , for a .speak() method and calls it with the", "start_char_idx": 3109, "end_char_idx": 4371, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d59ca20c-8ac3-421a-aa3a-b92349060e73": {"__data__": {"id_": "d59ca20c-8ac3-421a-aa3a-b92349060e73", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_7.txt", "file_name": "realpython.com_14_7.txt", "file_type": "text/plain", "file_size": 4838, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb1b728f-cf38-4444-8ea0-64207eb1585e", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_7.txt", "file_name": "realpython.com_14_7.txt", "file_type": "text/plain", "file_size": 4838, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d6057e5e2c865f0f96571559c597fff82895c726d8a6ce92781d2a32ca709ff3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae8ea22d-47b3-46e4-80ab-adc79986572c", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c1cef33f85497e477f3ca3e16e1ff176ea81e6f26862c5e5b85d92674298e189", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7eb506e1-7ac2-4847-8c80-e483d6ec031f", "node_type": "1", "metadata": {}, "hash": "442572a4a23622e945f6c81a12eee2569f83bc11ce4bb121346cfe8e0f9f0faf", "class_name": "RelatedNodeInfo"}}, "text": "variable sound . Update dog.py with the new JackRussellTerrier class. Save the file and press F5 so you can test it in the interactive window: Python >>> miles = JackRussellTerrier ( \"Miles\" , 4 ) >>> miles . speak () 'Miles barks: Arf' Now when you call miles.speak() , you\u2019ll see output reflecting the new formatting in the Dog class. Note: In the above examples, the class hierarchy is very straightforward. The JackRussellTerrier class has a single parent class, Dog . In real-world examples, the class hierarchy can get quite complicated. The super() function does much more than just search the parent class for a method or an attribute. It traverses the entire class hierarchy for a matching method or attribute. If you aren\u2019t careful, super() can have surprising results. If you want to check your understanding of the concepts that you learned about in this section with a practical exercise, then you can click on the block below and work on solving the challenge: Exercise: Class Inheritance Show/Hide Start with the following code for your parent Dog class: Python dog.py class Dog : species = \"Canis familiaris\" def __init__ ( self , name , age ): self . name = name self . age = age def __str__ ( self ): return f \" { self . name } is { self . age } years old\" def speak ( self , sound ): return f \" { self . name } says { sound } \" Create a GoldenRetriever class that inherits from the Dog class. Give the sound argument of GoldenRetriever.speak() a default value of \"Bark\" . When you\u2019re done with your own implementation of the challenge, then you can expand the block below to see a possible solution: Solution: Class Inheritance Show/Hide Create a class called GoldenRetriever that inherits from the Dog class and overrides the .speak() method: Python dog.py # ... class GoldenRetriever ( Dog ): def speak ( self , sound = \"Bark\" ): return super () . speak ( sound ) You give \"Bark\" as the default value to the sound parameter in GoldenRetriever.speak() . Then you use super() to call the .speak() method of the parent class with the same argument passed to sound as the GoldenRetriever class\u2019s .speak() method. Nice work! In this section, you\u2019ve learned how to override and extend methods from a parent class, and you worked on a small practical example to cement your new skills. Remove ads Conclusion In this tutorial, you learned about object-oriented programming (OOP) in Python. Many modern programming languages, such as Java , C# , and C++ , follow OOP principles, so the knowledge that you gained here will be applicable no matter where your programming career takes you. In this tutorial, you learned how to: Define a class , which is a sort of blueprint for an object Instantiate a class to create an object Use attributes and methods to define the properties and behaviors of an object Use inheritance to create child classes from a parent class Reference a method on a parent class using super() Check if an object inherits from another class using isinstance() If you enjoyed what you learned in this sample from Python Basics: A Practical Introduction to Python 3 , then be sure to check out the rest of the book and take a look at our Introduction to Python learning path. Take the Quiz: Test your knowledge with our interactive \u201cObject-Oriented Programming (OOP) in Python\u201d quiz. You\u2019ll receive a score upon completion to help you track your learning progress: Interactive Quiz Object-Oriented Programming (OOP) in Python Object-oriented programming (OOP) is a method of structuring a program by bundling related properties and behaviors into individual objects. Frequently Asked Questions Now that you have some experience with object-oriented programming in Python, you can use the questions and answers below to check your understanding and recap what you\u2019ve learned. These FAQs are related to the most important concepts you\u2019ve covered in this tutorial. Click the Show/Hide toggle beside each question to reveal the answer. What is object-oriented programming in Python? Show/Hide Object-oriented programming in Python is a programming paradigm that structures programs by bundling related properties and behaviors into individual objects, allowing you to model real-world entities with properties and behaviors. What are the four pillars of object-oriented programming in Python? Show/Hide The four pillars of object-oriented programming in Python are encapsulation, inheritance, abstraction, and polymorphism. These principles help you organize code into objects that bundle data and functionality together. How do you define a class in Python? Show/Hide You define a class in Python using the class keyword followed by the class name and a colon. Then you write an .__init__() method to define the attributes each instance should have. What is the purpose of class inheritance", "start_char_idx": 0, "end_char_idx": 4818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7eb506e1-7ac2-4847-8c80-e483d6ec031f": {"__data__": {"id_": "7eb506e1-7ac2-4847-8c80-e483d6ec031f", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_14_8.txt", "file_name": "realpython.com_14_8.txt", "file_type": "text/plain", "file_size": 3167, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff8a2444-251d-470b-b581-155046079df4", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_14_8.txt", "file_name": "realpython.com_14_8.txt", "file_type": "text/plain", "file_size": 3167, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e66fd20a2d6bd5865f129c316e87d9e8ae7c320a09beb3f999747d260f8f176c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d59ca20c-8ac3-421a-aa3a-b92349060e73", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_7.txt", "file_name": "realpython.com_14_7.txt", "file_type": "text/plain", "file_size": 4838, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d6057e5e2c865f0f96571559c597fff82895c726d8a6ce92781d2a32ca709ff3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6bd1f4c-d20e-45c2-bc56-974c7b3e49f3", "node_type": "1", "metadata": {}, "hash": "796f184d438eed76a6c9f95547b56af300a658f30392b52d6ee9abc93430e9ba", "class_name": "RelatedNodeInfo"}}, "text": "in Python? Show/Hide Class inheritance allows you to create a new child class that inherits attributes and methods from an existing parent class. This enables code reuse and the extension or modification of existing functionality from the parent class. How can you instantiate a class in Python? Show/Hide You instantiate a class in Python by calling the class name followed by parentheses, optionally passing any required arguments to create an instance of the class. What is the difference between class attributes and instance attributes in Python? Show/Hide Class attributes are shared across all instances of a class, while instance attributes are unique to each instance, allowing individual objects to have their own attribute values. Mark as Completed Share Watch Now This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: Intro to Object-Oriented Programming (OOP) in Python \ud83d\udc0d Python Tricks \ud83d\udc8c Get a short & sweet Python Trick delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team. About David Amos David is a writer, programmer, and mathematician passionate about exploring mathematics through code. \u00bb More about David Each tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are: Aldren Brenda Geir Arne Joanna Jacob Kate Martin Master Real-World Python Skills With Unlimited Access to Real Python Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas: Level Up Your Python Skills \u00bb Master Real-World Python Skills With Unlimited Access to Real Python Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas: Level Up Your Python Skills \u00bb What Do You Think? Rate this article: LinkedIn Twitter Bluesky Facebook Email What\u2019s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know. Commenting Tips: The most useful comments are those written with the goal of learning from or helping out other students. Get tips for asking good questions and get answers to common questions in our support portal . Looking for a real-time conversation? Visit the Real Python Community Chat or join the next \u201cOffice Hours\u201d Live Q&A Session . Happy Pythoning! Keep Learning Related Topics: intermediate python Recommended Video Course: Intro to Object-Oriented Programming (OOP) in Python Related Tutorials: Python Classes: The Power of Object-Oriented Programming Primer on Python Decorators Inheritance and Composition: A Python OOP Guide Duck Typing in Python: Writing Flexible and Decoupled Code Python Class Constructors: Control Your Object Instantiation Keep reading Real Python by creating a free account or signing in: Continue \u00bb Already have an account? Sign-In Almost there! Complete this form and click the button below to gain instant access: \u00d7 Object-Oriented Programming in Python 3 (Sample Code)", "start_char_idx": 0, "end_char_idx": 3150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6bd1f4c-d20e-45c2-bc56-974c7b3e49f3": {"__data__": {"id_": "e6bd1f4c-d20e-45c2-bc56-974c7b3e49f3", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_1_0.txt", "file_name": "realpython.com_1_0.txt", "file_type": "text/plain", "file_size": 2553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f4930ee-9d0f-41b9-b67b-244e77c7e1da", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_1_0.txt", "file_name": "realpython.com_1_0.txt", "file_type": "text/plain", "file_size": 2553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "407972674ea6ba6cc41b8df467e9019a028931aea0c0a746dc719901156f8343", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7eb506e1-7ac2-4847-8c80-e483d6ec031f", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_14_8.txt", "file_name": "realpython.com_14_8.txt", "file_type": "text/plain", "file_size": 3167, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e66fd20a2d6bd5865f129c316e87d9e8ae7c320a09beb3f999747d260f8f176c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a770008-ca77-4756-b1d9-730371d78e6a", "node_type": "1", "metadata": {}, "hash": "a9767cae128c2e3ac059840a946cf79f6f5eb4d47174fc8e85a1fe0207a5f5c2", "class_name": "RelatedNodeInfo"}}, "text": "Python Tutorials \u2013 Real Python Real Python Tutorials NEW Nested Loops in Python Learn how to use nested loops in Python to iterate over multiple sequences and perform repeated actions efficiently in your programs. May 21, 2025 basics python Browse Topics Guided Learning Paths Basics Intermediate Advanced api best-practices career community databases data-science data-structures data-viz devops django docker editors flask front-end gamedev gui machine-learning numpy projects python testing tools web-dev web-scraping Explore Real Python Learning Paths Guided study plans for accelerated learning Python Tutorials In-depth articles and step-by-step video courses Quizzes & Exercises Evaluate your Python knowledge with quick tests Browse Topics Focus on a specific area or skill level Community Chat Learn with other Pythonistas Office Hours Live Q&A calls with experts from Real Python Podcast Hear what\u2019s new in the world of Python Books Round out your knowledge and learn offline Reference Concise definitions for common Python terms Code Mentor Beta Personalized code assistance & intelligent learning tools Search \u00bb New Releases View All \u00bb First Steps With LangChain May 20, 2025 intermediate databases data-science How to Group Data Using Polars .group_by() May 19, 2025 intermediate data-science python How to Get the Most Out of PyCon US May 14, 2025 career community Working With Missing Data in Polars May 13, 2025 intermediate data-science python Python's T-Strings Coming Soon and Other Python News for May 2025 May 12, 2025 community How to Use Loguru for Simpler Python Logging May 07, 2025 intermediate tools Remove ads Using the Python subprocess Module May 06, 2025 intermediate Sets in Python May 05, 2025 basics python Modern Web Automation With Python and Selenium Apr 30, 2025 intermediate projects testing web-scraping Thread Safety in Python: Locks and Other Techniques Apr 29, 2025 intermediate python Managing Python Projects With uv: An All-in-One Solution Apr 28, 2025 intermediate tools Getting Started With Python IDLE Apr 23, 2025 basics editors MySQL Databases and Python Apr 22, 2025 intermediate databases data-science How to Copy Objects in Python: Shallow vs Deep Copy Explained Apr 21, 2025 advanced python How to Exit Loops Early With the Python Break Keyword Apr 16, 2025 basics python Creating a Python Dice Roll Application Apr 15, 2025 basics projects Namespaces in Python Apr 14, 2025 intermediate python Using Python's .__dict__ to Work With Attributes Apr 09, 2025 advanced python Load More Search \u00bb", "start_char_idx": 0, "end_char_idx": 2546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a770008-ca77-4756-b1d9-730371d78e6a": {"__data__": {"id_": "7a770008-ca77-4756-b1d9-730371d78e6a", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_34_0.txt", "file_name": "realpython.com_34_0.txt", "file_type": "text/plain", "file_size": 5266, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b10fd78-ee1c-401a-a427-5efbf3fdce1e", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_34_0.txt", "file_name": "realpython.com_34_0.txt", "file_type": "text/plain", "file_size": 5266, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ec2bfe03320701bc6a7ae3a862fbec7f539235a3ba315924e6ef729713aa2ed4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6bd1f4c-d20e-45c2-bc56-974c7b3e49f3", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_1_0.txt", "file_name": "realpython.com_1_0.txt", "file_type": "text/plain", "file_size": 2553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "407972674ea6ba6cc41b8df467e9019a028931aea0c0a746dc719901156f8343", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "276af1d0-7795-4cfe-aabe-03a55db49d6d", "node_type": "1", "metadata": {}, "hash": "10bb33f644c12272bfc6922317bd60ccebeb2785a9d05a7560cd4881d7feb548", "class_name": "RelatedNodeInfo"}}, "text": "Django Tutorials \u2013 Real Python Django Tutorials What is Django? Django is a high-level Python Web framework that encourages rapid development and clean pragmatic design. A Web framework is a set of components that provide a standard way to develop websites fast and easily. Django\u2019s primary goal is to ease the creation of complex database-driven websites. Some well known sites that use Django include PBS, Instagram, Disqus, Washington Times, Bitbucket and Mozilla. What will you find here? If you\u2019re new to Django, we recommend starting with the Real Python course to get a firm foundation in web development in Python. The tutorials in this section are intermediate to advanced articles that cover key aspects of Django development such as: Testing Django applications. Testing is vital. The articles on testing will introduce you to unit and integration testing for your Django applications. You will also learn about the different packages and libraries available to assist with writing and running test suites. REST API Learn how to create RESTFul APIs using the Django Rest Framework(DRF), an application used for rapidly building RESTful APIs based on Django models. Best practices Learn Django best practices, recommended workflow, project structure and also how to avoid common pitfalls when building Django projects. Deployment When your application is ready to leave the room and be deployed, the tutorials and articles on deployment will cover deployment options available to you and how to deploy your site to each one. Caching Fast page loads improve the experience of visiting your site. Here you\u2019ll learn about factors that slow web applications down and how you can boost performance by implementing caching. Free Bonus: Click here to get access to a free Django Learning Resources Guide (PDF) that shows you tips and tricks as well as common pitfalls to avoid when building Python + Django web applications. Search \u00bb Get Started With Django: Build a Portfolio App Jan 18, 2025 intermediate django projects web-dev Build a Personal Diary With Django and Python Jan 13, 2025 basics django front-end projects web-dev Primer on Jinja Templating Jan 12, 2025 intermediate django flask front-end web-dev HTML and CSS for Python Developers Jan 11, 2025 basics django flask front-end web-dev Building HTTP APIs With Django REST Framework Dec 31, 2024 advanced api django web-dev Get Started With Django User Management Dec 18, 2024 intermediate django Asynchronous Tasks With Django and Celery Dec 08, 2024 advanced databases django web-dev Primer on Jinja Templating Aug 21, 2024 intermediate django flask front-end web-dev How to Write an Installable Django App Jul 31, 2024 advanced django projects testing web-dev Build a Blog Using Django, GraphQL, and Vue Jul 11, 2024 advanced django front-end web-dev HTML and CSS Foundations for Python Developers basics django flask front-end web-dev Build a Blog Using Django, GraphQL, and Vue advanced api django front-end web-dev Get Started With Django: Build a Portfolio App Mar 26, 2024 intermediate django web-dev Creating Asynchronous Tasks With Celery and Django advanced databases django web-dev How to Render Markdown in a Django Application intermediate django Build a Blog From Scratch With Django intermediate django projects web-dev Jinja Templating intermediate django flask front-end web-dev Deploy a Django App With Gunicorn and Nginx intermediate django Build a Flashcards App With Django intermediate django projects web-dev Building a Django User Management System intermediate django Pagination for a User-Friendly Django App intermediate django web-dev Manage Your To-Do Lists Using Python and Django basics django projects web-dev Build and Submit HTML Forms With Django \u2013 Part 4 intermediate django web-dev Build and Handle POST Requests in Django \u2013 Part 3 intermediate django web-dev Build a Django Front End With Bulma \u2013 Part 2 intermediate django web-dev Build a Social Network With Django \u2013 Part 1 intermediate django web-dev Host Your Django Project on Heroku intermediate devops django web-dev Securely Deploy a Django App With Gunicorn, Nginx, & HTTPS intermediate django Django Templates: Implementing Custom Tags and Filters advanced django web-dev Hosting a Django Project on Heroku intermediate django projects web-dev Django Templates: Built-In Tags and Filters intermediate django Your First Steps With Django: Set Up a Django Project basics best-practices django web-dev How to Set Up a Django Project basics best-practices django web-dev Django View Authorization: Restricting Access intermediate django web-dev Django Admin Customization advanced django web-dev Get Started With Django Part 3: Django View Authorization intermediate django web-dev Django Redirects intermediate django web-dev Customize the Django Admin With Python advanced django web-dev How to Move a Django Model to Another App advanced django web-dev How to Provide Test Fixtures for Django Models in Pytest intermediate django testing Getting Started With Django: Building a Portfolio App basics django projects web-dev What You Need to Know to Manage Users in Django Admin advanced django web-dev Digging Deeper Into Django Migrations intermediate databases django web-dev Build a", "start_char_idx": 0, "end_char_idx": 5249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "276af1d0-7795-4cfe-aabe-03a55db49d6d": {"__data__": {"id_": "276af1d0-7795-4cfe-aabe-03a55db49d6d", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_34_1.txt", "file_name": "realpython.com_34_1.txt", "file_type": "text/plain", "file_size": 493, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b64425e3-8bc3-4770-82d8-a2227e2e56bd", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_34_1.txt", "file_name": "realpython.com_34_1.txt", "file_type": "text/plain", "file_size": 493, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd84f1099ed0e6360d3ca110fbe1bdf8c0614d60c4b8894553375ab1aaea09fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a770008-ca77-4756-b1d9-730371d78e6a", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_34_0.txt", "file_name": "realpython.com_34_0.txt", "file_type": "text/plain", "file_size": 5266, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ec2bfe03320701bc6a7ae3a862fbec7f539235a3ba315924e6ef729713aa2ed4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23f4e4b4-b9fe-461e-8b76-6519e4453572", "node_type": "1", "metadata": {}, "hash": "63b3b8293fc1cfcbe254fd4fbfa62c76e76a7351b654cc20915d9d262eeccf02", "class_name": "RelatedNodeInfo"}}, "text": "Location-Based Web App With Django and GeoDjango intermediate django web-dev How to Create an Index in Django Without Downtime advanced databases django Django Migrations: A Primer basics databases django web-dev Modeling Polymorphism in Django With Python advanced django web-dev Make a Location-Based Web App With Django and GeoDjango intermediate django web-dev Almost there! Complete this form and click the button below to gain instant access: \u00d7 Get the \"Django Learning Resources Guide\"", "start_char_idx": 0, "end_char_idx": 492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23f4e4b4-b9fe-461e-8b76-6519e4453572": {"__data__": {"id_": "23f4e4b4-b9fe-461e-8b76-6519e4453572", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f608eb3-4924-4b10-975f-38aaae27eae5", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bc731cd26e78474660c2429ae6396273cff10001b5779745afc64c3dfd9e9959", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "276af1d0-7795-4cfe-aabe-03a55db49d6d", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_34_1.txt", "file_name": "realpython.com_34_1.txt", "file_type": "text/plain", "file_size": 493, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd84f1099ed0e6360d3ca110fbe1bdf8c0614d60c4b8894553375ab1aaea09fc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7c710fd-c46d-4fd3-9bb0-0f9289204402", "node_type": "1", "metadata": {}, "hash": "91f4f4e450582f87d1c6aef6335c9d139ac8a176b449d9ab4618a0aa1c429d1c", "class_name": "RelatedNodeInfo"}}, "text": "Common Python Data Structures (Guide) \u2013 Real Python Common Python Data Structures (Guide) by Dan Bader basics data-structures python Mark as Completed Share Table of Contents Dictionaries, Maps, and Hash Tables dict: Your Go-to Dictionary collections.OrderedDict: Remember the Insertion Order of Keys collections.defaultdict: Return Default Values for Missing Keys collections.ChainMap: Search Multiple Dictionaries as a Single Mapping types.MappingProxyType: A Wrapper for Making Read-Only Dictionaries Dictionaries in Python: Summary Array Data Structures list: Mutable Dynamic Arrays tuple: Immutable Containers array.array: Basic Typed Arrays str: Immutable Arrays of Unicode Characters bytes: Immutable Arrays of Single Bytes bytearray: Mutable Arrays of Single Bytes Arrays in Python: Summary Records, Structs, and Data Transfer Objects dict: Simple Data Objects tuple: Immutable Groups of Objects Write a Custom Class: More Work, More Control dataclasses.dataclass: Python 3.7+ Data Classes collections.namedtuple: Convenient Data Objects typing.NamedTuple: Improved Namedtuples struct.Struct: Serialized C Structs types.SimpleNamespace: Fancy Attribute Access Records, Structs, and Data Objects in Python: Summary Sets and Multisets set: Your Go-to Set frozenset: Immutable Sets collections.Counter: Multisets Sets and Multisets in Python: Summary Stacks (LIFOs) list: Simple, Built-in Stacks collections.deque: Fast and Robust Stacks queue.LifoQueue: Locking Semantics for Parallel Computing Stack Implementations in Python: Summary Queues (FIFOs) list: Terribly Sloooow Queues collections.deque: Fast and Robust Queues queue.Queue: Locking Semantics for Parallel Computing multiprocessing.Queue: Shared Job Queues Queues in Python: Summary Priority Queues list: Manually Sorted Queues heapq: List-Based Binary Heaps queue.PriorityQueue: Beautiful Priority Queues Priority Queues in Python: Summary Conclusion: Python Data Structures Remove ads Watch Now This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: Stacks and Queues: Selecting the Ideal Data Structure Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library . However, Python\u2019s naming convention doesn\u2019t provide the same level of clarity that you\u2019ll find in other languages. In Java , a list isn\u2019t just a list \u2014it\u2019s either a LinkedList or an ArrayList . Not so in Python. Even experienced Python developers sometimes wonder whether the built-in list type is implemented as a linked list or a dynamic array. In this tutorial, you\u2019ll learn: Which common abstract data types are built into the Python standard library How the most common abstract data types map to Python\u2019s naming scheme How to put abstract data types to practical use in various algorithms Note: This tutorial is adapted from the chapter \u201cCommon Data Structures in Python\u201d in Python Tricks: The Book . If you enjoy what you read below, then be sure to check out the rest of the book . Free Download: Get a sample chapter from Python Tricks: The Book that shows you Python\u2019s best practices with simple examples you can apply instantly to write more beautiful + Pythonic code. Dictionaries, Maps, and Hash Tables In Python, dictionaries (or dicts for short) are a central data structure. Dicts store an arbitrary number of objects, each identified by a unique dictionary key . Dictionaries are also often called maps , hashmaps , lookup tables , or associative arrays . They allow for the efficient lookup, insertion, and deletion of any object associated with a given key. Phone books make a decent real-world analog for dictionary objects. They allow you to quickly retrieve the information (phone number) associated with a given key (a person\u2019s name). Instead of having to read a phone book front to back to find someone\u2019s number, you can jump more or less directly to a name and look up the associated information. This analogy breaks down somewhat when it comes to how the information is organized to allow for fast lookups. But the fundamental performance characteristics hold. Dictionaries allow you to quickly find the information associated with a given key. Dictionaries are one of the most important and frequently used data structures in computer science. So, how does Python handle dictionaries? Let\u2019s take a tour of the dictionary implementations available in core Python and the Python standard library. Remove ads dict : Your Go-to Dictionary Because dictionaries are so important, Python features a robust dictionary implementation that\u2019s built directly into the core language: the dict data type. Python also provides some useful syntactic sugar for working with dictionaries in your programs.", "start_char_idx": 0, "end_char_idx": 4973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7c710fd-c46d-4fd3-9bb0-0f9289204402": {"__data__": {"id_": "c7c710fd-c46d-4fd3-9bb0-0f9289204402", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f608eb3-4924-4b10-975f-38aaae27eae5", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bc731cd26e78474660c2429ae6396273cff10001b5779745afc64c3dfd9e9959", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23f4e4b4-b9fe-461e-8b76-6519e4453572", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "91e97403fbd41905ac8174667c95e869befc6155156da65b6f597544e85b7308", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46001039-ee7d-4dfa-b616-e0d577af9849", "node_type": "1", "metadata": {}, "hash": "3508d2f043250893a6df20a462977a10f024944210989e4872d850a1ffab4b2e", "class_name": "RelatedNodeInfo"}}, "text": "Instead of having to read a phone book front to back to find someone\u2019s number, you can jump more or less directly to a name and look up the associated information. This analogy breaks down somewhat when it comes to how the information is organized to allow for fast lookups. But the fundamental performance characteristics hold. Dictionaries allow you to quickly find the information associated with a given key. Dictionaries are one of the most important and frequently used data structures in computer science. So, how does Python handle dictionaries? Let\u2019s take a tour of the dictionary implementations available in core Python and the Python standard library. Remove ads dict : Your Go-to Dictionary Because dictionaries are so important, Python features a robust dictionary implementation that\u2019s built directly into the core language: the dict data type. Python also provides some useful syntactic sugar for working with dictionaries in your programs. For example, the curly-brace ({ }) dictionary expression syntax and dictionary comprehensions allow you to conveniently define new dictionary objects: Python >>> phonebook = { ... \"bob\" : 7387 , ... \"alice\" : 3719 , ... \"jack\" : 7052 , ... } >>> squares = { x : x * x for x in range ( 6 )} >>> phonebook [ \"alice\"", "start_char_idx": 4017, "end_char_idx": 5287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46001039-ee7d-4dfa-b616-e0d577af9849": {"__data__": {"id_": "46001039-ee7d-4dfa-b616-e0d577af9849", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17288975-c1fd-4cec-86fc-c402626e5549", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a6afe4d2aa147c9c852186382e0f7b7b2701ef2a0e7488ad274b986f21e559ba", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7c710fd-c46d-4fd3-9bb0-0f9289204402", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "47730d1d6d523c20353179d1ee0a048f774542e33a7da9434f00a391d37f1b74", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e60f8afa-29c9-4489-a92b-249ded7df09d", "node_type": "1", "metadata": {}, "hash": "43f71dfeca24312dc26d1721977624698fdad7461832f25cb0652cec9d592a75", "class_name": "RelatedNodeInfo"}}, "text": "] 3719 >>> squares {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25} There are some restrictions on which objects can be used as valid keys. Python\u2019s dictionaries are indexed by keys that can be of any hashable type. A hashable object has a hash value that never changes during its lifetime (see __hash__ ), and it can be compared to other objects (see __eq__ ). Hashable objects that compare as equal must have the same hash value. Immutable types like strings and numbers are hashable and work well as dictionary keys. You can also use tuple objects as dictionary keys as long as they contain only hashable types themselves. For most use cases, Python\u2019s built-in dictionary implementation will do everything you need. Dictionaries are highly optimized and underlie many parts of the language. For example, class attributes and variables in a stack frame are both stored internally in dictionaries. Python dictionaries are based on a well-tested and finely tuned hash table implementation that provides the performance characteristics you\u2019d expect: O (1) time complexity for lookup, insert, update, and delete operations in the average case. There\u2019s little reason not to use the standard dict implementation included with Python. However, specialized third-party dictionary implementations exist, such as skip lists or B-tree\u2013based dictionaries. Besides plain dict objects, Python\u2019s standard library also includes a number of specialized dictionary implementations. These specialized dictionaries are all based on the built-in dictionary class (and share its performance characteristics) but also include some additional convenience features. Let\u2019s take a look at them. collections.OrderedDict : Remember the Insertion Order of Keys Python includes a specialized dict subclass that remembers the insertion order of keys added to it: collections.OrderedDict . Note: OrderedDict is not a built-in part of the core language and must be imported from the collections module in the standard library. While standard dict instances preserve the insertion order of keys in CPython 3.6 and above, this was simply a side effect of the CPython implementation and was not defined in the language spec until Python 3.7. So, if key order is important for your algorithm to work, then it\u2019s best to communicate this clearly by explicitly using the OrderedDict class: Python >>> import collections >>> d = collections . OrderedDict ( one = 1 , two = 2 , three = 3 ) >>> d OrderedDict([('one', 1), ('two', 2), ('three', 3)]) >>> d [ \"four\" ] = 4 >>> d OrderedDict([('one', 1), ('two', 2), ('three', 3), ('four', 4)]) >>> d . keys () odict_keys(['one', 'two', 'three', 'four']) Until Python 3.8 , you couldn\u2019t iterate over dictionary items in reverse order using reversed() . Only OrderedDict instances offered that functionality. Even in Python 3.8, dict and OrderedDict objects aren\u2019t exactly the same. OrderedDict instances have a .move_to_end() method that is unavailable on plain dict instance, as well as a more customizable .popitem() method than the one plain dict instances. collections.defaultdict : Return Default Values for Missing Keys The defaultdict class is another dictionary subclass that accepts a callable in its constructor whose return value will be used if a requested key cannot be found. This can save you some typing and make your intentions clearer as compared to using get() or catching a KeyError exception in regular dictionaries: Python >>> from collections import defaultdict >>> dd = defaultdict ( list ) >>> # Accessing a missing key creates it and >>> # initializes it using the default factory, >>> # i.e. list() in this example: >>> dd [ \"dogs\" ] . append ( \"Rufus\" ) >>> dd [ \"dogs\" ] . append ( \"Kathrin\" ) >>> dd [ \"dogs\" ] . append ( \"Mr Sniffles\" ) >>> dd [ \"dogs\" ] ['Rufus', 'Kathrin', 'Mr Sniffles'] Remove ads collections.ChainMap : Search Multiple Dictionaries as a Single Mapping The collections.ChainMap data structure groups multiple dictionaries into a single mapping. Lookups search the underlying mappings one by one until a key is found.", "start_char_idx": 0, "end_char_idx": 4062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e60f8afa-29c9-4489-a92b-249ded7df09d": {"__data__": {"id_": "e60f8afa-29c9-4489-a92b-249ded7df09d", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17288975-c1fd-4cec-86fc-c402626e5549", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a6afe4d2aa147c9c852186382e0f7b7b2701ef2a0e7488ad274b986f21e559ba", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46001039-ee7d-4dfa-b616-e0d577af9849", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a05ec348a2a4a5dca631ec37c33d072e6d011e62339183c3dab9e9223d42521e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90354b6d-e85e-4904-8dbb-d7181d102cb9", "node_type": "1", "metadata": {}, "hash": "397630737d7d6f1cb05598c77c9eb11cc023dce0a1c782b25eb655c6a663e173", "class_name": "RelatedNodeInfo"}}, "text": "This can save you some typing and make your intentions clearer as compared to using get() or catching a KeyError exception in regular dictionaries: Python >>> from collections import defaultdict >>> dd = defaultdict ( list ) >>> # Accessing a missing key creates it and >>> # initializes it using the default factory, >>> # i.e. list() in this example: >>> dd [ \"dogs\" ] . append ( \"Rufus\" ) >>> dd [ \"dogs\" ] . append ( \"Kathrin\" ) >>> dd [ \"dogs\" ] . append ( \"Mr Sniffles\" ) >>> dd [ \"dogs\" ] ['Rufus', 'Kathrin', 'Mr Sniffles'] Remove ads collections.ChainMap : Search Multiple Dictionaries as a Single Mapping The collections.ChainMap data structure groups multiple dictionaries into a single mapping. Lookups search the underlying mappings one by one until a key is found. Insertions, updates, and deletions only affect the first mapping added to the chain: Python >>> from collections import ChainMap >>> dict1 = { \"one\" : 1 , \"two\" : 2 } >>> dict2 = { \"three\" : 3 , \"four\" : 4 } >>> chain = ChainMap ( dict1 , dict2 ) >>> chain ChainMap({'one': 1, 'two': 2}, {'three': 3, 'four': 4}) >>> # ChainMap searches each collection in the chain >>> # from left to right until it finds the key (or fails): >>> chain [ \"three\" ] 3 >>> chain [ \"one\" ] 1 >>> chain [ \"missing\" ] Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> KeyError : 'missing' types.MappingProxyType : A Wrapper for Making Read-Only Dictionaries MappingProxyType is a wrapper around a standard dictionary that provides a read-only view into the wrapped dictionary\u2019s data. This", "start_char_idx": 3284, "end_char_idx": 4852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90354b6d-e85e-4904-8dbb-d7181d102cb9": {"__data__": {"id_": "90354b6d-e85e-4904-8dbb-d7181d102cb9", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_10.txt", "file_name": "realpython.com_43_10.txt", "file_type": "text/plain", "file_size": 4700, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b8843c4-7654-4053-88d8-add60e34ac80", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_10.txt", "file_name": "realpython.com_43_10.txt", "file_type": "text/plain", "file_size": 4700, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e2baaad70c78b13c916710aaa287eb353f5dc99ce24a254e3dbf1ad4f0e7ede8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e60f8afa-29c9-4489-a92b-249ded7df09d", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f9c387cac96cdd1fde0c107871875712279843d0ee4e87ff8e4cb199cc9a69fc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8936479e-15e3-444a-9dd4-04a3855a0a36", "node_type": "1", "metadata": {}, "hash": "dab6cb2ecff5d384684efb26413c56e63d86376dbd1f1b211179ff5548b414b1", "class_name": "RelatedNodeInfo"}}, "text": "'code']) >>> s . pop () 'code' >>> s . pop () 'sleep' >>> s . pop () 'eat' >>> s . pop () Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> IndexError : pop from an empty deque queue.LifoQueue : Locking Semantics for Parallel Computing The LifoQueue stack implementation in the Python standard library is synchronized and provides locking semantics to support multiple concurrent producers and consumers. Besides LifoQueue , the queue module contains several other classes that implement multi-producer, multi-consumer queues that are useful for parallel computing. Depending on your use case, the locking semantics might be helpful, or they might just incur unneeded overhead. In this case, you\u2019d be better off using a list or a deque as a general-purpose stack: Python >>> from queue import LifoQueue >>> s = LifoQueue () >>> s . put ( \"eat\" ) >>> s . put ( \"sleep\" ) >>> s . put ( \"code\" ) >>> s <queue.LifoQueue object at 0x108298dd8> >>> s . get () 'code' >>> s . get () 'sleep' >>> s . get () 'eat' >>> s . get_nowait () queue.Empty >>> s . get () # Blocks/waits forever... Stack Implementations in Python: Summary As you\u2019ve seen, Python ships with several implementations for a stack data structure. All of them have slightly different characteristics as well as performance and usage trade-offs. If you\u2019re not looking for parallel processing support (or if you don\u2019t want to handle locking and unlocking manually), then your choice comes down to the built-in list type or collections.deque . The difference lies in the data structure used behind the scenes and overall ease of use. list is backed by a dynamic array, which makes it great for fast random access but requires occasional resizing when elements are added or removed. The list over-allocates its backing storage so that not every push or pop requires resizing, and you get an amortized O (1) time complexity for these operations. But you do need to be careful to only insert and remove items using append() and pop() . Otherwise, performance slows down to O ( n ). collections.deque is backed by a doubly-linked list, which optimizes appends and deletes at both ends and provides consistent O (1) performance for these operations. Not only is its performance more stable, the deque class is also easier to use because you don\u2019t have to worry about adding or removing items from the wrong end. In summary, collections.deque is an excellent choice for implementing a stack (LIFO queue) in Python. Remove ads Queues (FIFOs) In this section, you\u2019ll see how to implement a First-In/First-Out (FIFO) queue data structure using only built-in data types and classes from the Python standard library. A queue is a collection of objects that supports fast FIFO semantics for inserts and deletes. The insert and delete operations are sometimes called enqueue and dequeue . Unlike lists or arrays, queues typically don\u2019t allow for random access to the objects they contain. Here\u2019s a real-world analogy for a FIFO queue: Imagine a line of Pythonistas waiting to pick up their conference badges on day one of PyCon registration. As new people enter the conference venue and queue up to receive their badges, they join the line (enqueue) at the back of the queue. Developers receive their badges and conference swag bags and then exit the line (dequeue) at the front of the queue. Another way to memorize the characteristics of a queue data structure is to think of it as a pipe. You add ping-pong balls to one end, and they travel to the other end, where you remove them. While the balls are in the queue (a solid metal pipe) you can\u2019t get at them. The only way to interact with the balls in the queue is to add new ones at the back of the pipe (enqueue) or to remove them at the front (dequeue). Queues are similar to stacks. The difference between them lies in how items are removed. With a queue , you remove the item least recently added (FIFO) but with a stack , you remove the item most recently added (LIFO). Performance-wise, a proper queue implementation is expected to take O (1) time for insert and delete operations. These are the two main operations performed on a queue, and in a correct implementation, they should be fast. Queues have a wide range of applications in algorithms and often help solve scheduling and parallel programming problems. A short and beautiful algorithm using a queue is breadth-first search (BFS) on a tree or graph data structure. Scheduling algorithms often use priority queues internally. These are specialized queues. Instead of retrieving the next element by insertion time, a priority queue retrieves the highest-priority element. The priority of individual", "start_char_idx": 0, "end_char_idx": 4682, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8936479e-15e3-444a-9dd4-04a3855a0a36": {"__data__": {"id_": "8936479e-15e3-444a-9dd4-04a3855a0a36", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1d1a543-38fa-48c1-8e39-294897270742", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8bbeabc4aee2e37739b74ace3339f4dc56860a77f6e1d69a42c634e2ea1f3b68", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90354b6d-e85e-4904-8dbb-d7181d102cb9", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_10.txt", "file_name": "realpython.com_43_10.txt", "file_type": "text/plain", "file_size": 4700, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e2baaad70c78b13c916710aaa287eb353f5dc99ce24a254e3dbf1ad4f0e7ede8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef20dc98-8f58-404c-8ed6-cba839ca0a47", "node_type": "1", "metadata": {}, "hash": "4a0c427de40760ce3d277e21a63d4569c1c2d45200d00cce236224d200fe26fa", "class_name": "RelatedNodeInfo"}}, "text": "elements is decided by the queue based on the ordering applied to their keys. A regular queue, however, won\u2019t reorder the items it carries. Just like in the pipe example, you get out what you put in, and in exactly that order. Python ships with several queue implementations that each have slightly different characteristics. Let\u2019s review them. list : Terribly Sloooow Queues It\u2019s possible to use a regular list as a queue , but this is not ideal from a performance perspective. Lists are quite slow for this purpose because inserting or deleting an element at the beginning requires shifting all the other elements by one, requiring O ( n ) time. Therefore, I would not recommend using a list as a makeshift queue in Python unless you\u2019re dealing with only a small number of elements: Python >>> q = [] >>> q . append ( \"eat\" ) >>> q . append ( \"sleep\" ) >>> q . append ( \"code\" ) >>> q ['eat', 'sleep', 'code'] >>> # Careful: This is slow! >>> q . pop ( 0 ) 'eat' collections.deque : Fast and Robust Queues The deque class implements a double-ended queue that supports adding and removing elements from either end in O (1) time (non-amortized). Because deques support adding and removing elements from either end equally well, they can serve both as queues and as stacks. Python\u2019s deque objects are implemented as doubly-linked lists. This gives them excellent and consistent performance for inserting and deleting elements, but poor O ( n ) performance for randomly accessing elements in the middle of the stack. As a result, collections.deque is a great default choice if you\u2019re looking for a queue data structure in Python\u2019s standard library: Python >>> from collections import deque >>> q = deque () >>> q . append ( \"eat\" ) >>> q . append ( \"sleep\" ) >>> q . append ( \"code\" ) >>> q deque(['eat', 'sleep', 'code']) >>> q . popleft () 'eat' >>> q . popleft () 'sleep' >>> q . popleft () 'code' >>> q . popleft () Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> IndexError : pop from an empty deque queue.Queue : Locking Semantics for Parallel Computing The queue.Queue implementation in the Python standard library is synchronized and provides locking semantics to support multiple concurrent producers and consumers. The queue module contains several other classes implementing multi-producer, multi-consumer queues that are useful for parallel computing. Depending on your use case, the locking semantics might be helpful or just incur unneeded overhead. In this case, you\u2019d be better off using collections.deque as a general-purpose queue: Python >>> from queue import Queue >>> q = Queue () >>> q . put ( \"eat\" ) >>> q . put ( \"sleep\" ) >>> q . put ( \"code\" ) >>> q <queue.Queue object at 0x1070f5b38> >>> q . get () 'eat' >>> q . get () 'sleep' >>> q . get () 'code' >>> q . get_nowait () queue.Empty >>> q . get () # Blocks/waits forever... multiprocessing.Queue : Shared Job Queues multiprocessing.Queue is a shared job queue implementation that allows queued items to be processed in parallel by multiple concurrent workers. Process-based parallelization is popular in CPython due to the global interpreter lock (GIL) that prevents some forms of parallel execution on a single interpreter process. As a specialized queue implementation meant for sharing data between processes, multiprocessing.Queue makes it easy to distribute work across multiple processes in order to work around the GIL limitations. This type of queue can store and transfer any pickleable object across process boundaries: Python >>> from multiprocessing import Queue >>> q = Queue () >>> q . put ( \"eat\" ) >>> q . put ( \"sleep\" ) >>> q . put ( \"code\" ) >>> q <multiprocessing.queues.Queue object at 0x1081c12b0> >>> q . get () 'eat' >>> q . get () 'sleep' >>> q . get () 'code' >>> q . get () # Blocks/waits forever... Queues in Python: Summary Python includes several queue implementations as part of the core language and its standard library. list objects can be used as queues, but this is generally not recommended due to slow performance. If you\u2019re not looking for parallel processing support, then the implementation offered by collections.deque is an excellent default choice for implementing a FIFO queue data structure in Python. It provides the performance characteristics you\u2019d expect from a good queue implementation and can also be used as a stack (LIFO queue).", "start_char_idx": 0, "end_char_idx": 4386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef20dc98-8f58-404c-8ed6-cba839ca0a47": {"__data__": {"id_": "ef20dc98-8f58-404c-8ed6-cba839ca0a47", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1d1a543-38fa-48c1-8e39-294897270742", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8bbeabc4aee2e37739b74ace3339f4dc56860a77f6e1d69a42c634e2ea1f3b68", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8936479e-15e3-444a-9dd4-04a3855a0a36", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "183617942c252cb065ecd20e43763fd99708cc83d24844bb1f8252136f778a9a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "24aaae84-083c-4d6a-866a-16ee7a64302c", "node_type": "1", "metadata": {}, "hash": "3a9286a541225a4b655743b94576c83845903ccbcb1385db88108edfe188f310", "class_name": "RelatedNodeInfo"}}, "text": "put ( \"eat\" ) >>> q . put ( \"sleep\" ) >>> q . put ( \"code\" ) >>> q <multiprocessing.queues.Queue object at 0x1081c12b0> >>> q . get () 'eat' >>> q . get () 'sleep' >>> q . get () 'code' >>> q . get () # Blocks/waits forever... Queues in Python: Summary Python includes several queue implementations as part of the core language and its standard library. list objects can be used as queues, but this is generally not recommended due to slow performance. If you\u2019re not looking for parallel processing support, then the implementation offered by collections.deque is an excellent default choice for implementing a FIFO queue data structure in Python. It provides the performance characteristics you\u2019d expect from a good queue implementation and can also be used as a stack (LIFO queue). Priority Queues A priority queue is a container data structure that manages a set of records with totally-ordered keys to provide quick access to the record with the smallest or largest key in the set. You can think of a priority queue as a modified queue.", "start_char_idx": 3603, "end_char_idx": 4643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24aaae84-083c-4d6a-866a-16ee7a64302c": {"__data__": {"id_": "24aaae84-083c-4d6a-866a-16ee7a64302c", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_12.txt", "file_name": "realpython.com_43_12.txt", "file_type": "text/plain", "file_size": 4539, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "def12d8d-129d-463f-a753-938d3d327b92", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_12.txt", "file_name": "realpython.com_43_12.txt", "file_type": "text/plain", "file_size": 4539, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5939f60c77229442fa420667fd8b220de95ee39222bd83ffc72efb1a4271c93b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef20dc98-8f58-404c-8ed6-cba839ca0a47", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2cc51866ddbdfe7d48f7302e8a472a1e357fcdd35cc65aeb4038cef597e9b041", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92566026-6fbe-48b7-89b0-5d48957c1e75", "node_type": "1", "metadata": {}, "hash": "59d58db45980155443e95887607e80e7f47f3a6984e29de6ce0748962ba9fb7e", "class_name": "RelatedNodeInfo"}}, "text": "Instead of retrieving the next element by insertion time, it retrieves the highest-priority element. The priority of individual elements is decided by the order applied to their keys. Priority queues are commonly used for dealing with scheduling problems. For example, you might use them to give precedence to tasks with higher urgency. Think about the job of an operating system task scheduler: Ideally, higher-priority tasks on the system (such as playing a real-time game) should take precedence over lower-priority tasks (such as downloading updates in the background). By organizing pending tasks in a priority queue that uses task urgency as the key, the task scheduler can quickly select the highest-priority tasks and allow them to run first. In this section, you\u2019ll see a few options for how you can implement priority queues in Python using built-in data structures or data structures included in Python\u2019s standard library. Each implementation will have its own upsides and downsides, but in my mind there\u2019s a clear winner for most common scenarios. Let\u2019s find out which one it is. list : Manually Sorted Queues You can use a sorted list to quickly identify and delete the smallest or largest element. The downside is that inserting new elements into a list is a slow O ( n ) operation. While the insertion point can be found in O (log n ) time using bisect.insort in the standard library, this is always dominated by the slow insertion step. Maintaining the order by appending to the list and re-sorting also takes at least O ( n log n ) time. Another downside is that you must manually take care of re-sorting the list when new elements are inserted. It\u2019s easy to introduce bugs by missing this step, and the burden is always on you, the developer. This means sorted lists are only suitable as priority queues when there will be few insertions: Python >>> q = [] >>> q . append (( 2 , \"code\" )) >>> q . append (( 1 , \"eat\" )) >>> q . append (( 3 , \"sleep\" )) >>> # Remember to re-sort every time a new element is inserted, >>> # or use bisect.insort() >>> q . sort ( reverse = True ) >>> while q : ... next_item = q . pop () ... print ( next_item ) ... (1, 'eat') (2, 'code') (3, 'sleep') heapq : List-Based Binary Heaps heapq is a binary heap implementation usually backed by a plain list , and it supports insertion and extraction of the smallest element in O (log n ) time. This module is a good choice for implementing priority queues in Python . Since heapq technically provides only a min-heap implementation, extra steps must be taken to ensure sort stability and other features typically expected from a practical priority queue: Python >>> import heapq >>> q = [] >>> heapq . heappush ( q , ( 2 , \"code\" )) >>> heapq . heappush ( q , ( 1 , \"eat\" )) >>> heapq . heappush ( q , ( 3 , \"sleep\" )) >>> while q : ... next_item = heapq . heappop ( q ) ... print ( next_item ) ... (1, 'eat') (2, 'code') (3, 'sleep') queue.PriorityQueue : Beautiful Priority Queues queue.PriorityQueue uses heapq internally and shares the same time and space complexities. The difference is that PriorityQueue is synchronized and provides locking semantics to support multiple concurrent producers and consumers. Depending on your use case, this might be helpful, or it might just slow your program down slightly. In any case, you might prefer the class-based interface provided by PriorityQueue over the function-based interface provided by heapq : Python >>> from queue import PriorityQueue >>> q = PriorityQueue () >>> q . put (( 2 , \"code\" )) >>> q . put (( 1 , \"eat\" )) >>> q . put (( 3 , \"sleep\" )) >>> while not q . empty (): ... next_item = q . get () ... print ( next_item ) ... (1, 'eat') (2, 'code') (3, 'sleep') Priority Queues in Python: Summary Python includes several priority queue implementations ready for you to use. queue.PriorityQueue stands out from the pack with a nice object-oriented interface and a name that clearly states its intent. It should be your preferred choice. If you\u2019d like to avoid the locking overhead of queue.PriorityQueue , then using the heapq module directly is also a good option. Conclusion: Python Data Structures That concludes your tour of common data structures in Python. With the knowledge you\u2019ve gained here, you\u2019re ready to implement efficient data structures that are just right for your specific algorithm or use case. In this tutorial, you\u2019ve learned: Which common abstract data types are built into the Python standard library How the most common abstract data types", "start_char_idx": 0, "end_char_idx": 4521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92566026-6fbe-48b7-89b0-5d48957c1e75": {"__data__": {"id_": "92566026-6fbe-48b7-89b0-5d48957c1e75", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_13.txt", "file_name": "realpython.com_43_13.txt", "file_type": "text/plain", "file_size": 3101, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eddaf335-f569-4b27-9438-1b435e605159", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_13.txt", "file_name": "realpython.com_43_13.txt", "file_type": "text/plain", "file_size": 3101, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f41f3a234ab1c0066ac21ce51e80fcc03e52c28889c547e876287fd86b221d77", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "24aaae84-083c-4d6a-866a-16ee7a64302c", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_12.txt", "file_name": "realpython.com_43_12.txt", "file_type": "text/plain", "file_size": 4539, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5939f60c77229442fa420667fd8b220de95ee39222bd83ffc72efb1a4271c93b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35ac61b2-c8a7-4c9f-947c-a5983b254cbc", "node_type": "1", "metadata": {}, "hash": "82b06e08424cbe0889f3ce8201dfd600b66a26554d237696f3999f8054470a88", "class_name": "RelatedNodeInfo"}}, "text": "map to Python\u2019s naming scheme How to put abstract data types to practical use in various algorithms If you enjoyed what you learned in this sample from Python Tricks , then be sure to check out the rest of the book . If you\u2019re interested in brushing up on your general data structures knowledge, then I highly recommend Steven S. Skiena\u2019s The Algorithm Design Manual . It strikes a great balance between teaching you fundamental (and more advanced) data structures and showing you how to implement them in your code. Steve\u2019s book was a great help in the writing of this tutorial. Mark as Completed Share Watch Now This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: Stacks and Queues: Selecting the Ideal Data Structure \ud83d\udc0d Python Tricks \ud83d\udc8c Get a short & sweet Python Trick delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team. About Dan Bader Dan Bader is the owner and editor in chief of Real Python and the main developer of the realpython.com learning platform. Dan has been writing code for more than 20 years and holds a master's degree in computer science. \u00bb More about Dan Each tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are: Aldren David Joanna Jacob Master Real-World Python Skills With Unlimited Access to Real Python Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas: Level Up Your Python Skills \u00bb Master Real-World Python Skills With Unlimited Access to Real Python Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas: Level Up Your Python Skills \u00bb What Do You Think? Rate this article: LinkedIn Twitter Bluesky Facebook Email What\u2019s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know. Commenting Tips: The most useful comments are those written with the goal of learning from or helping out other students. Get tips for asking good questions and get answers to common questions in our support portal . Looking for a real-time conversation? Visit the Real Python Community Chat or join the next \u201cOffice Hours\u201d Live Q&A Session . Happy Pythoning! Keep Learning Related Topics: basics data-structures python Recommended Video Course: Stacks and Queues: Selecting the Ideal Data Structure Related Tutorials: Object-Oriented Programming (OOP) in Python Python Stacks, Queues, and Priority Queues in Practice Recursion in Python: An Introduction Regular Expressions: Regexes in Python (Part 1) Python's list Data Type: A Deep Dive With Examples Keep reading Real Python by creating a free account or signing in: Continue \u00bb Already have an account? Sign-In Almost there! Complete this form and click the button below to gain instant access: \u00d7 \"Python Tricks: The Book\" \u2013 Free Sample Chapter (PDF)", "start_char_idx": 0, "end_char_idx": 3074, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35ac61b2-c8a7-4c9f-947c-a5983b254cbc": {"__data__": {"id_": "35ac61b2-c8a7-4c9f-947c-a5983b254cbc", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_2.txt", "file_name": "realpython.com_43_2.txt", "file_type": "text/plain", "file_size": 4685, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0ce3c13-8c2a-4093-b2ef-5fdcc3400b00", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_2.txt", "file_name": "realpython.com_43_2.txt", "file_type": "text/plain", "file_size": 4685, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b89db195f695453bed25f0cf76546ea39494235c57896d55c2b63732c9176710", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92566026-6fbe-48b7-89b0-5d48957c1e75", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_13.txt", "file_name": "realpython.com_43_13.txt", "file_type": "text/plain", "file_size": 3101, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f41f3a234ab1c0066ac21ce51e80fcc03e52c28889c547e876287fd86b221d77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c769187-9e75-4be9-9d3e-b59e1b34d298", "node_type": "1", "metadata": {}, "hash": "c41029da3afb2d48066307ba65e8eba01e25cb8469373ed1c58badac79ef5aac", "class_name": "RelatedNodeInfo"}}, "text": "class was added in Python 3.3 and can be used to create immutable proxy versions of dictionaries. MappingProxyType can be helpful if, for example, you\u2019d like to return a dictionary carrying internal state from a class or module while discouraging write access to this object. Using MappingProxyType allows you to put these restrictions in place without first having to create a full copy of the dictionary: Python >>> from types import MappingProxyType >>> writable = { \"one\" : 1 , \"two\" : 2 } >>> read_only = MappingProxyType ( writable ) >>> # The proxy is read-only: >>> read_only [ \"one\" ] 1 >>> read_only [ \"one\" ] = 23 Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'mappingproxy' object does not support item assignment >>> # Updates to the original are reflected in the proxy: >>> writable [ \"one\" ] = 42 >>> read_only mappingproxy({'one': 42, 'two': 2}) Dictionaries in Python: Summary All the Python dictionary implementations listed in this tutorial are valid implementations that are built into the Python standard library. If you\u2019re looking for a general recommendation on which mapping type to use in your programs, I\u2019d point you to the built-in dict data type. It\u2019s a versatile and optimized hash table implementation that\u2019s built directly into the core language. I would recommend that you use one of the other data types listed here only if you have special requirements that go beyond what\u2019s provided by dict . All the implementations are valid options, but your code will be clearer and easier to maintain if it relies on standard Python dictionaries most of the time. Array Data Structures An array is a fundamental data structure available in most programming languages, and it has a wide range of uses across different algorithms. In this section, you\u2019ll take a look at array implementations in Python that use only core language features or functionality that\u2019s included in the Python standard library. You\u2019ll see the strengths and weaknesses of each approach so you can decide which implementation is right for your use case. But before we jump in, let\u2019s cover some of the basics first. How do arrays work, and what are they used for? Arrays consist of fixed-size data records that allow each element to be efficiently located based on its index: Because arrays store information in adjoining blocks of memory, they\u2019re considered contiguous data structures (as opposed to linked data structures like linked lists, for example). A real-world analogy for an array data structure is a parking lot. You can look at the parking lot as a whole and treat it as a single object, but inside the lot there are parking spots indexed by a unique number. Parking spots are containers for vehicles\u2014each parking spot can either be empty or have a car, a motorbike, or some other vehicle parked on it. But not all parking lots are the same. Some parking lots may be restricted to only one type of vehicle. For example, a motor home parking lot wouldn\u2019t allow bikes to be parked on it. A restricted parking lot corresponds to a typed array data structure that allows only elements that have the same data type stored in them. Performance-wise, it\u2019s very fast to look up an element contained in an array given the element\u2019s index. A proper array implementation guarantees a constant O (1) access time for this case. Python includes several array-like data structures in its standard library that each have slightly different characteristics. Let\u2019s take a look. Remove ads list : Mutable Dynamic Arrays Lists are a part of the core Python language. Despite their name, Python\u2019s lists are implemented as dynamic arrays behind the scenes. This means a list allows elements to be added or removed, and the list will automatically adjust the backing store that holds these elements by allocating or releasing memory. Python lists can hold arbitrary elements\u2014everything is an object in Python, including functions. Therefore, you can mix and match different kinds of data types and store them all in a single list. This can be a powerful feature, but the downside is that supporting multiple data types at the same time means that data is generally less tightly packed. As a result, the whole structure takes up more space: Python >>> arr = [ \"one\" , \"two\" , \"three\" ] >>> arr [ 0 ] 'one' >>> # Lists have a nice repr: >>> arr ['one', 'two', 'three'] >>> # Lists are mutable: >>> arr [ 1 ] = \"hello\" >>> arr ['one', 'hello', 'three'] >>> del arr [ 1 ] >>> arr ['one', 'three'] >>> # Lists can hold arbitrary data types: >>> arr . append ( 23 ) >>> arr ['one', 'three', 23] tuple : Immutable Containers Just like", "start_char_idx": 0, "end_char_idx": 4649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c769187-9e75-4be9-9d3e-b59e1b34d298": {"__data__": {"id_": "5c769187-9e75-4be9-9d3e-b59e1b34d298", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee709460-ee8f-4272-812a-5de286eb5a88", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "790c6de9d9ac1710d223cddef7ac9ee1554fa3167b294f0a30a921d55e2e290e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35ac61b2-c8a7-4c9f-947c-a5983b254cbc", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_2.txt", "file_name": "realpython.com_43_2.txt", "file_type": "text/plain", "file_size": 4685, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b89db195f695453bed25f0cf76546ea39494235c57896d55c2b63732c9176710", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3d3cb2d-5908-4991-9b0c-28c50cdd0d20", "node_type": "1", "metadata": {}, "hash": "46b12e0ddfd4488d1c4f8c47ba10785ac848127572029e821e5c1010ae2e63ec", "class_name": "RelatedNodeInfo"}}, "text": "lists, tuples are part of the Python core language. Unlike lists, however, Python\u2019s tuple objects are immutable. This means elements can\u2019t be added or removed dynamically\u2014all elements in a tuple must be defined at creation time. Tuples are another data structure that can hold elements of arbitrary data types. Having this flexibility is powerful, but again, it also means that data is less tightly packed than it would be in a typed array: Python >>> arr = ( \"one\" , \"two\" , \"three\" ) >>> arr [ 0 ] 'one' >>> # Tuples have a nice repr: >>> arr ('one', 'two', 'three') >>> # Tuples are immutable: >>> arr [ 1 ] = \"hello\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'tuple' object does not support item assignment >>> del arr [ 1 ] Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'tuple' object doesn't support item deletion >>> # Tuples can hold arbitrary data types: >>> # (Adding elements creates a copy of the tuple) >>> arr + ( 23 ,) ('one', 'two', 'three', 23) array.array : Basic Typed Arrays Python\u2019s array module provides space-efficient storage of basic C-style data types like bytes, 32-bit integers, floating-point numbers, and so on. Arrays created with the array.array class are mutable and behave similarly to lists except for one important difference: they\u2019re typed arrays constrained to a single data type. Because of this constraint, array.array objects with many elements are more space efficient than lists and tuples. The elements stored in them are tightly packed, and this can be useful if you need to store many elements of the same type. Also, arrays support many of the same methods as regular lists, and you might be able to use them as a drop-in replacement without requiring other changes to your application code: Python >>> import array >>> arr = array . array ( \"f\" , ( 1.0 , 1.5 , 2.0 , 2.5 )) >>> arr [ 1 ] 1.5 >>> # Arrays have a nice repr: >>> arr array('f', [1.0, 1.5, 2.0, 2.5]) >>> # Arrays are mutable: >>> arr [ 1 ] = 23.0 >>> arr array('f', [1.0, 23.0, 2.0, 2.5]) >>> del arr [ 1 ] >>> arr array('f', [1.0, 2.0, 2.5]) >>> arr . append ( 42.0 ) >>> arr array('f', [1.0, 2.0, 2.5, 42.0]) >>> # Arrays are \"typed\": >>> arr [ 1 ] = \"hello\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : must be real number, not str str : Immutable Arrays of Unicode Characters Python 3.x uses str objects to store textual data as immutable sequences of Unicode characters . Practically speaking, that means a str is an immutable array of characters. Oddly enough, it\u2019s also a recursive data structure\u2014each character in a string is itself a str object of length 1. String objects are space efficient because they\u2019re tightly packed and they specialize in a single data type. If you\u2019re storing Unicode text, then you should use a string. Because strings are immutable in Python, modifying a string requires creating a modified copy. The closest equivalent to a mutable string is storing individual characters inside a list: Python >>> arr = \"abcd\" >>> arr [ 1 ] 'b' >>> arr 'abcd' >>> # Strings are immutable: >>> arr [ 1 ] = \"e\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object does not support item assignment >>> del arr [ 1 ] Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object doesn't support item deletion >>> # Strings can be unpacked into a list to >>> # get a mutable representation: >>> list ( \"abcd\" ) ['a', 'b', 'c', 'd'] >>> \"\" .", "start_char_idx": 0, "end_char_idx": 3571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3d3cb2d-5908-4991-9b0c-28c50cdd0d20": {"__data__": {"id_": "d3d3cb2d-5908-4991-9b0c-28c50cdd0d20", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee709460-ee8f-4272-812a-5de286eb5a88", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "790c6de9d9ac1710d223cddef7ac9ee1554fa3167b294f0a30a921d55e2e290e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c769187-9e75-4be9-9d3e-b59e1b34d298", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "659be07aa4aa8dcedada4a6087e908e7e706c2d410e1faaf122a98316e34776d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63f5c67e-27ee-4d07-b7c3-be6b3c62b744", "node_type": "1", "metadata": {}, "hash": "4e46eaff993439a578a0ddf5ef7938cc37f8fde8b56b79b8df9e052b6bb536c8", "class_name": "RelatedNodeInfo"}}, "text": "If you\u2019re storing Unicode text, then you should use a string. Because strings are immutable in Python, modifying a string requires creating a modified copy. The closest equivalent to a mutable string is storing individual characters inside a list: Python >>> arr = \"abcd\" >>> arr [ 1 ] 'b' >>> arr 'abcd' >>> # Strings are immutable: >>> arr [ 1 ] = \"e\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object does not support item assignment >>> del arr [ 1 ] Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object doesn't support item deletion >>> # Strings can be unpacked into a list to >>> # get a mutable representation: >>> list ( \"abcd\" ) ['a', 'b', 'c', 'd'] >>> \"\" . join ( list ( \"abcd\" )) 'abcd' >>> # Strings are recursive data structures: >>> type ( \"abc\" ) \"<class 'str'>\" >>> type ( \"abc\" [ 0 ]) \"<class 'str'>\" Remove ads bytes : Immutable Arrays of Single Bytes bytes objects are immutable sequences of single bytes, or integers in the range 0 \u2264 x \u2264 255. Conceptually, bytes objects are similar to str objects, and you can also think of them as immutable arrays of bytes. Like strings, bytes have their own literal syntax for creating objects and are space efficient. bytes objects are immutable, but unlike strings, there\u2019s a dedicated mutable byte array data type called bytearray that they can be unpacked into: Python >>> arr = bytes (( 0 , 1 , 2 , 3 )) >>> arr [ 1 ] 1 >>> # Bytes literals have their own syntax: >>> arr b'\\x00\\x01\\x02\\x03' >>> arr = b \"", "start_char_idx": 2810, "end_char_idx": 4372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63f5c67e-27ee-4d07-b7c3-be6b3c62b744": {"__data__": {"id_": "63f5c67e-27ee-4d07-b7c3-be6b3c62b744", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aef968b0-6853-4a26-9c0e-1a7ca15150d0", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f0c882e725149f11dd9aa38bca55ee6664967d87c689d2dd1a6e0ee5ceacba40", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3d3cb2d-5908-4991-9b0c-28c50cdd0d20", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "10e64d0b8af08c6d42a2a1237e6481f4017703b8cfe5719770f70eab8e7b9467", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e56de99a-dc3d-48d4-93b7-286a0d7d5456", "node_type": "1", "metadata": {}, "hash": "a49088067b1dbb601d3424ed8d86b164f12581aaa2cf42c4332b024e43d34c78", "class_name": "RelatedNodeInfo"}}, "text": "\\x00\\x01\\x02\\x03 \" >>> # Only valid `bytes` are allowed: >>> bytes (( 0 , 300 )) Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> ValueError : bytes must be in range(0, 256) >>> # Bytes are immutable: >>> arr [ 1 ] = 23 Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'bytes' object does not support item assignment >>> del arr [ 1 ] Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'bytes' object doesn't support item deletion bytearray : Mutable Arrays of Single Bytes The bytearray type is a mutable sequence of integers in the range 0 \u2264 x \u2264 255. The bytearray object is closely related to the bytes object, with the main difference being that a bytearray can be modified freely\u2014you can overwrite elements, remove existing elements, or add new ones. The bytearray object will grow and shrink accordingly. A bytearray can be converted back into immutable bytes objects, but this involves copying the stored data in full\u2014a slow operation taking O ( n ) time: Python >>> arr = bytearray (( 0 , 1 , 2 , 3 )) >>> arr [ 1 ] 1 >>> # The bytearray repr: >>> arr bytearray(b'\\x00\\x01\\x02\\x03') >>> # Bytearrays are mutable: >>> arr [ 1 ] = 23 >>> arr bytearray(b'\\x00\\x17\\x02\\x03') >>> arr [ 1 ] 23 >>> # Bytearrays can grow and shrink in size: >>> del arr [ 1 ] >>> arr bytearray(b'\\x00\\x02\\x03') >>> arr . append ( 42 ) >>> arr bytearray(b'\\x00\\x02\\x03*') >>> # Bytearrays can only hold `bytes` >>> # (integers in the range 0 <= x <= 255) >>> arr [ 1 ] = \"hello\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object cannot be interpreted as an integer >>> arr [ 1 ] = 300 Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> ValueError : byte must be in range(0, 256) >>> # Bytearrays can be converted back into bytes objects: >>> # (This will copy the data) >>> bytes ( arr ) b'\\x00\\x02\\x03*' Arrays in Python: Summary There are a number of built-in data structures you can choose from when it comes to implementing arrays in Python. In this section, you\u2019ve focused on core language features and data structures included in the standard library. If you\u2019re willing to go beyond the Python standard library, then third-party packages like NumPy and pandas offer a wide range of fast array implementations for scientific computing and data science. If you want to restrict yourself to the array data structures included with Python, then here are a few guidelines: If you need to store arbitrary objects, potentially with mixed data types, then use a list or a tuple , depending on whether or not you want an immutable data structure. If you have numeric (integer or floating-point) data and tight packing and performance is important, then try out array.array . If you have textual data represented as Unicode characters, then use Python\u2019s built-in str . If you need a mutable string-like data structure, then use a list of characters. If you want to store a contiguous block of bytes, then use the immutable bytes type or a bytearray if you need a mutable data structure. In most cases, I like to start out with a simple list . I\u2019ll only specialize later on if performance or storage space becomes an issue. Most of the time, using a general-purpose array data structure like list gives you the fastest development speed and the most programming convenience. I\u2019ve found that this is usually much more important in the beginning than trying to squeeze out every last drop of performance right from the start. Records, Structs, and Data Transfer Objects Compared to arrays, record data structures provide a fixed number of fields. Each field can have a name and may also have a different type. In this section, you\u2019ll see how to implement records, structs, and plain old data objects in Python using only built-in data types and classes from the standard library. Note: I\u2019m using the definition of a record loosely here. For example, I\u2019m also going to discuss types like Python\u2019s built-in tuple that may or may not be considered records in a strict sense because they don\u2019t provide named fields. Python offers several data types that you can use to implement records, structs, and data transfer objects.", "start_char_idx": 0, "end_char_idx": 4259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e56de99a-dc3d-48d4-93b7-286a0d7d5456": {"__data__": {"id_": "e56de99a-dc3d-48d4-93b7-286a0d7d5456", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aef968b0-6853-4a26-9c0e-1a7ca15150d0", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f0c882e725149f11dd9aa38bca55ee6664967d87c689d2dd1a6e0ee5ceacba40", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63f5c67e-27ee-4d07-b7c3-be6b3c62b744", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f4f7b400baccd5e64beff80c8f7655c437206cdcfdb723061c841bca2f2cefa5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c57fff76-b1c8-47d6-b91a-6f016c7e00d5", "node_type": "1", "metadata": {}, "hash": "ed69e2f1a70960a5981fb6ac4eb8a85be1308865ba8c95cb83f7a7d142c81029", "class_name": "RelatedNodeInfo"}}, "text": "I\u2019ve found that this is usually much more important in the beginning than trying to squeeze out every last drop of performance right from the start. Records, Structs, and Data Transfer Objects Compared to arrays, record data structures provide a fixed number of fields. Each field can have a name and may also have a different type. In this section, you\u2019ll see how to implement records, structs, and plain old data objects in Python using only built-in data types and classes from the standard library. Note: I\u2019m using the definition of a record loosely here. For example, I\u2019m also going to discuss types like Python\u2019s built-in tuple that may or may not be considered records in a strict sense because they don\u2019t provide named fields. Python offers several data types that you can use to implement records, structs, and data transfer objects. In this section, you\u2019ll get a quick look at each implementation and its unique characteristics. At the end, you\u2019ll find a summary and a decision-making guide that will help you make your own picks. Note: This tutorial is adapted from the chapter \u201cCommon Data Structures in", "start_char_idx": 3417, "end_char_idx": 4532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c57fff76-b1c8-47d6-b91a-6f016c7e00d5": {"__data__": {"id_": "c57fff76-b1c8-47d6-b91a-6f016c7e00d5", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca42409f-0bf8-414e-9004-bb4de9e683db", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e624b7ea7e89867def675dedbef7383484f9cb81bd44449098087e53a9c72226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e56de99a-dc3d-48d4-93b7-286a0d7d5456", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "3328fa1a6cfc4803d49689a1569b1c424f6a4b54692d13bcf9cfeb92afbc996b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a958de3-9743-49a0-b17d-b9749d6fafbd", "node_type": "1", "metadata": {}, "hash": "22ebea65c1ab7694581ae7d87792742105257fc39df4100fc02f0446292a9414", "class_name": "RelatedNodeInfo"}}, "text": "Python\u201d in Python Tricks: The Book . If you enjoy what you\u2019re reading, then be sure to check out the rest of the book . Alright, let\u2019s get started! Remove ads dict : Simple Data Objects As mentioned previously , Python dictionaries store an arbitrary number of objects, each identified by a unique key. Dictionaries are also often called maps or associative arrays and allow for efficient lookup, insertion, and deletion of any object associated with a given key. Using dictionaries as a record data type or data object in Python is possible. Dictionaries are easy to create in Python as they have their own syntactic sugar built into the language in the form of dictionary literals . The dictionary syntax is concise and quite convenient to type. Data objects created using dictionaries are mutable, and there\u2019s little protection against misspelled field names as fields can be added and removed freely at any time. Both of these properties can introduce surprising bugs, and there\u2019s always a trade-off to be made between convenience and error resilience: Python >>> car1 = { ... \"color\" : \"red\" , ... \"mileage\" : 3812.4 , ... \"automatic\" : True , ... } >>> car2 = { ... \"color\" : \"blue\" , ... \"mileage\" : 40231 , ... \"automatic\" : False , ... } >>> # Dicts have a nice repr: >>> car2 {'color': 'blue', 'automatic': False, 'mileage': 40231} >>> # Get mileage: >>> car2 [ \"mileage\" ] 40231 >>> # Dicts are mutable: >>> car2 [ \"mileage\" ] = 12 >>> car2 [ \"windshield\" ] = \"broken\" >>> car2 {'windshield': 'broken', 'color': 'blue', 'automatic': False, 'mileage': 12} >>> # No protection against wrong field names, >>> # or missing/extra fields: >>> car3 = { ... \"colr\" : \"green\" , ... \"automatic\" : False , ... \"windshield\" : \"broken\" , ... } tuple : Immutable Groups of Objects Python\u2019s tuples are a straightforward data structure for grouping arbitrary objects. Tuples are immutable\u2014they can\u2019t be modified once they\u2019ve been created. Performance-wise, tuples take up slightly less memory than lists in CPython , and they\u2019re also faster to construct. As you can see in the bytecode disassembly below, constructing a tuple constant takes a single LOAD_CONST opcode, while constructing a list object with the same contents requires several more operations: Python >>> import dis >>> dis . dis ( compile ( \"(23, 'a', 'b', 'c')\" , \"\" , \"eval\" )) 0 LOAD_CONST 4 ((23, \"a\", \"b\", \"c\")) 3 RETURN_VALUE >>> dis . dis ( compile ( \"[23, 'a', 'b', 'c']\" , \"\" , \"eval\" )) 0 LOAD_CONST 0 (23) 3 LOAD_CONST 1 ('a') 6 LOAD_CONST 2 ('b') 9 LOAD_CONST 3 ('c') 12 BUILD_LIST 4 15 RETURN_VALUE However, you shouldn\u2019t place too much emphasis on these differences. In practice, the performance difference will often be negligible, and trying to squeeze extra performance out of a program by switching from lists to tuples will likely be the wrong approach. A potential downside of plain tuples is that the data you store in them can only be pulled out by accessing it through integer indexes. You can\u2019t give names to individual properties stored in a tuple. This can impact code readability. Also, a tuple is always an ad-hoc structure: it\u2019s difficult to ensure that two tuples have the same number of fields and the same properties stored in them. This makes it easy to introduce slip-of-the-mind bugs, such as mixing up the field order.", "start_char_idx": 0, "end_char_idx": 3315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a958de3-9743-49a0-b17d-b9749d6fafbd": {"__data__": {"id_": "6a958de3-9743-49a0-b17d-b9749d6fafbd", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca42409f-0bf8-414e-9004-bb4de9e683db", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e624b7ea7e89867def675dedbef7383484f9cb81bd44449098087e53a9c72226", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c57fff76-b1c8-47d6-b91a-6f016c7e00d5", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1db17837a59819c8e81f08e14f58146238e8922d2d683c364b1e728ff233439d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5e0b498-0265-4d62-b051-922bbf7e2982", "node_type": "1", "metadata": {}, "hash": "aef70adfa5986fd2740985a516d090d14399ac3968ebef5b6e78503b9fed6d4b", "class_name": "RelatedNodeInfo"}}, "text": "In practice, the performance difference will often be negligible, and trying to squeeze extra performance out of a program by switching from lists to tuples will likely be the wrong approach. A potential downside of plain tuples is that the data you store in them can only be pulled out by accessing it through integer indexes. You can\u2019t give names to individual properties stored in a tuple. This can impact code readability. Also, a tuple is always an ad-hoc structure: it\u2019s difficult to ensure that two tuples have the same number of fields and the same properties stored in them. This makes it easy to introduce slip-of-the-mind bugs, such as mixing up the field order. Therefore, I would recommend that you keep the number of fields stored in a tuple as low as possible: Python >>> # Fields: color, mileage, automatic >>> car1 = ( \"red\" , 3812.4 , True ) >>> car2 = ( \"blue\" , 40231.0 , False ) >>> # Tuple instances have a nice repr: >>> car1 ('red', 3812.4, True) >>> car2 ('blue', 40231.0, False) >>> # Get mileage: >>> car2 [ 1 ] 40231.0 >>> # Tuples are immutable: >>> car2 [ 1 ] = 12 Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'tuple' object does not support item assignment >>> # No protection against missing or extra fields >>> # or a wrong order: >>> car3 = ( 3431.5 , \"green\" , True , \"silver\" ) Write a Custom Class: More Work, More Control Classes allow you to define reusable blueprints for data objects to ensure each object provides the same set of fields. Using regular Python classes as record data types is feasible, but it also takes manual work to get the convenience features of other implementations. For example, adding new fields to the __init__ constructor is verbose and takes time. Also, the default string representation for objects instantiated from custom classes isn\u2019t very helpful. To fix that, you may have to add your own __repr__ method,", "start_char_idx": 2642, "end_char_idx": 4562, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5e0b498-0265-4d62-b051-922bbf7e2982": {"__data__": {"id_": "f5e0b498-0265-4d62-b051-922bbf7e2982", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15a3d013-697b-44f0-858f-0bd812ae6062", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "528c2d228e38e664f402732336dbe0906d3f2b726a152265dd05843bfba3f02f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a958de3-9743-49a0-b17d-b9749d6fafbd", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9e695a2b22c3a83a3db3f83c12f2238e2ac9e7191fcdead7860c1bc89071784a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3476a33d-b33a-4729-a42f-f14e4f2222df", "node_type": "1", "metadata": {}, "hash": "d33c190e0dbd6965abb348d0d0f72022e846a79f1fba68f0161b82e4057810c3", "class_name": "RelatedNodeInfo"}}, "text": "which again is usually quite verbose and must be updated each time you add a new field. Fields stored on classes are mutable, and new fields can be added freely, which you may or may not like. It\u2019s possible to provide more access control and to create read-only fields using the @property decorator, but once again, this requires writing more glue code. Writing a custom class is a great option whenever you\u2019d like to add business logic and behavior to your record objects using methods. However, this means that these objects are technically no longer plain data objects: Python >>> class Car : ... def __init__ ( self , color , mileage , automatic ): ... self . color = color ... self . mileage = mileage ... self . automatic = automatic ... >>> car1 = Car ( \"red\" , 3812.4 , True ) >>> car2 = Car ( \"blue\" , 40231.0 , False ) >>> # Get the mileage: >>> car2 . mileage 40231.0 >>> # Classes are mutable: >>> car2 . mileage = 12 >>> car2 . windshield = \"broken\" >>> # String representation is not very useful >>> # (must add a manually written __repr__ method): >>> car1 <Car object at 0x1081e69e8> Remove ads dataclasses.dataclass : Python 3.7+ Data Classes Data classes are available in Python 3.7 and above. They provide an excellent alternative to defining your own data storage classes from scratch. By writing a data class instead of a plain Python class, your object instances get a few useful features out of the box that will save you some typing and manual implementation work: The syntax for defining instance variables is shorter, since you don\u2019t need to implement the .__init__() method. Instances of your data class automatically get nice-looking string representation via an auto-generated .__repr__() method. Instance variables accept type annotations, making your data class self-documenting to a degree. Keep in mind that type annotations are just hints that are not enforced without a separate type-checking tool. Data classes are typically created using the @dataclass decorator , as you\u2019ll see in the code example below: Python >>> from dataclasses import dataclass >>> @dataclass ... class Car : ... color : str ... mileage : float ... automatic : bool ... >>> car1 = Car ( \"red\" , 3812.4 , True ) >>> # Instances have a nice repr: >>> car1 Car(color='red', mileage=3812.4, automatic=True) >>> # Accessing fields: >>> car1 . mileage 3812.4 >>> # Fields are mutable: >>> car1 . mileage = 12 >>> car1 . windshield = \"broken\" >>> # Type annotations are not enforced without >>> # a separate type checking tool like mypy: >>> Car ( \"red\" , \"NOT_A_FLOAT\" , 99 ) Car(color='red', mileage='NOT_A_FLOAT', automatic=99) To learn more about Python data classes, check out the The Ultimate Guide to Data Classes in Python 3.7 . collections.namedtuple : Convenient Data Objects The namedtuple class available in Python 2.6+ provides an extension of the built-in tuple data type. Similar to defining a custom class, using namedtuple allows you to define reusable blueprints for your records that ensure the correct field names are used. namedtuple objects are immutable, just like regular tuples. This means you can\u2019t add new fields or modify existing fields after the namedtuple instance is created. Besides that, namedtuple objects are, well . . . named tuples. Each object stored in them can be accessed through a unique identifier. This frees you from having to remember integer indexes or resort to workarounds like defining integer constants as mnemonics for your indexes. namedtuple objects are implemented as regular Python classes internally. When it comes to memory usage, they\u2019re also better than regular classes and just as memory efficient as regular tuples: Python >>> from collections import namedtuple >>> from sys import getsizeof >>> p1 = namedtuple ( \"Point\" , \"x y z\" )( 1 , 2 , 3 ) >>> p2 = ( 1 , 2 , 3 ) >>> getsizeof ( p1 ) 64 >>> getsizeof ( p2 ) 64 namedtuple objects can be an easy way to clean up your code and make it more readable by enforcing a better structure for your data. I find that going from ad-hoc data types like dictionaries with a fixed format to namedtuple objects helps me to express the intent of my code more clearly. Often when I apply this refactoring, I magically come up with a better solution for the problem I\u2019m facing.", "start_char_idx": 0, "end_char_idx": 4281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3476a33d-b33a-4729-a42f-f14e4f2222df": {"__data__": {"id_": "3476a33d-b33a-4729-a42f-f14e4f2222df", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15a3d013-697b-44f0-858f-0bd812ae6062", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "528c2d228e38e664f402732336dbe0906d3f2b726a152265dd05843bfba3f02f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5e0b498-0265-4d62-b051-922bbf7e2982", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9e95931e8519b2e150d4a29a352cdf8a8a94194499c9892c640c5cbe8db2dc21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "28b4359a-3066-4331-b5af-21fd86111ef6", "node_type": "1", "metadata": {}, "hash": "03ed8440806b56c80bd096a21fd6c4e51761a22744a33199d93da4975acc7f31", "class_name": "RelatedNodeInfo"}}, "text": "namedtuple objects are implemented as regular Python classes internally. When it comes to memory usage, they\u2019re also better than regular classes and just as memory efficient as regular tuples: Python >>> from collections import namedtuple >>> from sys import getsizeof >>> p1 = namedtuple ( \"Point\" , \"x y z\" )( 1 , 2 , 3 ) >>> p2 = ( 1 , 2 , 3 ) >>> getsizeof ( p1 ) 64 >>> getsizeof ( p2 ) 64 namedtuple objects can be an easy way to clean up your code and make it more readable by enforcing a better structure for your data. I find that going from ad-hoc data types like dictionaries with a fixed format to namedtuple objects helps me to express the intent of my code more clearly. Often when I apply this refactoring, I magically come up with a better solution for the problem I\u2019m facing. Using namedtuple objects over regular (unstructured) tuples and dicts can also make your coworkers\u2019 lives easier by making the data that\u2019s being passed around self-documenting, at least to a degree: Python >>> from collections import namedtuple >>> Car = namedtuple ( \"Car\" , \"color mileage automatic\" ) >>> car1 = Car ( \"red\" , 3812.4 , True ) >>>", "start_char_idx": 3489, "end_char_idx": 4630, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28b4359a-3066-4331-b5af-21fd86111ef6": {"__data__": {"id_": "28b4359a-3066-4331-b5af-21fd86111ef6", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "967fa1a4-1290-405c-acd6-d6bf368adccb", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "43b05c63e48e24380c08f17c6639cb583af1cb7e8708a1a725e3e410abdb70ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3476a33d-b33a-4729-a42f-f14e4f2222df", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6f301ae9e37504c4785d9a15e16a854466ed8bd38413a4d16c1459e5739dcc58", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a37049c4-90c7-4bf1-80e7-13d9f1e7a8a8", "node_type": "1", "metadata": {}, "hash": "d4a0e371b90ce03099e2407676ce95ee4c0dc6aa95a2a1ffc03347f24572b54b", "class_name": "RelatedNodeInfo"}}, "text": "# Instances have a nice repr: >>> car1 Car(color=\"red\", mileage=3812.4, automatic=True) >>> # Accessing fields: >>> car1 . mileage 3812.4 >>> # Fields are immtuable: >>> car1 . mileage = 12 Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> AttributeError : can't set attribute >>> car1 . windshield = \"broken\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> AttributeError : 'Car' object has no attribute 'windshield' typing.NamedTuple : Improved Namedtuples Added in Python 3.6, typing.NamedTuple is the younger sibling of the namedtuple class in the collections module. It\u2019s very similar to namedtuple , with the main difference being an updated syntax for defining new record types and added support for type hints . Please note that type annotations are not enforced without a separate type-checking tool like mypy . But even without tool support, they can provide useful hints for other programmers (or be terribly confusing if the type hints become out of date): Python >>> from typing import NamedTuple >>> class Car ( NamedTuple ): ... color : str ... mileage : float ... automatic : bool >>> car1 = Car ( \"red\" , 3812.4 , True ) >>> # Instances have a nice repr: >>> car1 Car(color='red', mileage=3812.4, automatic=True) >>> # Accessing fields: >>> car1 . mileage 3812.4 >>> # Fields are immutable: >>> car1 . mileage = 12 Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> AttributeError : can't set attribute >>> car1 . windshield = \"broken\" Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> AttributeError : 'Car' object has no attribute 'windshield' >>> # Type annotations are not enforced without >>> # a separate type checking tool like mypy: >>> Car ( \"red\" , \"NOT_A_FLOAT\" , 99 ) Car(color='red', mileage='NOT_A_FLOAT', automatic=99) Remove ads struct.Struct : Serialized C Structs The struct.Struct class converts between Python values and C structs serialized into Python bytes objects. For example, it can be used to handle binary data stored in files or coming in from network connections. Structs are defined using a mini language based on format strings that allows you to define the arrangement of various C data types like char , int , and long as well as their unsigned variants. Serialized structs are seldom used to represent data objects meant to be handled purely inside Python code. They\u2019re intended primarily as a data exchange format rather than as a way of holding data in memory that\u2019s only used by Python code. In some cases, packing primitive data into structs may use less memory than keeping it in other data types. However, in most cases that would be quite an advanced (and probably unnecessary) optimization: Python >>> from struct import Struct >>> MyStruct = Struct ( \"i?f\" ) >>> data = MyStruct . pack ( 23 , False , 42.0 ) >>> # All you get is a blob of data: >>> data b'\\x17\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00(B' >>> # Data blobs can be unpacked again: >>> MyStruct . unpack ( data ) (23, False, 42.0) types.SimpleNamespace : Fancy Attribute Access Here\u2019s one more slightly obscure choice for implementing data objects in Python: types.SimpleNamespace . This class was added in Python 3.3 and provides attribute access to its namespace. This means SimpleNamespace instances expose all of their keys as class attributes. You can use obj.key dotted attribute access instead of the obj['key'] square-bracket indexing syntax that\u2019s used by regular dicts. All instances also include a meaningful __repr__ by default. As its name proclaims, SimpleNamespace is simple! It\u2019s basically a dictionary that allows attribute access and prints nicely. Attributes can be added, modified, and deleted freely: Python >>> from types import SimpleNamespace >>> car1 = SimpleNamespace ( color = \"red\" , mileage = 3812.4 , automatic = True ) >>> # The default repr: >>> car1 namespace(automatic=True, color='red', mileage=3812.4) >>> # Instances support attribute access and are mutable: >>> car1 . mileage = 12 >>> car1 . windshield = \"broken\" >>> del car1 .", "start_char_idx": 0, "end_char_idx": 4079, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a37049c4-90c7-4bf1-80e7-13d9f1e7a8a8": {"__data__": {"id_": "a37049c4-90c7-4bf1-80e7-13d9f1e7a8a8", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "967fa1a4-1290-405c-acd6-d6bf368adccb", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "43b05c63e48e24380c08f17c6639cb583af1cb7e8708a1a725e3e410abdb70ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "28b4359a-3066-4331-b5af-21fd86111ef6", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "aca6c5c89b2095ed5e88c5241a57b4b4eb090ef03cd83312204a713e72260d28", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "294091fb-e81f-4982-96f0-b5570932c8cd", "node_type": "1", "metadata": {}, "hash": "a6206b087f50b12206e9d63aab0f25173c9860c375b6b99a52fd644bc45cdd91", "class_name": "RelatedNodeInfo"}}, "text": "This means SimpleNamespace instances expose all of their keys as class attributes. You can use obj.key dotted attribute access instead of the obj['key'] square-bracket indexing syntax that\u2019s used by regular dicts. All instances also include a meaningful __repr__ by default. As its name proclaims, SimpleNamespace is simple! It\u2019s basically a dictionary that allows attribute access and prints nicely. Attributes can be added, modified, and deleted freely: Python >>> from types import SimpleNamespace >>> car1 = SimpleNamespace ( color = \"red\" , mileage = 3812.4 , automatic = True ) >>> # The default repr: >>> car1 namespace(automatic=True, color='red', mileage=3812.4) >>> # Instances support attribute access and are mutable: >>> car1 . mileage = 12 >>> car1 . windshield = \"broken\" >>> del car1 . automatic >>> car1 namespace(color='red', mileage=12, windshield='broken') Records, Structs, and Data Objects in Python: Summary As you\u2019ve seen, there\u2019s quite a number of different options for implementing records or data objects. Which type should you use for data objects in Python? Generally your decision will depend on your use case: If you have only a few fields, then using a plain tuple object may be okay if the field order is easy to remember or field names are superfluous. For example, think of an (x, y, z) point in three-dimensional space. If you need immutable fields, then plain tuples, collections.namedtuple , and typing.NamedTuple are all good options. If you need to lock down field names to avoid typos, then collections.namedtuple and typing.NamedTuple are your friends. If you want to keep things", "start_char_idx": 3278, "end_char_idx": 4899, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "294091fb-e81f-4982-96f0-b5570932c8cd": {"__data__": {"id_": "294091fb-e81f-4982-96f0-b5570932c8cd", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ff25d96-cd3c-4835-90a8-260bd4a95a44", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e3d8993d7dde60ca83d7ac276fac18c56a97595f8537af66f23618a82ef21b1d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a37049c4-90c7-4bf1-80e7-13d9f1e7a8a8", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "663b00f115a024136d02e65874c43cb71b6f4ef5b4914f92e659a7db55ade40d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d28a2407-b258-4094-b0b2-9193147edefb", "node_type": "1", "metadata": {}, "hash": "62e998a8dbcd04f25eedc9ca1521b39704af9845064290ef67d26f68f377fc5a", "class_name": "RelatedNodeInfo"}}, "text": "simple, then a plain dictionary object might be a good choice due to the convenient syntax that closely resembles JSON . If you need full control over your data structure, then it\u2019s time to write a custom class with @property setters and getters . If you need to add behavior (methods) to the object, then you should write a custom class, either from scratch, or using the dataclass decorator, or by extending collections.namedtuple or typing.NamedTuple . If you need to pack data tightly to serialize it to disk or to send it over the network, then it\u2019s time to read up on struct.Struct because this is a great use case for it! If you\u2019re looking for a safe default choice, then my general recommendation for implementing a plain record, struct, or data object in Python would be to use collections.namedtuple in Python 2.x and its younger sibling, typing.NamedTuple in Python 3. Sets and Multisets In this section, you\u2019ll see how to implement mutable and immutable set and multiset (bag) data structures in Python using built-in data types and classes from the standard library. A set is an unordered collection of objects that doesn\u2019t allow duplicate elements. Typically, sets are used to quickly test a value for membership in the set, to insert or delete new values from a set, and to compute the union or intersection of two sets. In a proper set implementation, membership tests are expected to run in fast O (1) time. Union, intersection, difference, and subset operations should take O ( n ) time on average. The set implementations included in Python\u2019s standard library follow these performance characteristics . Just like dictionaries, sets get special treatment in Python and have some syntactic sugar that makes them easy to create. For example, the curly-brace set expression syntax and set comprehensions allow you to conveniently define new set instances: Python vowels = { \"a\" , \"e\" , \"i\" , \"o\" , \"u\" } squares = { x * x for x in range ( 10 )} But be careful: To create an empty set you\u2019ll need to call the set() constructor. Using empty curly-braces ( {} ) is ambiguous and will create an empty dictionary instead. Python and its standard library provide several set implementations. Let\u2019s have a look at them. Remove ads set : Your Go-to Set The set type is the built-in set implementation in Python. It\u2019s mutable and allows for the dynamic insertion and deletion of elements. Python\u2019s sets are backed by the dict data type and share the same performance characteristics. Any hashable object can be stored in a set: Python >>> vowels = { \"a\" , \"e\" , \"i\" , \"o\" , \"u\" } >>> \"e\" in vowels True >>> letters = set ( \"alice\" ) >>> letters . intersection ( vowels ) {'a', 'e', 'i'} >>> vowels . add ( \"x\" ) >>> vowels {'i', 'a', 'u', 'o', 'x', 'e'} >>> len ( vowels ) 6 frozenset : Immutable Sets The frozenset class implements an immutable version of set that can\u2019t be changed after it\u2019s been constructed. frozenset objects are static and allow only query operations on their elements, not inserts or deletions. Because frozenset objects are static and hashable, they can be used as dictionary keys or as elements of another set, something that isn\u2019t possible with regular (mutable) set objects: Python >>> vowels = frozenset ({ \"a\" , \"e\" , \"i\" , \"o\" , \"u\" }) >>> vowels . add ( \"p\" ) Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> AttributeError : 'frozenset' object has no attribute 'add' >>> # Frozensets are hashable and can >>> # be used as dictionary keys: >>> d = { frozenset ({ 1 , 2 , 3 }): \"hello\" } >>> d [ frozenset ({ 1 , 2 , 3 })] 'hello' collections.Counter : Multisets The collections.Counter class in the Python standard library implements a multiset, or bag, type that allows elements in the set to have more than one occurrence. This is useful if you need to keep track of not only if an element is part of a set, but also how many times it\u2019s included in the set: Python >>> from collections import Counter >>> inventory = Counter () >>> loot = { \"sword\" : 1 , \"bread\" : 3 } >>> inventory .", "start_char_idx": 0, "end_char_idx": 4047, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d28a2407-b258-4094-b0b2-9193147edefb": {"__data__": {"id_": "d28a2407-b258-4094-b0b2-9193147edefb", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ff25d96-cd3c-4835-90a8-260bd4a95a44", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e3d8993d7dde60ca83d7ac276fac18c56a97595f8537af66f23618a82ef21b1d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "294091fb-e81f-4982-96f0-b5570932c8cd", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "05d41d7e6116da0fea778a51fdf7c6ca2a78fd5212696eab27fba190edd2e533", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6eaa2898-b426-4723-bccd-b1364c665682", "node_type": "1", "metadata": {}, "hash": "ad5a70365618acc50235c79553093f505f24af1799915fc50519ebd3efaef028", "class_name": "RelatedNodeInfo"}}, "text": "This is useful if you need to keep track of not only if an element is part of a set, but also how many times it\u2019s included in the set: Python >>> from collections import Counter >>> inventory = Counter () >>> loot = { \"sword\" : 1 , \"bread\" : 3 } >>> inventory . update ( loot ) >>> inventory Counter({'bread': 3, 'sword': 1}) >>> more_loot = { \"sword\" : 1 , \"apple\" : 1 } >>> inventory . update ( more_loot ) >>> inventory Counter({'bread': 3, 'sword': 2, 'apple': 1}) One caveat for the Counter class is that you\u2019ll want to be careful when counting the number of elements in a Counter object. Calling len() returns the number of unique elements in the multiset,", "start_char_idx": 3786, "end_char_idx": 4448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6eaa2898-b426-4723-bccd-b1364c665682": {"__data__": {"id_": "6eaa2898-b426-4723-bccd-b1364c665682", "embedding": null, "metadata": {"file_path": "docs\\python\\realpython.com_43_9.txt", "file_name": "realpython.com_43_9.txt", "file_type": "text/plain", "file_size": 4572, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22606178-7cec-4d25-aeba-01fe8862c5f4", "node_type": "4", "metadata": {"file_path": "docs\\python\\realpython.com_43_9.txt", "file_name": "realpython.com_43_9.txt", "file_type": "text/plain", "file_size": 4572, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b0fb31a71ccf28f7a60715b7cae55f86e5bb8093fe61f49d38660efb96ba987d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d28a2407-b258-4094-b0b2-9193147edefb", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "4307351360501180f45cd11556064396344104a65b3f0a4365e7aec089be0766", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c70c81f7-518b-4e9e-9756-6c8d43e93667", "node_type": "1", "metadata": {}, "hash": "dcb2987fa72e3980c8b162851476af1bc1f8c0e649150ace557589f2dcd71756", "class_name": "RelatedNodeInfo"}}, "text": "whereas the total number of elements can be retrieved using sum() : Python >>> len ( inventory ) 3 # Unique elements >>> sum ( inventory . values ()) 6 # Total no. of elements Sets and Multisets in Python: Summary Sets are another useful and commonly used data structure included with Python and its standard library. Here are a few guidelines for deciding which one to use: If you need a mutable set, then use the built-in set type. If you need hashable objects that can be used as dictionary or set keys, then use a frozenset . If you need a multiset, or bag, data structure, then use collections.Counter . Stacks (LIFOs) A stack is a collection of objects that supports fast Last-In/First-Out (LIFO) semantics for inserts and deletes. Unlike lists or arrays, stacks typically don\u2019t allow for random access to the objects they contain. The insert and delete operations are also often called push and pop . A useful real-world analogy for a stack data structure is a stack of plates. New plates are added to the top of the stack, and because the plates are precious and heavy, only the topmost plate can be moved. In other words, the last plate on the stack must be the first one removed (LIFO). To reach the plates that are lower down in the stack, the topmost plates must be removed one by one. Performance-wise, a proper stack implementation is expected to take O (1) time for insert and delete operations. Stacks have a wide range of uses in algorithms. For example, they\u2019re used in language parsing as well as runtime memory management, which relies on a call stack . A short and beautiful algorithm using a stack is depth-first search (DFS) on a tree or graph data structure. Python ships with several stack implementations that each have slightly different characteristics. Let\u2019s take a look at them and compare their characteristics. Remove ads list : Simple, Built-in Stacks Python\u2019s built-in list type makes a decent stack data structure as it supports push and pop operations in amortized O (1) time. Python\u2019s lists are implemented as dynamic arrays internally, which means they occasionally need to resize the storage space for elements stored in them when elements are added or removed. The list over-allocates its backing storage so that not every push or pop requires resizing. As a result, you get an amortized O (1) time complexity for these operations. The downside is that this makes their performance less consistent than the stable O (1) inserts and deletes provided by a linked list\u2013based implementation (as you\u2019ll see below with collections.deque ). On the other hand, lists do provide fast O (1) time random access to elements on the stack, and this can be an added benefit. There\u2019s an important performance caveat that you should be aware of when using lists as stacks: To get the amortized O (1) performance for inserts and deletes, new items must be added to the end of the list with the append() method and removed again from the end using pop() . For optimum performance, stacks based on Python lists should grow towards higher indexes and shrink towards lower ones. Adding and removing from the front is much slower and takes O ( n ) time, as the existing elements must be shifted around to make room for the new element. This is a performance antipattern that you should avoid as much as possible: Python >>> s = [] >>> s . append ( \"eat\" ) >>> s . append ( \"sleep\" ) >>> s . append ( \"code\" ) >>> s ['eat', 'sleep', 'code'] >>> s . pop () 'code' >>> s . pop () 'sleep' >>> s . pop () 'eat' >>> s . pop () Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> IndexError : pop from empty list collections.deque : Fast and Robust Stacks The deque class implements a double-ended queue that supports adding and removing elements from either end in O (1) time (non-amortized). Because deques support adding and removing elements from either end equally well, they can serve both as queues and as stacks. Python\u2019s deque objects are implemented as doubly-linked lists , which gives them excellent and consistent performance for inserting and deleting elements but poor O ( n ) performance for randomly accessing elements in the middle of a stack. Overall, collections.deque is a great choice if you\u2019re looking for a stack data structure in Python\u2019s standard library that has the performance characteristics of a linked-list implementation: Python >>> from collections import deque >>> s = deque () >>> s . append ( \"eat\" ) >>> s . append ( \"sleep\" ) >>> s . append ( \"code\" ) >>> s deque(['eat', 'sleep',", "start_char_idx": 0, "end_char_idx": 4550, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c70c81f7-518b-4e9e-9756-6c8d43e93667": {"__data__": {"id_": "c70c81f7-518b-4e9e-9756-6c8d43e93667", "embedding": null, "metadata": {"file_path": "docs\\python\\scikit-learn.org_46_0.txt", "file_name": "scikit-learn.org_46_0.txt", "file_type": "text/plain", "file_size": 3553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7ce776f-7c12-4ee4-98e5-290e3840f212", "node_type": "4", "metadata": {"file_path": "docs\\python\\scikit-learn.org_46_0.txt", "file_name": "scikit-learn.org_46_0.txt", "file_type": "text/plain", "file_size": 3553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "922313ce3674e6cddc5dfb3e3ddcd3ea79cb12d7ae53607b5787e84d61a2f3a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6eaa2898-b426-4723-bccd-b1364c665682", "node_type": "1", "metadata": {"file_path": "docs\\python\\realpython.com_43_9.txt", "file_name": "realpython.com_43_9.txt", "file_type": "text/plain", "file_size": 4572, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b0fb31a71ccf28f7a60715b7cae55f86e5bb8093fe61f49d38660efb96ba987d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf39dfae-d735-43d3-8526-b1d044b22a27", "node_type": "1", "metadata": {}, "hash": "772349618ebb20c449e79e22572387d7bfae321ab65073592e72b682e3ac52f9", "class_name": "RelatedNodeInfo"}}, "text": "scikit-learn: machine learning in Python \u2014 scikit-learn 1.6.1 documentation Skip to main content Back to top scikit-learn Machine Learning in Python Getting Started Release Highlights for 1.6 Simple and efficient tools for predictive data analysis Accessible to everybody, and reusable in various contexts Built on NumPy, SciPy, and matplotlib Open source, commercially usable - BSD license GitHub Choose version Classification Identifying which category an object belongs to. Applications: Spam detection, image recognition. Algorithms: Gradient boosting , nearest neighbors , random forest , logistic regression , and more... Examples Regression Predicting a continuous-valued attribute associated with an object. Applications: Drug response, stock prices. Algorithms: Gradient boosting , nearest neighbors , random forest , ridge , and more... Examples Clustering Automatic grouping of similar objects into sets. Applications: Customer segmentation, grouping experiment outcomes. Algorithms: k-Means , HDBSCAN , hierarchical clustering , and more... Examples Dimensionality reduction Reducing the number of random variables to consider. Applications: Visualization, increased efficiency. Algorithms: PCA , feature selection , non-negative matrix factorization , and more... Examples Model selection Comparing, validating and choosing parameters and models. Applications: Improved accuracy via parameter tuning. Algorithms: Grid search , cross validation , metrics , and more... Examples Preprocessing Feature extraction and normalization. Applications: Transforming input data such as text for use with machine learning algorithms. Algorithms: Preprocessing , feature extraction , and more... Examples News On-going development: scikit-learn 1.7 (Changelog) . January 2025. scikit-learn 1.6.1 is available for download ( Changelog ). December 2024. scikit-learn 1.6.0 is available for download ( Changelog ). September 2024. scikit-learn 1.5.2 is available for download ( Changelog ). July 2024. scikit-learn 1.5.1 is available for download ( Changelog ). May 2024. scikit-learn 1.5.0 is available for download ( Changelog ). April 2024. scikit-learn 1.4.2 is available for download ( Changelog ). February 2024. scikit-learn 1.4.1.post1 is available for download ( Changelog ). January 2024. scikit-learn 1.4.0 is available for download ( Changelog ). All releases: What's new (Changelog) . Community About us: See people and contributing More Machine Learning: Find related projects Questions? See FAQ , support , and stackoverflow Subscribe to the mailing list Blog: blog.scikit-learn.org Logos & Branding: logos and branding Calendar: calendar LinkedIn: linkedin/scikit-learn Bluesky: bluesky/scikit-learn.org Mastodon: @sklearn YouTube: youtube.com/scikit-learn Facebook: @scikitlearnofficial Instagram: @scikitlearnofficial TikTok: @scikit.learn Discord: @scikit-learn Communication on all channels should respect PSF's code of conduct. Help us, donate! Cite us! Who uses scikit-learn? \"We use scikit-learn to support leading-edge basic research [...]\" \"I think it's the most well-designed ML package I've seen so far.\" \"scikit-learn's ease-of-use, performance and overall variety of algorithms implemented has proved invaluable [...]\" \"The great benefit of scikit-learn is its fast learning curve [...]\" \"It allows us to do AWesome stuff we would not otherwise accomplish.\" \"scikit-learn makes doing advanced analysis in Python accessible to anyone.\" More testimonials... scikit-learn development and maintenance are financially supported by", "start_char_idx": 0, "end_char_idx": 3551, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf39dfae-d735-43d3-8526-b1d044b22a27": {"__data__": {"id_": "bf39dfae-d735-43d3-8526-b1d044b22a27", "embedding": null, "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_0.txt", "file_name": "www.codecademy.com_26_0.txt", "file_type": "text/plain", "file_size": 5040, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6cde27b-0ae9-4884-9481-f01267e47cc4", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_0.txt", "file_name": "www.codecademy.com_26_0.txt", "file_type": "text/plain", "file_size": 5040, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "064a85e456a207baacf9fd2b73d598efe40e017bfcff08a9b3625eaa1a3a4477", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c70c81f7-518b-4e9e-9756-6c8d43e93667", "node_type": "1", "metadata": {"file_path": "docs\\python\\scikit-learn.org_46_0.txt", "file_name": "scikit-learn.org_46_0.txt", "file_type": "text/plain", "file_size": 3553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "922313ce3674e6cddc5dfb3e3ddcd3ea79cb12d7ae53607b5787e84d61a2f3a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e93811e-0bd8-460c-87f6-d47d381cce9f", "node_type": "1", "metadata": {}, "hash": "b3530aa9142d31114a1d88671cd5217f6f727bfab155d216b60917beb86fc609", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python 3 | Codecademy Skip to Content Course Learn Python 3 Learn the basics of Python 3.12, one of the most powerful, versatile, and in-demand programming languages today. 4.6 4.58 out of 5 stars 11,210 ratings Diagonal B Regular This course includes AI assistance for guided coding help Projects to apply new skills Quizzes to test your knowledge A certificate of completion Start 2,958,115 learners enrolled Diagonal B Regular This course includes AI assistance for guided coding help Projects to apply new skills Quizzes to test your knowledge A certificate of completion Skill level Beginner Time to complete Average based on combined completion rates \u2014 individual pacing in lessons, projects, and quizzes may vary 23 hours Projects 13 Prerequisites None About this course If you\u2019re looking for a programming language that\u2019s flexible and easy to read, try learning Python. It\u2019s one of the most popular languages today, and programming in Python is used for everything from web and software development to data science and analytics to quality assurance. Skills you'll gain Write Python 3 programs Simplify the code you write Take your skills off-platform Preview Syllabus 14 lessons \u2022 13 projects \u2022 13 quizzes Expand all sections 1 Hello World Get started with Python syntax in this lesson and then create a point of sale system for a furniture store! 2 Control Flow Learn how to build control flow into your python code by including if, else, and elif statements. Expect to learn all you need to know about boolean variables and logical operators. 3 Lists Learn about lists, a data structure in Python used to store ordered groups of data. 4 Loops Loops are structures that let you repeat Python code over and over. Learn how to read loops and write them to solve your own problems. 5 Functions Learn about code reuse with Python functions. Apply that knowledge to create functions for famous physics formulas. 6 Python: Code Challenges (Optional) Optional code challenge to test your Python knowledge! 7 Strings Learn all about the Python string object. Figure out how to automatically create, rearrange, reassign, disassemble, and reassemble blocks of text! Certificate of completion available with Plus or Pro Earn a certificate of completion and showcase your accomplishment on your resume or LinkedIn. Show all 13 modules Start The platform Hands-on learning AI-assisted learning Make progress faster with our AI Learning Assistant, a tool that automatically understands your current course, instructions, and solution code \u2014 and gives you instant, personalized feedback. Real-world projects Take what you're learning into the real world. Choose from guided projects that help you solidify new concepts \u2014 or test yourself with independent projects designed to build your portfolio. Job-readiness checker See how well your skills and experience meet the requirements for jobs you're interested in. AI generates a personalized report to show you how ready you are for your dream job and where to improve to qualify for a role. Interview simulator Use AI to identify strengths and get personalized, actionable feedback to improve your interviewing skills. Easily see what's needed to improve your skills \u2014 no matter what stage you're at in your career. Assessments Test new skills as you learn them so you can better understand and apply new concepts. You'll also see which topics need more review and get practice recommendations to continue to improve. Explore features Projects in this course practice Project Receipts for Lovely Loveseats Keep receipts for your lovely loveseats. Programming is a treat with this sweet suite of feats! Use strings and numbers to save a catalog of furniture, then perform concatenation and math calculations to create a receipt. practice Project Block Letters Display your initials on screen in block characters to create an ASCII art. practice Project Magic 8-Ball We\u2019ve learned about and explored a powerful tool in Python \u2014 control flow! It\u2019s so powerful, in fact, that it can be used to tell someone\u2019s fortune. Diagonal A Dense Meet the creator of the course Meet the full team Checker Dense Alisha Grama Senior Instructional Designer, Computer Science at Codecademy Alisha is a Senior Instructional Designer in the computer science domain at Codecademy. Alisha majored in Computer Science and minored in Ethics at the University of Rochester, where she gained experience as a Teaching Assistant. Before joining Codecademy, she taught STEM concepts to secondary students, including as the Lead Algebra Teacher at a Brooklyn charter school. Meet the full team Grid Regular Grid Regular Earn a certificate of completion Show your network you've done the work by earning a certificate of completion for each course or path you finish. Show proof Receive a certificate that demonstrates you've completed a course or path. Build a collection The more courses and paths you complete, the more certificates you collect. Share with your network Easily add certificates", "start_char_idx": 0, "end_char_idx": 5014, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e93811e-0bd8-460c-87f6-d47d381cce9f": {"__data__": {"id_": "4e93811e-0bd8-460c-87f6-d47d381cce9f", "embedding": null, "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_1.txt", "file_name": "www.codecademy.com_26_1.txt", "file_type": "text/plain", "file_size": 4224, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2f098cf3-f738-459c-8fb1-bea1b50fb09a", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_1.txt", "file_name": "www.codecademy.com_26_1.txt", "file_type": "text/plain", "file_size": 4224, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7fc7ae970591bc7e99ec7b98eca01befa0812c17f0f68e7a29e0ca295c494c3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf39dfae-d735-43d3-8526-b1d044b22a27", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_0.txt", "file_name": "www.codecademy.com_26_0.txt", "file_type": "text/plain", "file_size": 5040, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "064a85e456a207baacf9fd2b73d598efe40e017bfcff08a9b3625eaa1a3a4477", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7bfdf86b-4088-4db3-8083-c981f833ab54", "node_type": "1", "metadata": {}, "hash": "69140b69e230daf45200cfd3229d25221c3770af91deef9c6d31ec1a9d9e1c0a", "class_name": "RelatedNodeInfo"}}, "text": "of completion to your LinkedIn profile to share your accomplishments. Learn Python 3 course ratings and reviews 4.6 4.58 out of 5 stars 11,210 ratings 5 stars 67% 4 stars 27% 3 stars 5% 2 stars 1% 1 star 1% Checker Dense Awesome course, understandable from the beginner and able to guide you step-by-step into using python for real stuff, not just for academic knowledge. LM Verified Learner Checker Dense Interactive and fun, concepts separated into nice and manageable chunks, so the the learning at no point feels like a chore and the next goal is always within reach. Matago L. Verified Learner Checker Dense The course was very well made. All concepts were explained very clearly and I really appreciate lot of examples and interactive elements. The pace of the course was slower which is ideal for beginners. I recommend to everyone who wants to get started in programming. Jana P. Verified Learner Our learners work at Google Logo Meta Logo Apple Logo EA Logo Amazon Logo IBM Logo Microsoft Logo Reddit Logo Spotify Logo Uber Logo YouTube Logo Instagram Logo Frequently asked questions about Python 3 What is Python 3? Python is a powerful and flexible general-purpose language with many applications. Python 3 is the latest version of the language, and it\u2019s great for new and seasoned developers alike. In fact, it\u2019s one of the most popular programming languages in the world. What is Python 3 used for? What kind of jobs can Python 3 get me? Why is Python so popular as a first coding language? What do I need to know before learning Python? Is there a Python 1 and 2? Should I Learn Python? Stephan Miller Jun 2, 2021 If you\u2019re debating on whether or not you should learn Python, the answer is probably yes. As any developer will attest, it\u2019s a great addition to almost any tech stack \u2014 and it consistently ranks highly among the most popularly used programming languages. Python\u2019s popularity stems largely from its power and versatility. Below, we\u2019ll explore the reasons behind Python\u2019s popularity and its various applications to help you decide whether or not the language is right for you. Continue reading Join over 50 million learners and start Learn Python 3 today! Start Looking for something else? Related resources Article What is Python? What is Python, and what can it do? Article Python Syntax Guide for Beginners Learn Python syntax with this beginner-friendly guide. Understand Python indentation, print statements, variables, comments, user input, and more with examples. Article How to Build a Python Script: A Beginner\u2019s Guide to Python Scripting Learn scripting and how to build Python scripts from scratch. Set up your environment, structure your code, run the script, and explore real examples with tips to get started. Related courses and paths Free course Python for Programmers An introduction to the basic syntax and fundamentals of Python for experienced programmers. Checker Dense Intermediate 3 hours Free course Learn Python 2 Learn the basics of the world's fastest growing and most popular programming language used by software engineers, analysts, data scientists, and machine learning engineers alike. Checker Dense Beginner Friendly 17 hours Free course Learn the Basics of Programming with Codecademy This course is for new programmers who aren't sure what they want to learn about. Take this course to jumpstart your learning journey! Checker Dense Beginner Friendly 1 hour Browse more topics Cloud computing 2,682,641 learners enrolled DevOps 2,173,862 learners enrolled Python 3,952,609 learners enrolled IT 2,797,490 learners enrolled Data engineering 2,574,392 learners enrolled AI 2,255,993 learners enrolled Data analytics 2,838,390 learners enrolled Data science 4,898,559 learners enrolled Code foundations 7,983,871 learners enrolled View full catalog Checker Dense Unlock additional features with a paid plan Practice Projects Guided projects that help you solidify the skills and concepts you're learning. Assessments Auto-graded quizzes and immediate feedback help you reinforce your skills as you learn. Certificate of Completion Earn a document to prove you've completed a course or path that you can share with your network. See pricing and plans", "start_char_idx": 0, "end_char_idx": 4206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bfdf86b-4088-4db3-8083-c981f833ab54": {"__data__": {"id_": "7bfdf86b-4088-4db3-8083-c981f833ab54", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_0.txt", "file_name": "www.dataquest.io_42_0.txt", "file_type": "text/plain", "file_size": 5470, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ebb29ef-17bd-4981-a480-e2638c10fdc1", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_0.txt", "file_name": "www.dataquest.io_42_0.txt", "file_type": "text/plain", "file_size": 5470, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ccfb2d329d67c28b48b53f5e6bc72e71080788be78e61acc34981a0e6be88676", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e93811e-0bd8-460c-87f6-d47d381cce9f", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_1.txt", "file_name": "www.codecademy.com_26_1.txt", "file_type": "text/plain", "file_size": 4224, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7fc7ae970591bc7e99ec7b98eca01befa0812c17f0f68e7a29e0ca295c494c3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d5c12dd9-2d7b-4c47-ae88-8659df1b4fe4", "node_type": "1", "metadata": {}, "hash": "9ea92e116213e19eb0bd8739bf06d757b075738c1dff30c29a0f056c9b398f29", "class_name": "RelatedNodeInfo"}}, "text": "Python Tutorials: A Beginner's Guide \u2013 Dataquest Complete Guide to Python A collection of Python tutorials, practice problems, cheat sheet, guided projects, and frequently asked questions. Main Python Guide Page - You are here Tutorial 1: Introduction to Python Programming Tutorial 2: Basic Operators and Data Structures in Python Tutorial 3: Python Functions and Jupyter Notebook Tutorial 4: Intermediate Python for Data Science Python Cheat Sheet and PDF Download Enroll for free This comprehensive guide, featuring Python tutorials, a cheat sheet, and real-world data science projects, offers everything you need to get started with Python for data science. The included FAQs address common challenges, making it an essential resource for Python beginners. Python Tutorials The four Python tutorials summarized below will help support you on your journey to learning Python for data science. Each tutorial is easily accessible with a simple click and is thoughtfully designed to build strong foundational skills. However, If you're just starting out and want to actively learn Python directly in your browser, enroll in Dataquest's Data Scientist in Python skill path for free. 1. Introduction to Python Programming Introduction to Python Programming \u2014 here's a breakdown of what this introduction to Python tutorial teaches: Lesson 1 \u2013 Python Programming Learn the concept of programming as giving instructions to a computer Understand Python's syntax and how it processes simple arithmetic operations Write and execute basic Python code using the print() function Lesson 2 \u2013 Python Variables Create and use variables to store and manipulate data efficiently Understand how variables can be updated and used in calculations Apply variables to represent and analyze real-world data Lesson 3 \u2013 Python Data Types Differentiate between integers, floats, and strings in Python Use the type() function to identify data types and avoid calculation errors Manipulate different data types to perform various analytical tasks Lesson 4 \u2013 Python Lists Create and manipulate lists to store multiple items of different data types Use indexing to access specific elements within a list Apply lists to organize and analyze complex datasets efficiently 2. Basic Operators and Data Structures in Python Basic Operators and Data Structures in Python \u2014 here's a breakdown of what this introduction to Python tutorial teaches: Lesson 1 \u2013 Python For Loops Understand the structure and functionality of for loops in Python Use for loops to iterate over lists and perform actions on each item Apply for loops to process large datasets efficiently Lesson 2 \u2013 Making Decisions with Python: If, Else, and Elif Statements Learn how to use if , else , and elif statements for conditional execution Apply comparison operators like > , < , == , and != in conditional statements Use conditional statements to categorize data based on specific criteria Lesson 3 \u2013 Working with Multiple Conditions in Python Combine multiple conditions using logical operators Create complex decision trees with nested conditional statements Apply multiple conditions to categorize data effectively Lesson 4 \u2013 Organizing Data with Python Dictionaries Understand the structure and benefits of Python dictionaries Create and manipulate key-value pairs in dictionaries Use dictionaries to organize and access complex datasets Lesson 5 \u2013 Creating Frequency Tables with Python Dictionaries Utilize dictionaries to create frequency tables from datasets Convert raw counts to proportions and percentages Analyze data distributions using frequency tables Lesson 6 \u2013 Bringing It All Together Combine for loops, conditional statements, and dictionaries in data analysis Create sophisticated data processing workflows Apply learned concepts to solve real-world data analysis problems 3. Python Functions and Jupyter Notebook Python Functions and Jupyter Notebook \u2014 here's a breakdown of what this introduction to Python tutorial teaches: Lesson 1 \u2013 Using Built-in Functions and Creating Functions Utilize Python's built-in functions like sum() , len() , and max() for efficient data analysis Create custom functions to package repetitive operations and improve code organization Understand the concept of function parameters and arguments Lesson 2 \u2013 Arguments, Parameters, and Debugging Differentiate between function parameters and arguments for more flexible code Use keyword and positional arguments when calling functions Implement debugging techniques, such as strategic print() statements, to troubleshoot functions Lesson 3 \u2013 Built-in Functions and Multiple Return Statements Explore advanced uses of built-in functions for data manipulation Implement multiple return statements to create more versatile functions Avoid common pitfalls, such as shadowing built-in functions Lesson 4 \u2013 Returning Multiple Variables and Function Scopes Return multiple variables from a single function using tuples Understand local and global scopes to manage variable accessibility Use tuple unpacking to assign multiple returned values to separate variables Lesson 5 \u2013 Learn and Install Jupyter Notebook Install Jupyter Notebook through the Anaconda distribution Navigate the Jupyter Notebook interface and execute code in cells Utilize magic commands like %history and %timeit for enhanced functionality Guided Project: Profitable App Profiles for the App Store and Google Play Markets Apply Python", "start_char_idx": 0, "end_char_idx": 5432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5c12dd9-2d7b-4c47-ae88-8659df1b4fe4": {"__data__": {"id_": "d5c12dd9-2d7b-4c47-ae88-8659df1b4fe4", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_1.txt", "file_name": "www.dataquest.io_42_1.txt", "file_type": "text/plain", "file_size": 4511, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4542a351-b38d-4139-bdf2-e0e5e9ccdb7e", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_1.txt", "file_name": "www.dataquest.io_42_1.txt", "file_type": "text/plain", "file_size": 4511, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d59d7cc771189a8ed1c7d172889b5bf8de556749e8068dda248b0c5718646fd2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7bfdf86b-4088-4db3-8083-c981f833ab54", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_0.txt", "file_name": "www.dataquest.io_42_0.txt", "file_type": "text/plain", "file_size": 5470, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ccfb2d329d67c28b48b53f5e6bc72e71080788be78e61acc34981a0e6be88676", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da184d41-8771-494e-b1f2-3b6b6a55ccd1", "node_type": "1", "metadata": {}, "hash": "3c72e1188cef98e0b8f9841e201a2cf2a58ad135cd49b75474935f2a91c09415", "class_name": "RelatedNodeInfo"}}, "text": "functions and Jupyter Notebook to analyze real-world app store data Create custom functions for data exploration and frequency table generation Combine multiple functions to perform complex data analysis tasks efficiently 4. Intermediate Python for Data Science Intermediate Python for Data Science \u2014 here's a breakdown of what this introduction to Python tutorial teaches: Lesson 1: Cleaning and Preparing Data in Python Use the replace() method to clean and standardize string data Create functions to remove multiple unwanted characters from strings Implement data cleaning techniques to handle inconsistencies in real-world datasets Lesson 2: Python Data Analysis Basics Develop functions to summarize and explore datasets efficiently Utilize string formatting to present analysis results clearly Apply basic data analysis techniques to extract insights from datasets Lesson 3: Object-Oriented Python: A Powerful Approach for Data Science Understand the fundamentals of object-oriented programming (OOP) in Python Create classes to organize and structure data analysis code Implement methods to perform operations on data within class objects Lesson 4: Working with Dates and Times in Python Use the datetime module to manipulate and analyze temporal data Parse dates from strings using strptime() and format dates with strftime() Perform calculations and comparisons with datetime objects Guided Project: Exploring Hacker News Posts Apply data cleaning and analysis techniques to a real-world dataset Categorize and analyze posts based on their titles and creation times Extract insights about user engagement and posting patterns on Hacker News Python Practice Problems Test your knowledge with the Python exercises below. For additional practice problems and real-time feedback, try our interactive coding environment , great for Python practice online. 1. Helping Alice Compute Her GPA In America, the metric that is used to evaluate a student's performance is the Grade Point Average (GPA). For the purpose of this problem, let's assume that the GPA of a student is calculated by carrying out the following sequence of steps: Multiply the individual grades of each course by the number of weekly hours and add them together. Calculate the total number of weekly hours. Divide the result from step 1 by the result of step 2. For example, suppose that you have five courses \u2014 Mathematics , History , Science , Art , and English \u2014 and the following table gives your grades and course hours: Course Grade Hours Mathematics 3 4 History 3 2 Science 4 3 Art 2 2 English 3 3 We can compute the GPA corresponding to the above table by following the three steps mentioned above. We multiply each grade by the number of hours and add them together: $$ 3 \\times 4 + 3 \\times 2 + 4 \\times 3 + 2 \\times 2 + 3 \\times 3 = 12 + 6 + 12 + 4 + 9 = 43 $$ We add together the number of hours of each course: $$ 4 + 2 + 3 + 2 + 3 = 14 $$ We divide the result from the first step by the result from the second step: $$ GPA = \\frac{43}{14} \\approx 3.07 $$ Instructions Create a variable gpa and assign it the value of Alice's GPA using the information contained in the following table (note that the table is different from the one above): Course Grade Hours Mathematics 5 4 History 2 2 Science 5 3 Art 3 2 English 2 3 Hint Follow the three steps above. Compute $$ 5 \\times 4 + 2 \\times 2 + 5 \\times 3 + 3 \\times 2 + 2 \\times 3 $$ and assign the result to a variable. Compute $$ 4 + 2 + 3 + 2 + 3 $$ and assign the result to a variable. Divide the first value by the second one. Answer step_1 = 5 * 4 + 2 * 2 + 5 * 3 + 3 * 2 + 2 * 3 step_2 = 4 + 2 + 3 + 2 + 3 gpa = step_1 / step_2 Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. Try it here 2. Printing Stars In this exercise, we'll ask you to create a long string programmatically, i.e., we expect you to build the required string using a small Python program and not by writing the string explicitly by hand. Instructions Assign a string of length 128 that contains 128 times the character * to a variable named stars . Hint Starting with stars = '*' , you can use the expression stars += stars a few times to achieve the goal. Answer # solution 1: stars = '*' stars += stars stars += stars stars += stars stars += stars stars += stars stars += stars stars += stars # solution 2: stars = '*' * 128 Practice solving this Python exercise using our interactive coding environment", "start_char_idx": 0, "end_char_idx": 4505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da184d41-8771-494e-b1f2-3b6b6a55ccd1": {"__data__": {"id_": "da184d41-8771-494e-b1f2-3b6b6a55ccd1", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b80efd05-328d-4436-ab36-be2104d4ba82", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9990ca3f0f14fc526b62fdddce3d6b1dcd28d4949a992fb892edf7da4cb82886", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5c12dd9-2d7b-4c47-ae88-8659df1b4fe4", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_1.txt", "file_name": "www.dataquest.io_42_1.txt", "file_type": "text/plain", "file_size": 4511, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d59d7cc771189a8ed1c7d172889b5bf8de556749e8068dda248b0c5718646fd2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "235373c6-f946-4c7c-94f3-08980a796d28", "node_type": "1", "metadata": {}, "hash": "2b28b77f1fb530b3aae457b6062bd5bfbff1bfdf31e4eafc6ab6265dcbf1a98e", "class_name": "RelatedNodeInfo"}}, "text": "designed for Python practice online with real-time feedback. 3. Printing All Values The list lines contains the sentences of a poem. Your task is to print them to the screen. lines = [\"My candle burns at both ends;\", \"It will not last the night;\", \"But ah, my foes, and oh, my friends \u2014\", \"It gives a lovely light.\"] Instructions Print all sentences contained in the lines list, one per line. Hint Use a for loop and a print() statement inside it. Answer lines = [\"My candle burns at both ends;\", \"It will not last the night;\", \"But ah, my foes, and oh, my friends \u2014\", \"It gives a lovely light.\"] # Print each line for line in lines: print(line) Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. 4. Range For Loop In this practice problem, you will have to print all numbers from 0 (inclusive) up to N (inclusive). For this, we recommend that you use the range() built-in function . You can use for var_name in range(2, 7): to iterate a variable named var_name over the numbers from 2 to 6 . Note that the end of the range, 7, is exclusive. Therefore, the iteration will end at 6. For example: for i in range(2, 7): print(i) 2 3 4 5 6 By default, the start of the range is 0. So if you only give one argument, it will be considered as the end of the range: For example: for i in range(7): print(i) 0 1 2 3 4 5 6 Instructions Assume the variable N = 11 has been initialized. Your task is to print all values from 0 to N (inclusive). Hint Use a for loop over range(N + 1) . Answer N = 11 # Print all values from 0 to N (inclusive) for value in range(N + 1): print(value) Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. 5. Understanding Function Scope 1 What will be the value of x after executing the following code: x = [] def f(): x = [] x.append(1) x.append(2) x.append(3) return x f() print(x) Instructions We propose a few possible answers: answer1 = None answer2 = [] answer3 = [1, 2, 3] Which answer do you think is correct? Hint You can figure out the answer by running the code. But try to avoid it and understand why the answer is what it is. Answer answer1 = None answer2 = [] answer3 = [1, 2, 3] # Explanation: \"\"\" The variable x inside f() is not the same as x outside of it. Therefore, x outside the function never gets modified when we call f(). \"\"\" correct = answer2 Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. 6. Understanding Function Scope 2 What will be the value of x after executing the following code: x = [] def f(): x = [] x.append(1) x.append(2) x.append(3) f() print(x) Instructions We propose a few possible answers: answer1 = None answer2 = [] answer3 = [1, 2, 3] Which answer do you think is correct? Hint You can figure out the answer by running the code. But try to avoid it and understand why the answer is what it is. Answer answer1 = None answer2 = [] answer3 = [1, 2, 3] # Explanation: \"\"\" The variable x inside f() is not the same as x outside of it. Therefore, x outside the function never gets modified when we call f(). \"\"\" correct = answer2 Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. 7. Person Class In this practice problem, you'll create a class to represent a person. For simplicity, we will only store the first and last names of a person. We want you to implement a class named Person with the following methods: __init__(self, first_name, last_name) : This method creates a Person instance by storing first_name into self.first_name and last_name into self.last_name . __str__(self) : This method computes a string representation of this person. The format of this string should be the first name, followed by a space, and then the last name.", "start_char_idx": 0, "end_char_idx": 3962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "235373c6-f946-4c7c-94f3-08980a796d28": {"__data__": {"id_": "235373c6-f946-4c7c-94f3-08980a796d28", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b80efd05-328d-4436-ab36-be2104d4ba82", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9990ca3f0f14fc526b62fdddce3d6b1dcd28d4949a992fb892edf7da4cb82886", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da184d41-8771-494e-b1f2-3b6b6a55ccd1", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0afba234d8a5df732b3b27efcebfa0bf97544d42742208689cfc880bfb8bb5ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f0a2bf1-5330-4a7a-b12c-c945185cb980", "node_type": "1", "metadata": {}, "hash": "92b315fe49964734ada4f94a68a54b3858badc536c3eb621ebb8a57c4c903796", "class_name": "RelatedNodeInfo"}}, "text": "Therefore, x outside the function never gets modified when we call f(). \"\"\" correct = answer2 Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. 7. Person Class In this practice problem, you'll create a class to represent a person. For simplicity, we will only store the first and last names of a person. We want you to implement a class named Person with the following methods: __init__(self, first_name, last_name) : This method creates a Person instance by storing first_name into self.first_name and last_name into self.last_name . __str__(self) : This method computes a string representation of this person. The format of this string should be the first name, followed by a space, and then the last name. In each name, we want all characters to be in lower case, except for the first one that should be in upper case. Examples of usage: person = Person('bruno', 'LopeZ') print(person) Bruno Lopez person = Person('aNNa', 'martin') print(person) Anna Martin Instructions Define a class named Person . Define the __init__() method with three arguments: self : The self-reference of the class instance. first_name : The first name of the person. last_name : The last name of the person. Implement the __init__() method so that it stores first_name", "start_char_idx": 3164, "end_char_idx": 4502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f0a2bf1-5330-4a7a-b12c-c945185cb980": {"__data__": {"id_": "1f0a2bf1-5330-4a7a-b12c-c945185cb980", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6d6afd6-fe3e-4f24-8a4e-6166050b8107", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "09317ecfadc093c7a1f47330bb1b501280c53e7e1e257d96c0eb40dae50ec3b9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "235373c6-f946-4c7c-94f3-08980a796d28", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ce2bf177e5cf763a63615e4d7ebd45b0a9cb4eb6778bfc2bacb351ccf09f6c4f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "719b2943-c657-41b3-8f04-60636a780b86", "node_type": "1", "metadata": {}, "hash": "5da6b013a6d0925ad415396e106c239178de6c093fafad4a9a2988ec2f3b182d", "class_name": "RelatedNodeInfo"}}, "text": "in self.first_name and last_name in self.last_name . Define a __str__() method with one argument: self : The self-reference of the class instance. Implement the __str__() method so that it returns a string representation of this person. The format of this string should be the first name, followed by a space, and then the last name. In each name, we want all characters to be in lower case, except for the first one that should be in upper case. Optional steps to test your solution: Create an instance of Person using \"EmiLia\" for the first name and \"GomEZ\" as the last name and assign it to a variable named person . Print the value of person . The result should be Emilia Gomez . Hint To make all characters of a string uppercase, you can use the str.upper() method . In the same way, to make all characters in a string lowercase, you can use the str.lower() method . Answer class Person: def __init__(self, first_name, last_name): self.first_name = first_name[0].upper() + first_name[1:].lower() self.last_name = last_name[0].upper() + last_name[1:].lower() def __str__(self): return '{} {}'.format(self.first_name, self.last_name) # Example usage person = Person(\"EmiLia\", \"GomEZ\") print(person) Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. 8. 2D Points In this practice problem, you'll create a class to represent points in two dimensions. A point in two dimensions is essentially a pair of numbers. The following figure shows points (0, 0) , (2, 4) and (4, 1) : We want you to implement a class named Point2D with the following methods: __init__(self, x, y) : This method creates a Point2D instance by storing x into self.x and y into self.y . distance(self, other) : This method computes the distance between points self and other . The distance between two points (x 1 , y 1 ) and (x 2 , y 2 ) is calculated with the following formula: \\[ \\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2} \\] For example, the distance between points (2, 4) and (4, 1) is approximately equal to 3.605551, as shown in the figure: In Python, you can compute the square root of a number by using the math.sqrt() function from the math module. Here are a few examples: import math print(math.sqrt(9)) print(math.sqrt(1)) print(math.sqrt(42)) 3.0 1.0 6.48074069840786 Here is an example of how someone might use your class once implemented: point1 = Point2D(2, 4) point2 = Point2D(4, 1) distance = point1.calculate_distance(point2) print(distance) 3.605551275463989 Instructions Define a class named Point2D . Define the __init__() method with three arguments: self : The self-reference of the class instance. x : The value of the x-coordinate. y : The value of the y-coordinate. Implement the __init__() method so that it stores x in self.x and y in self.y . Define a calculate_distance() method with two arguments: self : The self-reference of the class instance. other : Another instance of Point2D to which we want to compute the distance. Implement the calculate_distance() method so that it returns the distance between this point and the one given as argument. Optional steps to test your solution: Create an instance of Point2D to represent point (3, 4) and assign it to variable point1 . Create an instance of Point2D to represent point (9, 5) and assign it to variable point2 . Test your class by calculating the distance between point1 and point2 and assign the result to a variable named distance . Print the value of distance . The result should be approximately equal to 6.082762530298219 . Hint Remember to pass the self argument as the first argument of both methods. Remember to import the math module and use the math.sqrt() function to compute square roots.", "start_char_idx": 0, "end_char_idx": 3745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "719b2943-c657-41b3-8f04-60636a780b86": {"__data__": {"id_": "719b2943-c657-41b3-8f04-60636a780b86", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6d6afd6-fe3e-4f24-8a4e-6166050b8107", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "09317ecfadc093c7a1f47330bb1b501280c53e7e1e257d96c0eb40dae50ec3b9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f0a2bf1-5330-4a7a-b12c-c945185cb980", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d67a757d980fc2e445792df06005d22276d5732886d71332c94d5b9a16fa32d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c207359-0ea3-4dcd-8375-2db0e3e09c18", "node_type": "1", "metadata": {}, "hash": "c3de525da6965b91b98227be0a73d4e4105f5918f339d5dbfd3519c41947e880", "class_name": "RelatedNodeInfo"}}, "text": "other : Another instance of Point2D to which we want to compute the distance. Implement the calculate_distance() method so that it returns the distance between this point and the one given as argument. Optional steps to test your solution: Create an instance of Point2D to represent point (3, 4) and assign it to variable point1 . Create an instance of Point2D to represent point (9, 5) and assign it to variable point2 . Test your class by calculating the distance between point1 and point2 and assign the result to a variable named distance . Print the value of distance . The result should be approximately equal to 6.082762530298219 . Hint Remember to pass the self argument as the first argument of both methods. Remember to import the math module and use the math.sqrt() function to compute square roots. Answer import math class Point2D: def __init__(self, x, y): self.x = x self.y = y def calculate_distance(self, other): dx = self.x - other.x dy = self.y - other.y return math.sqrt(dx * dx + dy * dy) # Example usage point1 = Point2D(3, 4) point2 = Point2D(9, 5) distance = point1.calculate_distance(point2) print(distance) Practice solving this Python exercise using our interactive coding environment designed for Python practice online with real-time feedback. Python Cheat Sheet Check out our comprehensive Python Cheat Sheet that provides a quick reference for essential Python commands. You can also download the Python Cheat Sheet as a PDF. Python Practice The best way to get Python practice is to work on a real world challenge in the form of projects. Use these Dataquest guided projects to test your skills and show off your knowledge to potential employeers by including them in your portfolio. 1. Profitable App Profiles for the App Store and Google Play Markets Difficulty Level: Beginner Overview In this beginner-level guided project , you'll step into the role of a data scientist for a company that builds ad-supported mobile apps. Using Python and", "start_char_idx": 2935, "end_char_idx": 4910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c207359-0ea3-4dcd-8375-2db0e3e09c18": {"__data__": {"id_": "3c207359-0ea3-4dcd-8375-2db0e3e09c18", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_4.txt", "file_name": "www.dataquest.io_42_4.txt", "file_type": "text/plain", "file_size": 5592, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e598d0a4-f800-49cb-af2c-0fedd271a221", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_4.txt", "file_name": "www.dataquest.io_42_4.txt", "file_type": "text/plain", "file_size": 5592, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ca3205273807fa073b1caf83a3e0fc03eb182f3aacbaf83507da6da40bf57f72", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "719b2943-c657-41b3-8f04-60636a780b86", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "00a4cedc42786d36b0347d841e65fd2d593d18bbbb53ec72e7b79b361b4b6cdc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7c7cc0a-e00d-4bb8-be08-49cb3f1ca6c1", "node_type": "1", "metadata": {}, "hash": "297dae0c13c0a9088afec9a6f78560dbb963e8b2246ecfba7f1ce1a40d091e99", "class_name": "RelatedNodeInfo"}}, "text": "Jupyter Notebook, you'll analyze real datasets from the Apple App Store and Google Play Store to identify app profiles that attract the most users and generate the highest revenue. By applying data cleaning techniques, conducting exploratory data analysis, and making data-driven recommendations, you'll develop practical skills essential for entry-level data science positions. Tools and Technologies Python Jupyter Notebook Prerequisites To successfully complete this project, you should be comfortable with Python fundamentals such as: Variables, data types, lists, and dictionaries Writing functions with arguments, return statements, and control flow Using conditional logic and loops for data manipulation Working with Jupyter Notebook to write, run, and document code Step-by-Step Instructions Open and explore the App Store and Google Play datasets Clean the datasets by removing non-English apps and duplicate entries Analyze app genres and categories using frequency tables Identify app profiles that attract the most users Develop data-driven recommendations for the company's next app development project Expected Outcomes Upon completing this project, you'll have gained valuable skills and experience, including: Cleaning and preparing real-world datasets for analysis using Python Conducting exploratory data analysis to identify trends in app markets Applying frequency analysis to derive insights from data Translating data findings into actionable business recommendations Relevant Links and Resources Example Solution Code 2. Exploring Hacker News Posts Difficulty Level: Beginner Overview In this beginner-level guided project , you'll analyze a dataset of submissions to Hacker News, a popular technology-focused news aggregator. Using Python and Jupyter Notebook, you'll explore patterns in post creation times, compare engagement levels between different post types, and identify the best times to post for maximum comments. This project will strengthen your skills in data manipulation, analysis, and interpretation, providing valuable experience for aspiring data scientists. Tools and Technologies Python Jupyter Notebook Prerequisites To successfully complete this project, you should be comfortable with Python concepts for data science such as: String manipulation and basic text processing Working with dates and times using the datetime module Using loops to iterate through data collections Basic data analysis techniques like calculating averages and sorting Creating and manipulating lists and dictionaries Step-by-Step Instructions Load and explore the Hacker News dataset, focusing on post titles and creation times Separate and analyze 'Ask HN' and 'Show HN' posts Calculate and compare the average number of comments for different post types Determine the relationship between post creation time and comment activity Identify the optimal times to post for maximum engagement Expected Outcomes Upon completing this project, you'll have gained valuable skills and experience, including: Manipulating strings and datetime objects in Python for data analysis Calculating and interpreting averages to compare dataset subgroups Identifying time-based patterns in user engagement data Translating data insights into practical posting strategies Relevant Links and Resources Example Solution Code Original Hacker News Posts dataset on Kaggle Python Frequently Asked Questions What is Python and why is it popular for data science? Python is a versatile and easy-to-use programming language that has become a favorite among data scientists. Its simplicity and readability make it an ideal choice for beginners and experts alike. So, what makes Python so popular in data science? Here are a few key reasons: Python has a wide range of libraries that make data analysis and visualization easy. For example, pandas is a library that helps you work with data, while matplotlib is a library that helps you create visualizations. Python is great for handling large datasets efficiently. Python has extensive machine learning capabilities, which is essential for data science tasks like building predictive models. In data science, Python is commonly used for tasks like data cleaning, exploratory analysis, and building machine learning models. For instance, you might use Python to analyze data from an app store, identifying popular app categories and trends. Or you could use it to explore patterns in user engagement on social media platforms, determining the best times to post for maximum engagement. If you're new to Python, don't worry! We have many tutorials and resources available to help you get started. These tutorials include hands-on projects that allow you to apply your skills to real-world data problems, such as analyzing mobile app markets or exploring social media post engagement. By learning Python, you'll be well-equipped to tackle a wide range of data challenges and uncover valuable insights from complex datasets. With its ease-of-use and powerful capabilities, Python is an essential tool in any data scientist's toolkit. What are the essential components of a comprehensive Python for data science tutorial? A comprehensive Python tutorial for data science should cover several key components. Fundamental Python concepts form the foundation, including variables, data types, loops, and functions. The tutorial should emphasize data structures like lists and dictionaries, which are essential for organizing and manipulating data efficiently. For data science applications, the Python tutorial must introduce specialized libraries such as", "start_char_idx": 0, "end_char_idx": 5592, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7c7cc0a-e00d-4bb8-be08-49cb3f1ca6c1": {"__data__": {"id_": "e7c7cc0a-e00d-4bb8-be08-49cb3f1ca6c1", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_5.txt", "file_name": "www.dataquest.io_42_5.txt", "file_type": "text/plain", "file_size": 5431, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21f2a690-e9fb-47b2-a5b4-01772e1400ec", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_5.txt", "file_name": "www.dataquest.io_42_5.txt", "file_type": "text/plain", "file_size": 5431, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7398aeb44adb3372c548dad85ae79671da650460b6c666e2a24c1f52063bc946", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c207359-0ea3-4dcd-8375-2db0e3e09c18", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_4.txt", "file_name": "www.dataquest.io_42_4.txt", "file_type": "text/plain", "file_size": 5592, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ca3205273807fa073b1caf83a3e0fc03eb182f3aacbaf83507da6da40bf57f72", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46da161f-3fa9-4f51-bd65-13ffb8125a2e", "node_type": "1", "metadata": {}, "hash": "d70eecf4db3ea4907ffedffbdf2f424d361d705158c9613f5b12334f9a35d7cc", "class_name": "RelatedNodeInfo"}}, "text": "numpy , pandas , and matplotlib . These tools enable efficient data manipulation, analysis, and visualization. Additionally, learning to work with Jupyter Notebook is vital, as it provides an interactive environment for coding and documenting data science workflows. Hands-on practice is a key element of any effective Python tutorial. This includes coding exercises that reinforce basic concepts, as well as more complex projects that simulate real-world data challenges. For example, analyzing app store data or exploring user engagement patterns can provide practical experience in data cleaning, exploratory analysis, and deriving insights. As you progress, advanced topics in a Python tutorial might cover data cleaning techniques, exploratory data analysis, and an introduction to machine learning concepts. Understanding function scope and debugging techniques is also important for writing efficient and error-free code. Supplementary resources like cheat sheets and FAQs can enhance the learning experience, providing quick references for syntax and common operations. By combining theoretical knowledge with practical application, a comprehensive Python tutorial equips aspiring data scientists with the skills needed to tackle complex data challenges confidently. How does Python compare to SQL for data analysis tasks? Python and SQL are both essential tools in a data analyst's toolkit, each with its own strengths. When it comes to data manipulation, analysis, and visualization, Python is a powerful and versatile language. Its extensive libraries, such as pandas and NumPy, make it easy to efficiently clean, transform, and analyze complex datasets. On the other hand, SQL is ideal for working with relational databases. It excels at querying large datasets, performing aggregations, and joining tables. SQL is particularly useful when you need to extract specific data from structured databases. In many projects, I find myself using both languages together. For instance, I might use SQL to pull relevant data from a database, and then switch to Python for more advanced analysis or to create visualizations. By combining the strengths of both languages, I can tackle a wide range of data challenges. So, how do you decide which language to use? It really depends on the task at hand. Here are some general guidelines: I use Python for tasks such as: Cleaning and preprocessing unstructured data Performing complex statistical analyses Creating data visualizations Building machine learning models I use SQL for tasks such as: Querying large relational databases Performing aggregations on structured data Joining data from multiple tables In my experience, having a good understanding of both Python and SQL is essential for effective data analysis. That's why I always try to include sections on integrating SQL queries into Python code in my tutorials. By learning both languages, you'll be well-equipped to handle diverse data analysis tasks and extract valuable insights from any dataset you encounter. What types of Python practice problems are most beneficial for aspiring data scientists? For aspiring data scientists, the most beneficial Python practice problems are those that build a strong foundation in programming basics while developing applied data analysis skills. As you work through a Python tutorial, it's essential to tackle a variety of problem types. Programming Fundamentals : Start with problems that reinforce basic concepts. For example, calculating a student's GPA using given grades and course hours helps solidify your understanding of variables, data types, and arithmetic operations in Python. These fundamentals are the building blocks for more complex data analysis tasks. Data Structures : Becoming comfortable with lists and dictionaries is essential for data science. Practice problems like creating a string of 128 asterisks or generating frequency tables from datasets help you develop these skills. These skills directly translate to handling real-world datasets in your future projects. Control Flow and Functions : Writing functions and using loops are key skills for efficient data processing. Try creating functions to explore datasets or calculate frequency tables. These exercises develop your ability to structure code and handle repetitive tasks - skills you'll use daily as a data scientist. Applied Data Analysis : As you progress, focus on problems that simulate real-world data tasks. Analyzing app store data or exploring patterns in social media engagement allows you to apply multiple concepts to practical scenarios. These problems help bridge the gap between basic Python skills and actual data science work. The guided projects in our comprehensive Python tutorial provide excellent opportunities to apply these skills to realistic challenges. For example, analyzing app profiles for marketplaces or exploring Hacker News posts combines multiple concepts and requires critical thinking about data cleaning, analysis, and interpretation. When tackling practice problems, start with simpler tasks and gradually increase complexity. For fundamental concepts, focus on understanding the logic behind your solutions. As you move to more complex problems, pay attention to code efficiency and reusability. Don't hesitate to revisit and refine your solutions as you learn new techniques. Consistent practice across various problem types is key to developing your", "start_char_idx": 0, "end_char_idx": 5431, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46da161f-3fa9-4f51-bd65-13ffb8125a2e": {"__data__": {"id_": "46da161f-3fa9-4f51-bd65-13ffb8125a2e", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_6.txt", "file_name": "www.dataquest.io_42_6.txt", "file_type": "text/plain", "file_size": 5293, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fe93f97-3b87-4ba1-9570-84e7c64b1305", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_6.txt", "file_name": "www.dataquest.io_42_6.txt", "file_type": "text/plain", "file_size": 5293, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0f1f13b14ed44ece14753b46353fbe9e1efe5c6edccbbb9337a53fb9d65548b5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7c7cc0a-e00d-4bb8-be08-49cb3f1ca6c1", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_5.txt", "file_name": "www.dataquest.io_42_5.txt", "file_type": "text/plain", "file_size": 5431, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7398aeb44adb3372c548dad85ae79671da650460b6c666e2a24c1f52063bc946", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e33e9b1-4662-439c-a05d-473129c87ae6", "node_type": "1", "metadata": {}, "hash": "118f4f8aff40e087a5911a6917c24a337eec5616e71cb18e7387cdb9dff7f41a", "class_name": "RelatedNodeInfo"}}, "text": "Python skills for data science applications. By regularly challenging yourself with diverse problems, you'll build the skills and confidence needed to tackle real-world data challenges in your future career. How can I use Jupyter Notebook to enhance my Python learning experience? Jupyter Notebook is an interactive computing environment that can greatly enhance your experience when working through a Python tutorial. By allowing you to write and execute code in small chunks, you can see the results immediately, which is especially helpful for beginners. This interactivity enables you to experiment with Python concepts and get instant feedback, making it easier to learn and understand. One of the key benefits of using Jupyter Notebook for Python learning is the ability to combine code, outputs, and explanatory text in a single document. For example, when learning about functions, you can define a function in one cell, test it in another, and add notes about how it works in between. This approach makes it easier to document your learning process and create comprehensive, shareable notebooks of your progress through Python tutorials. Additionally, Jupyter Notebook offers special features that can aid your learning. For instance, you can use magic commands like %timeit to measure the execution time of your code, helping you understand performance implications as you learn. Whether you're just starting with Python or advancing your skills, Jupyter Notebook's flexibility and ease of use make it a valuable tool for working through Python tutorials and building a strong foundation in programming. What are some practical Python projects for beginners in data science? As you learn Python, it's essential to apply your skills to real-world projects. This helps you build confidence in your coding abilities and develop a portfolio to showcase your skills. So, what kinds of projects should you tackle as a beginner in data science? One great project to start with is our guided project on analyzing app store data to identify profitable app profiles. This project allows you to practice working with lists, dictionaries, and functions while conducting frequency analysis on real datasets. You'll also get to apply skills like data cleaning, exploratory analysis, and deriving actionable insights. Another valuable project is is our guided project on exploring patterns in social media post engagement by analyzing Hacker News submissions. This helps you understand how to work with dates and times, manipulate strings, and perform basic statistical analysis in Python. Both projects simulate real-world data science tasks, making it easier to apply concepts from Python tutorials to practical challenges. By working on these projects, you'll gain hands-on experience and develop a portfolio that showcases your skills. This experience will prepare you for more advanced projects and potential career opportunities in the field. What are the key Python concepts covered in an introductory Python tutorial? When you explore a Python tutorial, you'll encounter several key concepts that form the foundation of programming and data analysis. These essential building blocks will give you the skills to write efficient code and tackle real-world data challenges. Let's break down the essential Python concepts you'll typically learn: Python basics : Variables and data types (integers, floats, strings) Basic operators for arithmetic and comparisons Lists and dictionaries for organizing data These foundational elements allow you to store, manipulate, and organize information. For example, you might use a list to store a series of stock prices or a dictionary to map product names to their sales figures. Control flow : For loops for iterating through data Conditional statements (if/else) for decision-making Functions for organizing and reusing code These concepts give your code the ability to make decisions and repeat tasks efficiently. For instance, you might use a for loop to calculate the average rating for thousands of mobile apps, or create a function that cleans and preprocesses raw data from multiple sources. Data manipulation : String manipulation and text processing Working with dates and times Basic data analysis techniques like calculating averages These skills are essential for preparing and analyzing data. You might apply string manipulation to extract relevant information from user comments, or use date/time functions to identify trends in website traffic over time. Programming tools : Using Jupyter Notebook for interactive coding Importing and working with modules like datetime These tools enhance your coding experience and extend Python's capabilities. Jupyter Notebook, for example, allows you to write, run, and document your code in a single interactive environment \u2013 perfect for data exploration and analysis. As you progress through our Python tutorial, you'll see how these concepts come together to solve complex problems. For example, you see how to combine loops, conditional statements, and string manipulation to analyze thousands of social media posts, categorizing them based on content and sentiment. Developing a strong foundation in these fundamental concepts will serve as a stepping stone to more advanced Python programming", "start_char_idx": 0, "end_char_idx": 5291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e33e9b1-4662-439c-a05d-473129c87ae6": {"__data__": {"id_": "0e33e9b1-4662-439c-a05d-473129c87ae6", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_7.txt", "file_name": "www.dataquest.io_42_7.txt", "file_type": "text/plain", "file_size": 5178, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c857517-d290-4185-b962-c78f200a2ade", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_7.txt", "file_name": "www.dataquest.io_42_7.txt", "file_type": "text/plain", "file_size": 5178, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c62f1a312b9508cd18a0d178e4a4d2696bd1c1789de0fd0978db5bd8a510f101", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46da161f-3fa9-4f51-bd65-13ffb8125a2e", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_6.txt", "file_name": "www.dataquest.io_42_6.txt", "file_type": "text/plain", "file_size": 5293, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0f1f13b14ed44ece14753b46353fbe9e1efe5c6edccbbb9337a53fb9d65548b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "585a1f2d-694e-4ca0-bcc3-9dae0dc0e284", "node_type": "1", "metadata": {}, "hash": "c495845a03884ba264a8732be0918ccc016e8a62627fe6e1253a7b6185ec75d5", "class_name": "RelatedNodeInfo"}}, "text": "and data science techniques. Whether you're aiming to build machine learning models, create data visualizations, or automate data processing tasks, these core skills will help you succeed in the world of Python and data analysis. How can I practice Python online with real-time feedback? Practicing Python online with real-time feedback is a great way to improve your coding skills. This approach allows you to get immediate responses to your code, which helps you learn and correct mistakes more efficiently. Here are some effective ways to practice Python online and get real-time feedback: Try interactive coding environments : Platforms like Jupyter Notebook, which we use in our Python tutorials, let you write and execute code in small chunks. This is especially helpful for beginners, as it provides instant results and helps you see how different parts of your code work together. Work on guided projects : Our Python tutorial includes projects like \"Profitable App Profiles for the App Store and Google Play Markets\" and \"Exploring Hacker News Posts\". These projects give you real-world scenarios to apply your Python skills and get immediate feedback on your approach. Use online practice problems : Our interactive Python coding environment offers a range of Python practice problems with real-time feedback. These exercises cover various difficulty levels and concepts, helping you reinforce your learning from the Python tutorial. Experiment with different data structures : As you learn about lists, dictionaries, and other data structures in the Python tutorial, try manipulating them in an interactive environment. This hands-on practice helps solidify your understanding of how these structures work. By using these online resources and taking advantage of real-time feedback, you'll be able to practice Python more effectively and build your skills faster. Remember, consistent practice and applying concepts from your Python tutorial are key to becoming proficient in the language. Don't be afraid to try new things and learn from both your successes and mistakes in these interactive environments. What are some common challenges faced by beginners when learning Python for data science? Learning Python for data science can be challenging, but understanding common pitfalls can help you overcome them. Here are some key areas to focus on: Getting to grips with core programming concepts : Ideas like variables, functions, and control flow may seem abstract at first. Think of it like learning a new language \u2013 the more you practice, the more comfortable you'll become. Try writing small programs to solidify these concepts. Working with data structures : Lists and dictionaries are essential in data science, but can be confusing initially. Experiment with creating and manipulating these structures in interactive Python environments to build familiarity. It's like learning to juggle \u2013 it takes time and practice to get the hang of it. Applying Python to real-world data : Bridging the gap between basic syntax and actual data analysis can be tricky. Start with small datasets, like analyzing app store ratings, and gradually work up to more complex problems. This will help you build confidence and develop a deeper understanding of how to apply Python to real-world problems. Debugging and troubleshooting : Identifying and fixing errors in your code is an essential skill. Learn to read error messages and use print statements to understand what's happening in your program. It's like being a detective \u2013 you need to gather clues to solve the mystery. Remember, hands-on practice is essential. Work through Python tutorials, tackle practice problems, and apply your skills to real-world datasets. By overcoming these challenges, you'll develop valuable problem-solving skills and gain the ability to extract meaningful insights from data. Don't be discouraged by initial difficulties \u2013 every data scientist started as a beginner. With persistence and consistent practice, you'll become proficient in Python and open up exciting opportunities in the world of data science. How can developing Python skills create opportunities in advanced data analysis and machine learning? When I first started learning Python, I had no idea how it would transform my approach to data analysis and open doors to exciting opportunities in machine learning and AI. Now, as someone who oversees Python course development, I can confidently say that developing Python skills is one of the best investments you can make for your data career. Python's versatility is what makes it so powerful for advanced data analysis and machine learning. As you progress from basic concepts like variables and lists to more complex operations, you'll find that Python becomes an indispensable tool in your data toolkit. For instance, I recently used Python to automate our course prerequisite writing process, a task that would have been challenging with SQL alone. As you gain more experience with Python, you'll discover its true potential in advanced data analysis. Libraries like pandas and NumPy allow you to manipulate and analyze large datasets efficiently. You can create", "start_char_idx": 0, "end_char_idx": 5170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "585a1f2d-694e-4ca0-bcc3-9dae0dc0e284": {"__data__": {"id_": "585a1f2d-694e-4ca0-bcc3-9dae0dc0e284", "embedding": null, "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_8.txt", "file_name": "www.dataquest.io_42_8.txt", "file_type": "text/plain", "file_size": 1707, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d3e3937-7d0f-4748-abe6-a8916ae4847d", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_8.txt", "file_name": "www.dataquest.io_42_8.txt", "file_type": "text/plain", "file_size": 1707, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bf35661cb914d680094a7096330b580c69cb0d9e7f079205f7767bdb1fbb2677", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e33e9b1-4662-439c-a05d-473129c87ae6", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_7.txt", "file_name": "www.dataquest.io_42_7.txt", "file_type": "text/plain", "file_size": 5178, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c62f1a312b9508cd18a0d178e4a4d2696bd1c1789de0fd0978db5bd8a510f101", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "913057b9-891d-42ef-afad-0de074a4f97c", "node_type": "1", "metadata": {}, "hash": "c086ac43b1e57987b138c0d5c0f671199485b81fb9b6d173b8e6d9479457d421", "class_name": "RelatedNodeInfo"}}, "text": "insightful visualizations with matplotlib, perform statistical analyses with SciPy, and even build machine learning models with scikit-learn. The journey from basic Python skills to advanced applications is a natural progression. You start with simple operations like calculating averages or filtering data, and before you know it, you're implementing complex algorithms and building predictive models. For example, at Dataquest, we use Python to analyze student progress data, calculate course completion rates, and identify areas for improvement in our curriculum. What's particularly exciting about Python is its widespread use in the field of machine learning and AI. As you become more proficient, you'll be able to tackle tasks like natural language processing with Python , image recognition, and predictive modeling. These skills are in high demand across industries, from tech companies building recommendation systems to healthcare organizations developing diagnostic tools. With each new concept you learn, you're building a foundation for more advanced applications. Whether you're analyzing customer behavior, optimizing business processes, or developing cutting-edge AI applications, Python provides the tools and flexibility to bring your ideas to life. By investing in your Python skills, you're not just learning a programming language \u2013 you're opening doors to exciting career opportunities in data science, machine learning engineering, and AI research. And the best part? Python is accessible to anyone willing to learn, regardless of their background. So why wait? Start your Python journey today and see where it takes you in the world of advanced data analysis and machine learning.", "start_char_idx": 0, "end_char_idx": 1705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "913057b9-891d-42ef-afad-0de074a4f97c": {"__data__": {"id_": "913057b9-891d-42ef-afad-0de074a4f97c", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f48a7c-8095-40ea-889c-8063d254ea76", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8bf120f5d7e1d24cd9d3eb378cc8c781767bae3c7c19d9e16a0c55e1bbedf610", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "585a1f2d-694e-4ca0-bcc3-9dae0dc0e284", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_8.txt", "file_name": "www.dataquest.io_42_8.txt", "file_type": "text/plain", "file_size": 1707, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bf35661cb914d680094a7096330b580c69cb0d9e7f079205f7767bdb1fbb2677", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "122a0255-9fe4-4898-a7af-3c4fdd5f85d4", "node_type": "1", "metadata": {}, "hash": "7177f654f174136a4eec8f3978dd4d4044614756620e36941731db3ea7b792eb", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python Basics \u2013 A Guide for Beginners Chepkirui Dorothy Are you eager to dive into the world of programming but unsure where to begin? Look no further \u2013 Python is an excellent starting point for both newcomers and seasoned developers. In this guide, I'll take you through the basics so you can get started on your Python journey. Table of Contents Prerequisites Why Learn Python? Key Characteristics of Python Practical Uses of Python How to Write \"Hello, World\" in Python Python Variables and Data Types Primitive (Fundamental) Data Types Characteristics of Primitive Data Types Use Cases for Primitive Data Types Non-Primitive (Composite) Data Types in Python Characteristics of Non-Primitive Data Types Use Cases for Non-Primitive Data Types Operators in Python Arithmetic Operators Comparison Operators Statements in Python Assignment Statements Print Statement Conditional Statements (if, elif, else) Loops (for and while) For Loop While Loop Break and Continue Statements Functions in Python Conclusion Prerequisites Before you embark on this coding adventure, make sure you have the following: Python installed . A code editor like VSCode , Vim , or Sublime . Now, let's explore the advantages of using Python. Why Learn Python? If you're wondering why Python is an excellent choice for beginners and seasoned developers alike, here are some of the reasons: Readability and Simplicity: Python's clean syntax enhances code readability, reducing development time and making it beginner-friendly. Versatility: You can use Python to build a diverse range of applications, from web development to data science and AI. It also has an extensive standard library and many helpful third-party packages. Community and Documentation: Python has a robust community and comprehensive documentation that provides ample support, fostering the language's popularity and growth. Cross-Platform Compatibility: Ensures seamless execution across Windows, macOS, and Linux. Extensive Libraries and Frameworks: A rich ecosystem simplifies complex tasks, saving time and effort for developers. Hopefully, you're intrigued by Python's perks \u2013 so let's delve into its key characteristics. Key Characteristics of Python Understanding the key characteristics of Python will give you insights into its strengths and why it's a popular choice among developers: Interpreted Language: Your code is not directly translated by the target machine. Instead, a special program called the interpreter reads and executes the code, allowing for cross-platform execution of your code. Dynamically Typed: Dynamic typing eliminates the need for explicit data type declarations, enhancing simplicity and flexibility. Object-Oriented: Python supports object-oriented principles, promoting code modularity and reusability. Indentation-based Syntax: Indentation-based syntax enforces code readability and maintains a consistent coding style. Memory Management: Automatic memory management through garbage collection simplifies memory handling for developers. Practical Uses of Python Python's versatility and readability make it suitable for a wide array of applications. Here are some practical uses: Web Development: Python, with frameworks like Django and Flask, powers back-end development for robust web applications. Data Science and Machine Learning: Widely used in data science, Python's libraries like NumPy and Pandas support data analysis and machine learning. Automation and Scripting: Python excels in automating tasks and scripting, simplifying repetitive operations. AI and NLP: Python, with libraries like TensorFlow, dominates in AI and natural language processing applications. Game Development: Python, combined with Pygame, facilitates 2D game development for hobbyists and indie developers. Scientific Computing: Python is a valuable tool in scientific computing, chosen by scientists and researchers for its extensive libraries. Python is pre-installed in most Linux distributions. Follow this article on how to install Python on Windows and MacOS. How to Write \"Hello, World\" in Python This is usually the first achievement when starting to code in any language: having your code say 'Hello world'. Open any code editor of your choice, and create a file named project.py . Inside the file, type the following: print( \"Hello, World!\" ) To run this code, open the command line interface (CLI). Follow this article to understand more about CLI. Make sure to open the directory where the file is saved, and run the following: python3 project.py When you run this program, you'll see the timeless greeting displayed in your command line interface. hello world displayed in the CLI \u200cCongratulations! You've just executed your first Python script. Now that you've printed a simple message, let's dive deeper into Python. Python Variables and Data Types The primary purpose of computers is to process data into useful information, for that to happen, the data needs to be stored in its memory. This is achieved using a programming language's variables and data types. Data types in Python are particular kinds of data items, as defined by the value they can take.", "start_char_idx": 0, "end_char_idx": 5145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "122a0255-9fe4-4898-a7af-3c4fdd5f85d4": {"__data__": {"id_": "122a0255-9fe4-4898-a7af-3c4fdd5f85d4", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78f48a7c-8095-40ea-889c-8063d254ea76", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8bf120f5d7e1d24cd9d3eb378cc8c781767bae3c7c19d9e16a0c55e1bbedf610", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "913057b9-891d-42ef-afad-0de074a4f97c", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7811fe59fe4de74ea9b63ed2335928ee4c4933bf47c8bff0dae5d31787f5ab2f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc965e62-998e-47d6-bcc6-9c226e2a7013", "node_type": "1", "metadata": {}, "hash": "c727f5553ccff66f1e0e2e3dd8159e117b9eff0237d719fc13574a89c0dda57c", "class_name": "RelatedNodeInfo"}}, "text": "Inside the file, type the following: print( \"Hello, World!\" ) To run this code, open the command line interface (CLI). Follow this article to understand more about CLI. Make sure to open the directory where the file is saved, and run the following: python3 project.py When you run this program, you'll see the timeless greeting displayed in your command line interface. hello world displayed in the CLI \u200cCongratulations! You've just executed your first Python script. Now that you've printed a simple message, let's dive deeper into Python. Python Variables and Data Types The primary purpose of computers is to process data into useful information, for that to happen, the data needs to be stored in its memory. This is achieved using a programming language's variables and data types. Data types in Python are particular kinds of data items, as defined by the value they can take. Variables, on the other hand, are like labeled containers that store this data. They enable you to manage and modify information using specific identifiers. Data types are generally classified into two types: Primitive (Fundamental) Data Types: Primitive data types represent simple values.", "start_char_idx": 4263, "end_char_idx": 5436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc965e62-998e-47d6-bcc6-9c226e2a7013": {"__data__": {"id_": "bc965e62-998e-47d6-bcc6-9c226e2a7013", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c168eea9-eba5-48cb-8145-4167781c1c35", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "af465ed1f90cc2b1f95a804f1bd5c718216aa4032e757d2d146acc62ef373d15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "122a0255-9fe4-4898-a7af-3c4fdd5f85d4", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c42e23d3a4ed4f303fb8ec8ed74ee3e1058f8f92028025bdaa7360ace8eba810", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ce730ef-e6c7-4f42-b1c0-e95565326a47", "node_type": "1", "metadata": {}, "hash": "e08d9f66fee4263cf4953c0b40716dcac5f043bf80d6acfc1ad36ce17c5866d5", "class_name": "RelatedNodeInfo"}}, "text": "These data types are the most basic and essential units used to store and manipulate information in a program. They translate directly into low-level machine code. Primitive data types include: String ( str ): Represents sequences of characters. Should be enclosed in quotes. Example: \"Hello, Python!\" Integer ( int ): Represents whole numbers without decimals. Example: 42 Float ( float ): Represents numbers with decimals. Example: 3.14 Boolean ( bool ): Represents either True or False . Characteristics of Primitive Data Types: Immutability: Primitive data types are immutable, meaning their values cannot be changed after they are created. Any operation that appears to modify a primitive value creates a new value. Direct Representation: Each primitive data type directly corresponds to a specific low-level machine code representation. Atomic Values: Primitive data types represent individual, atomic values. They are not composed of other types or structures. Use Cases for Primitive Data Types: Strings are used for text manipulation and representation. Integers and floats are essential for numerical calculations. Booleans are employed in logical operations and decision-making. Let's see how these work by continuing to write some Python code. Modify your project.py file to include the following: # String Example name = \"John\" # Integer Example age = 25 # Float Example height = 1.75 # Boolean Example is_student = True # Print variable values print( \"Name:\" , name) print( \"Age:\" , age) print( \"Height:\" , height) print( \"Is student?\" , is_student) In this snippet, you've introduced variables with different data types. Run the program and observe how Python handles these data types. primitive data types The output reveals the values assigned to the variables in the Python script. The print statements display the contents of the name , age , height , and is_student variables. \u200c\u200cNon-Primitive (Composite) Data Types in Python Non-primitive data types are structures that can hold multiple values and are composed of other data types, including both primitive and other composite types. Unlike primitive data types, non-primitive types allow for more complex and structured representations of data. Non-primitive data types include: List ( list ): Represents an ordered and mutable collection of values. Example: fruits = [\"apple\", \"banana\", \"cherry\"] Tuple ( tuple ): Represents an ordered and immutable collection of values. Example: coordinates = (3, 7) Dictionary ( dict ): Represents an unordered collection of key-value pairs. Example: person = {\"name\": \"Alice\", \"age\": 25, \"is_student\": True} Characteristics of Non-Primitive Data Types: Mutability: Lists are mutable, meaning their elements can be modified after creation. Tuples, on the other hand, are immutable \u2013 their elements cannot be changed. Dictionaries are mutable \u2013 you can add, modify, or remove key-value pairs. Collection of Values: Non-primitive data types allow the grouping of multiple values into a single structure, enabling the creation of more sophisticated data representations. Ordered (Lists and Tuples): Lists and tuples maintain the order of elements, allowing for predictable indexing. Key-Value Mapping (Dictionary): Dictionaries map keys to values, providing a way to organize and retrieve data based on specific identifiers. Use Cases for Non-Primitive Data Types: Lists: Useful when you need a collection that can be altered during the program's execution, such as maintaining a list of items that may change over time. Tuples: Suitable when you want to ensure that the data remains constant and cannot be accidentally modified. Often used for representing fixed sets of values. Dictionaries: Ideal for scenarios where data needs to be associated with specific labels or keys. They offer efficient data retrieval based on these identifiers. Alright, continuing with our Python code \u2013 modify the project.py file as shown below: # List Example fruits = [ \"apple\" , \"banana\" , \"cherry\" ] print( \"List Example:\" , fruits) # Tuple Example coordinates = ( 3 , 7 ) print( \"Tuple Example:\" , coordinates) # Dictionary Example person = { \"name\" : \"Alice\" , \"age\" : 25 , \"is_student\" : True } print( \"Dictionary Example:\" , person) Run the program to see how lists and tuples allow you to organize and store data. In this code snippet: The fruits variable is a list containing strings representing different fruits. The coordinates variable is a tuple with two integers representing coordinates. The person variable is a dictionary associating keys (\"name,\" \"age,\" \"is_student\") with corresponding values. non-primitive data types You can perform various operations on these structures, such as adding elements to a list or accessing individual items in a tuple.", "start_char_idx": 0, "end_char_idx": 4760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ce730ef-e6c7-4f42-b1c0-e95565326a47": {"__data__": {"id_": "8ce730ef-e6c7-4f42-b1c0-e95565326a47", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c168eea9-eba5-48cb-8145-4167781c1c35", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "af465ed1f90cc2b1f95a804f1bd5c718216aa4032e757d2d146acc62ef373d15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc965e62-998e-47d6-bcc6-9c226e2a7013", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9771c6acd5bdb3ffa6215985086b1a3d43b34ab31066fbae36b3d333c6a6f0cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cddb678c-fd4a-4d00-bcb3-b18d3c81bc32", "node_type": "1", "metadata": {}, "hash": "ea9c0783ac8cc17d3ed57a0f2b0382bfa317d53833a4aeac6f613172a4fe55ac", "class_name": "RelatedNodeInfo"}}, "text": "In this code snippet: The fruits variable is a list containing strings representing different fruits. The coordinates variable is a tuple with two integers representing coordinates. The person variable is a dictionary associating keys (\"name,\" \"age,\" \"is_student\") with corresponding values. non-primitive data types You can perform various operations on these structures, such as adding elements to a list or accessing individual items in a tuple. Data types are crucial for several reasons: Memory Allocation: Different data types require different amounts of memory. Knowing the data type allows the computer to allocate the appropriate amount of memory for a variable. Operations: Each data type supports specific operations. For example, you can add two integer numbers, concatenate two strings , or compare two boolean values. Error Prevention: Using the wrong data type in an operation can", "start_char_idx": 4312, "end_char_idx": 5208, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cddb678c-fd4a-4d00-bcb3-b18d3c81bc32": {"__data__": {"id_": "cddb678c-fd4a-4d00-bcb3-b18d3c81bc32", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83f38e4a-743e-43e4-a689-eeb33dcb0f9b", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "80c3c3f715bcd9de7c0a5f44e197106fb51c33f4e0cac90be70ca00947d5e7b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ce730ef-e6c7-4f42-b1c0-e95565326a47", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "35fc467595565d44ad4d4cc22516d27d60b75c5c1625a1a161aac2064eb338db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5bca244e-1923-4e98-8506-cfc75b24058a", "node_type": "1", "metadata": {}, "hash": "1c82606643c1a2a6f129f7369dc18e59d8bb43299cde2c2fae3986a4a02ffdcc", "class_name": "RelatedNodeInfo"}}, "text": "lead to errors. Data types help prevent unintended consequences by enforcing rules on how different types can interact. Operators in Python Operators in Python are symbols that perform operations on variables and values. An operand refers to the inputs or objects on which an operation is performed. Let's explore some of the essential operators in Python: Arithmetic Operators: Arithmetic operators are fundamental components of any programming language, allowing developers to perform basic mathematical operations on numerical values. In Python, several arithmetic operators enable you to carry out calculations efficiently. Let's explore these operators: Addition (+): Adds two operands. Subtraction (-): Subtracts the right operand from the left operand. Multiplication (*): Multiplies two operands. Division (/): Divides the left operand by the right operand (always returns a float). Modulus (%): Returns the remainder of the division of the left operand by the right operand. Exponentiation (**): Raises the left operand to the power of the right operand. Modify your project.py file to include examples of these operators: # Arithmetic Operators num1 = 10 num2 = 3 add_result = num1 + num2 sub_result = num1 - num2 mul_result = num1 * num2 div_result = num1 / num2 mod_result = num1 % num2 exp_result = num1 ** num2 print( \"Addition:\" , add_result) print( \"Subtraction:\" , sub_result) print( \"Multiplication:\" , mul_result) print( \"Division:\" , div_result) print( \"Modulus:\" , mod_result) print( \"Exponentiation:\" , exp_result) The code above initializes two variables, num1 and num2 , with the values 10 and 3 respectively, representing two numerical operands. Then, arithmetic operations are performed using these operands: add_result stores the result of adding num1 and num2 . sub_result stores the result of subtracting num2 from num1 . mul_result stores the result of multiplying num1 and num2 . div_result stores the result of dividing num1 by num2 . mod_result stores the remainder of dividing num1 by num2 . exp_result stores the result of raising num1 to the power of num2 . Finally, the results of these arithmetic operations are printed using print() statements, each labeled appropriately, such as \"Addition:\", \"Subtraction:\", and so on, followed by the corresponding result. Here's the output: arithmetic operations Comparison Operators Comparison operators in Python are essential tools for evaluating and comparing values. They enable you to express conditions and make decisions based on the relationship between different values. They return either True or False based on the comparison result. Here are the common comparison operators: Equal to (==): Checks if two operands are equal. Not equal to (!=): Checks if two operands are not equal. Greater than (>): Checks if the left operand is greater than the right operand. Less than (<): Checks if the left operand is less than the right operand. Greater than or equal to (>=): Checks if the left operand is greater than or equal to the right operand. Less than or equal to (<=): Checks if the left operand is less than or equal to the right operand. Extend your project.py file to include examples of comparison operators: # Comparison Operators age = 25 is_adult = age >= 18 is_teenager = age >= 13 and age < 18 print( \"Is adult?\" , is_adult) print( \"Is teenager?\" , is_teenager) The variable age is initialized with the value 25 , representing a person's age. Then, the comparison operator >= is used to evaluate whether age is greater than or equal to 18 . The result of this comparison determines the boolean value stored in the variable is_adult . If the age is 18 or older, is_adult will be True , indicating adulthood. Then the logical operator and is utilized to combine two comparison operations. The first comparison, age >= 13 , checks if the age is 13 or older. The second comparison, age < 18 , ensures the age is less than 18 . If both conditions are true, is_teenager will be True , signifying teenage years. Finally, the results are printed using print() statements, indicating whether the person is classified as an adult ( True or False ) and whether they are identified as a teenager ( True or False ). Here's the output: Statements in Python Statements instruct the interpreter to perform specific actions or operations. These actions can range from simple assignments of values to variables to more complex control flow structures and iterations. Understanding different types of statements is essential for writing effective and expressive Python code. Assignment Statements Assignment statements are the most basic type of statement in Python.", "start_char_idx": 0, "end_char_idx": 4644, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bca244e-1923-4e98-8506-cfc75b24058a": {"__data__": {"id_": "5bca244e-1923-4e98-8506-cfc75b24058a", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83f38e4a-743e-43e4-a689-eeb33dcb0f9b", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "80c3c3f715bcd9de7c0a5f44e197106fb51c33f4e0cac90be70ca00947d5e7b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cddb678c-fd4a-4d00-bcb3-b18d3c81bc32", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d63a1168483bf1ffa9fb4c36e65adafb7fbb92aa1c6ffd233c93c36ed18e0fcf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f7e5f10-53e9-4d68-9bb8-7bea7c464bcb", "node_type": "1", "metadata": {}, "hash": "8cebfa9678c0b8be1689a32201774276db2456c666edf95a54be7190addbee32", "class_name": "RelatedNodeInfo"}}, "text": "Then the logical operator and is utilized to combine two comparison operations. The first comparison, age >= 13 , checks if the age is 13 or older. The second comparison, age < 18 , ensures the age is less than 18 . If both conditions are true, is_teenager will be True , signifying teenage years. Finally, the results are printed using print() statements, indicating whether the person is classified as an adult ( True or False ) and whether they are identified as a teenager ( True or False ). Here's the output: Statements in Python Statements instruct the interpreter to perform specific actions or operations. These actions can range from simple assignments of values to variables to more complex control flow structures and iterations. Understanding different types of statements is essential for writing effective and expressive Python code. Assignment Statements Assignment statements are the most basic type of statement in Python. They are used to assign values to variables, creating a named reference to data. Here's an example: x = 10 name = \"Alice\" In this snippet, x is assigned the integer value 10 , and the name is assigned the string \"Alice\" . These assignments create variables that can be used throughout the program. Print Statement The print", "start_char_idx": 3704, "end_char_idx": 4968, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f7e5f10-53e9-4d68-9bb8-7bea7c464bcb": {"__data__": {"id_": "0f7e5f10-53e9-4d68-9bb8-7bea7c464bcb", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3d6608e-81c7-4df4-9fd1-0c28415460e9", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e630a127f7f7c7676a2254f847fc86dc3a7f02c3cfb549726f85018ef796f581", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5bca244e-1923-4e98-8506-cfc75b24058a", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "282f880d496a2ce5beb44412ff925829551f43f939d879333700100dc861ddfe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f944d9c3-192e-453f-a8d3-3fea194f2fa7", "node_type": "1", "metadata": {}, "hash": "96bafef66354aee212a9516f58e7213fca82c8e7464eb1e814453e3d92f4328b", "class_name": "RelatedNodeInfo"}}, "text": "statement is used to display output in the console. It is a crucial tool for debugging and providing information to users. Example: print( \"Hello, Python!\" ) This code prints the string \"Hello, Python!\" to the console. Conditional Statements (if, elif, else) Conditional statements are used when you want to execute different blocks of code based on certain conditions. Suppose you wanted to determine if a person has reached the legal age for drinking. Modify the project.py file with the following code: # Conditional Statement Example age = 20 if age < 18 : print( \"You are a minor.\" ) elif 18 <= age < 21 : print( \"You are an adult, but not yet allowed to drink.\" ) else : print( \"You are a legal adult.\" ) In this example: The if statement checks if age is less than 18. The elif statement (shorthand for else if) checks if age is between 18 (inclusive) and 21 (exclusive). The else statement is executed if none of the above conditions are met. if else statement A person aged 20 is not allowed to drink. Loops (for and while) Loops are used to repeat a block of code multiple times. There are two main types of loops in Python: for loops and while loops. For Loop: A for loop is used when you know the number of iterations in advance. Suppose you had a list containing the names of fruits, and you wanted to print each fruit. In this case, a for loop is an ideal choice for iterating over the elements of the list. Here's an example using Python: # for loop Example fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for fruit in fruits: print(fruit) \u200cIn this example, the for loop iterates over each element in the fruits list and prints each fruit. list of fruits in the for loop While Loop: A while statement is a control flow statement that allows you to execute a block of code repeatedly as long as a specified condition is true. Suppose you want to simulate counting until a certain threshold is reached. Modify your project.py and add the following code: # While Loop Example count = 0 while count < 5 : print( \"Count:\" , count) count += 1 In this scenario, the while loop continues executing as long as the count variable is less than 5. The code inside the loop increments the count and prints the current count in each iteration. output of while loop Break and Continue Statements Break and continue statements are used within loops. break : Exits the loop. continue : Skips the rest of the code inside the loop for the current iteration, then continues the loop. Examples: \u200c # Break Statement Example print( \"Output with 'break':\" ) for i in range( 5 ): if i == 3 : print( f\"Encountered 'break' at i= {i} \" ) break print(i) # Continue Statement Example print( \"\\nOutput with 'continue':\" ) for i in range( 5 ): if i == 2 : print( f\"Skipped iteration with 'continue' at i= {i} \" ) continue print(i) \u200cIn the break example, the loop stops when i is equal to 3, and the numbers 0, 1, and 2 are printed. In the continue example, when i is equal to 2, the continue statement skips the print(i) statement for that iteration, resulting in the omission of the number 2 from the output. break and continue statements output Functions in Python Functions are reusable blocks of code, enhancing modularity by enclosing functionality into separate, organized units. This approach helps avoid code duplication and significantly improves code readability. Inside the project.py file, write the following code: def greet (): print( \"Hello, World!\" ) # Call the function to execute greet() The code above contains a simple Python function called greet() . When 'called' or 'invoked', this function prints \"Hello, World!\" to the console. It's a basic example illustrating how functions work in Python. You can take this a step further by including parameters. Parameters serve as placeholders for values passed to a function during its invocation, allowing functions to accept input and perform operations based on that input. Modify the previous example on if elif else statement to include functions: def check_age ( age ): if age < 18 : print( \"You are a minor.\" ) elif 18 <= age < 21 : print( \"You are an adult, but not yet allowed to drink.\" ) else : print( \"You are a legal adult.\"", "start_char_idx": 0, "end_char_idx": 4180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f944d9c3-192e-453f-a8d3-3fea194f2fa7": {"__data__": {"id_": "f944d9c3-192e-453f-a8d3-3fea194f2fa7", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3d6608e-81c7-4df4-9fd1-0c28415460e9", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e630a127f7f7c7676a2254f847fc86dc3a7f02c3cfb549726f85018ef796f581", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f7e5f10-53e9-4d68-9bb8-7bea7c464bcb", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fadaa6e93293c87ef83bcfe4778e74feb2632d10724ce99c53d629c1d61602c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c4e4793-e9f9-49c1-aab8-c4b92ae60be4", "node_type": "1", "metadata": {}, "hash": "5eb7b4eba08e071be333835bb14dbc880a66f378f5cda1dc441fd808651620f0", "class_name": "RelatedNodeInfo"}}, "text": "Inside the project.py file, write the following code: def greet (): print( \"Hello, World!\" ) # Call the function to execute greet() The code above contains a simple Python function called greet() . When 'called' or 'invoked', this function prints \"Hello, World!\" to the console. It's a basic example illustrating how functions work in Python. You can take this a step further by including parameters. Parameters serve as placeholders for values passed to a function during its invocation, allowing functions to accept input and perform operations based on that input. Modify the previous example on if elif else statement to include functions: def check_age ( age ): if age < 18 : print( \"You are a minor.\" ) elif 18 <= age < 21 : print( \"You are an adult, but not yet allowed to drink.\" ) else : print( \"You are a legal adult.\" ) # Call the function with a specific age check_age( 20 ) In this example, the check_age function takes an age parameter and performs the same conditional check as the original code. The function allows you to reuse this logic for different age values by simply calling the function with the desired age.", "start_char_idx": 3352, "end_char_idx": 4485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c4e4793-e9f9-49c1-aab8-c4b92ae60be4": {"__data__": {"id_": "3c4e4793-e9f9-49c1-aab8-c4b92ae60be4", "embedding": null, "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_4.txt", "file_name": "www.freecodecamp.org_13_4.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f61ab36-1b88-4628-8ee9-eee763e2a4fe", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_4.txt", "file_name": "www.freecodecamp.org_13_4.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c0d2d0d1c83092fa29e739e8a08c79e391f8302ec9b9dc16910fd83156ca8cb2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f944d9c3-192e-453f-a8d3-3fea194f2fa7", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d2159cb580841973223d4e6956a2805b1dc15e25c3fc0c18e7da4b72fdb60c92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64257430-5f6e-49c0-884f-6635b2af54af", "node_type": "1", "metadata": {}, "hash": "7b4a1c365dae9a387493194e13906f6a828ad8ccbc88063a83255b5c04145ad2", "class_name": "RelatedNodeInfo"}}, "text": "You can call check_age function with any age value, and it will print the appropriate message based on the age provided. functions Conclusion \u200c\u200c\u200c\u200cEmbarking on your Python learning journey, this guide introduces the benefits of learning Python, its key characteristics, and practical use cases. Starting with the iconic \"Hello, World!\" and progressing through variables, data types, statements, and functions, you've gained some hands-on experience with basic Python. We also talked about primitive and non-primitive data types, conditional statements, and loops. As your journey progresses, delve into advanced topics like object-oriented programming, file handling, and real-world projects. Armed with foundational knowledge, you can now embrace coding challenges that come your way. Stay curious, and relish the rewarding process of coding with Python. Happy coding! \u200c\u200c \u200c\u200c Chepkirui Dorothy I am a self taught software developer in Kenya. Django, html and css If you read this far, thank the author to show them you care. Say Thanks Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started ADVERTISEMENT", "start_char_idx": 0, "end_char_idx": 1181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64257430-5f6e-49c0-884f-6635b2af54af": {"__data__": {"id_": "64257430-5f6e-49c0-884f-6635b2af54af", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_0.txt", "file_name": "www.geeksforgeeks.org_2_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e265b963-6aa2-446e-9573-15e32ca338e9", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_0.txt", "file_name": "www.geeksforgeeks.org_2_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d99b6eb2ba0127bd8561ea8d592697e2eee23006b1bc34bac8904988eeb595e6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c4e4793-e9f9-49c1-aab8-c4b92ae60be4", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_4.txt", "file_name": "www.freecodecamp.org_13_4.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c0d2d0d1c83092fa29e739e8a08c79e391f8302ec9b9dc16910fd83156ca8cb2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1f2ca55-19d6-4347-82d0-c82a7c2faab1", "node_type": "1", "metadata": {}, "hash": "43fbc7c9ba99804d4f65fd33b143443d2c528a38c56408b918b5db36f9a3212d", "class_name": "RelatedNodeInfo"}}, "text": "Python Tutorial | Learn Python Programming Language | GeeksforGeeks Python Course Python Tutorial Interview Questions Python Quiz Python Glossary Python Projects Practice Python Data Science With Python Python Web Dev DSA with Python Python OOPs Sign In \u25b2 Open In App Explore GfG Courses Share Your Experiences Python Tutorial | Learn Python Programming Language Python Fundamentals Python Introduction Input and Output in Python Python Variables Python Operators Python Keywords Python Data Types Conditional Statements in Python Loops in Python - For, While and Nested Loops Python Functions Python def Keyword Python return statement Global and Local Variables in Python Recursion in Python *args and **kwargs in Python Python Lambda Functions Python map() function Python Data Structures Python String Python Lists Python Tuples Dictionaries in Python Python Sets Python Arrays List Comprehension in Python Python OOPs Concepts Python Exception Handling File Handling in Python Python Database Handling Python MongoDB Tutorial Python MySQL Python Packages or Libraries Python Modules Python DSA Libraries List of Python GUI Library and Packages Data Science with Python Python NumPy Pandas Tutorial Matplotlib Tutorial Introduction to Seaborn - Python StatsModel Library- Tutorial Learning Model Building in Scikit-learn XGBoost TensorFlow Tutorial What is PyTorch ? Web Development with Python Flask Tutorial Django Tutorial | Learn Django Framework Django ORM - Inserting, Updating & Deleting Data Templating With Jinja2 in Flask Django Templates Python | Build a REST API using Flask How to Create a basic API using Django Rest Framework ? Python Quiz Python Coding Practice Problems Python Interview Questions and Answers DSA to Development Course Python Tutorial | Learn Python Programming Language Last Updated : 03 May, 2025 Comments Improve Suggest changes Like Article Like Report Python Tutorial \u2013 Python is one of the most popular programming languages. It\u2019s simple to use, packed with features and supported by a wide range of libraries and frameworks. Its clean syntax makes it beginner-friendly. Python is: A high-level language, used in web development, data science, automation, AI and more. Known for its readability, which means code is easier to write, understand and maintain. Backed by library support, so we don\u2019t have to build everything from scratch, there\u2019s probably a library that already does what we need. Why to Learn Python? Python requires fewer lines of code compared to other programming languages. Python is in high demand as it provides many job opportunities in Software Development, Data Science and AI/ML. Python provides popular Web Development, AI/ML, Data Science and Data Analysis Libraries like Django, Flask, Pandas, Tensorflow, Scikit-learn and many more. Python is an object oriented programming language which encapsulates code within object. Python is cross-platform which works on Windows, Mac and Linux without major changes. Python is used by big companies like Google, Netflix and NASA. First Python Program Here is a simple Python code, printing a string. We recommend you to edit the code and try to print your own name. Python print ( \"Hello World\" ) Output Hello World 1. Python Basics In this section, we\u2019ll cover the basics of Python programming, including installing Python, writing first program, understanding comments and working with variables, keywords and operators. These are essential building blocks to get started with Python coding. Before starting to learn python we need to install python on our system. Introduction Input and Output Variables Operators Quiz: Basics , I/O Keywords Data Types Quiz: Data Types , Numbers , Boolean Conditional Statements Python Loops Quiz : Control Flow , Loops 2. Python Functions Python Functions are the backbone of organized and efficient code in Python. Here, in this section of Python 3 tutorial we'll explore their syntax, parameter handling, return values and variable scope. From basic concepts to advanced techniques like closures and decorators. Along the way, we'll also introduce versatile functions like range(), map, filter and lambda functions. def keyword Use of pass Statement in Function Return statement Global and Local Variables Recursion in Python *args and **kwargs in Function \u2018Self\u2019 as Default Argument First Class Function Lambda Function Map , Reduce and Filter Function Inner Function Decorators Quiz: Functions 3. Python Data Structures Python offers versatile collections of data types, including lists, string, tuples, sets, dictionaries and arrays. In this section, we will learn about each data types in detail. Strings List Quiz: List , String Tuples Dictionary Quiz: Tuples , Dictionary Sets Arrays List Comprehension Quiz: Sets , Arrays , List Comprehension Python's collections module offers essential data structures, including the following: Counters Heapq Deque OrderedDict Defaultdict Quiz: Data Structures To learn data structure and algorithm with python in detail, you can refer to our DSA with Python Tutorial. 4. Python OOPs Concepts In this section of Python OOPs , we'll explore the core principles of object-oriented programming (OOP) in Python. From encapsulation to inheritance, polymorphism, abstract classes and iterators, we'll cover the essential", "start_char_idx": 0, "end_char_idx": 5310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1f2ca55-19d6-4347-82d0-c82a7c2faab1": {"__data__": {"id_": "a1f2ca55-19d6-4347-82d0-c82a7c2faab1", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f706a1d-5c5e-446d-ab65-708456c40080", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0409e30a5b8231f9b7970dd93cd8d250a1db63dc31f357ad00fa5481f7c58c06", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "64257430-5f6e-49c0-884f-6635b2af54af", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_0.txt", "file_name": "www.geeksforgeeks.org_2_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d99b6eb2ba0127bd8561ea8d592697e2eee23006b1bc34bac8904988eeb595e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94c21b1f-f11f-4d0c-8e36-d04a7dae2390", "node_type": "1", "metadata": {}, "hash": "0702e0d42f4e0a873de55d5884a088e4022cd366509d4476c2257a331112eb69", "class_name": "RelatedNodeInfo"}}, "text": "concepts that helps you to build modular, reusable and scalable code. Classes and Objects Polymorphism Inheritance Abstract Encapsulation Iterators Quiz: OOPs 5. Python Exception Handling In this section of Python Tutorial, we'll explore Python Exception Handling that how Python deals with unexpected errors, enabling us to write fault-tolerant code. We'll cover file handling, including reading from and writing to files. Exception handling Try and Except Built-in Exception User defined Exception Quiz: Exception Handling 6. File Handling In this section, we will cover file handling, including reading from and writing to files. File Handling Different File Modes Read Files Write/Create Files OS Module pathlib Module Directory Management Quiz: File Handling 7. Python Database Handling In this section we will learn how to access and work with MySQL and MongoDB databases Python MongoDB Tutorial Python MySQL Tutorial 8. Python Packages or Libraries Python is a huge collection of Python Packages standard libraries that make development easier. These libraries help with a wide range of tasks and can save you a lot of time by providing ready-to-use tools. Some commonly used types of libraries in Python include: Built-in Modules in Python Python DSA Libraries Python GUI Libraries 9. Data Science with Python 1. Foundational Libraries : These are the libraries that form the base for all data science work. Start here to build a strong foundation. NumPy Pandas Matplotlib 2. Advanced Visualization and Statistical Tools: Once you\u2019re comfortable with basic data handling and visualization, move to creating cleaner visuals and performing statistical analysis. Seaborn Statsmodel 3. Machine Learning Libraries: After data manipulation and visualization, learn machine learning, starting with simpler models and moving to advanced ones. Scikit-learn XGBoost / LightGBM 4. Deep Learning Frameworks: If you\u2019re interested in AI and deep learning, these libraries will allow you to build and train neural networks. TensorFlow and Keras PyTorch To learn more, you can refer to Python for Data Science . 10. Web Development with Python 1. Core Web Frameworks (Backend Development with Python): These are the tools for building Python-based web applications. Flask Django 2. Database Integration: Learn how to connect Python web frameworks to databases for storing and retrieving data. SQLite SQLAlchemy Django ORM 3. Front-End and Backend Integration: Learn how to connect Python backends with front-end technologies to create dynamic, full-stack web applications. Jinja2 (Flask) Django Templates 4. API Development: Learn to build APIs (Application Programming Interfaces) for connecting your backend with front-end apps or other services. Flask-RESTful Django REST Framework (DRF) To learn more, you can refer to Python for Web Development . Python Quizzes Python quiz page covers topics including variables, data types and how to manage output effectively. You'll explore operators and control flow to structure our code, along with loops (for and while) for repetitive tasks. Additionally, you'll gain knowledge with Python data structures such as lists, tuples, dictionaries and sets. Quizzes Python Practice The Python Coding Practice Problems page offers exercises for all skill levels, covering basics, loops, functions and OOP. You'll work with lists, strings, dictionaries, sets and advanced structures like heaps and deques. These problems help build a strong foundation and boost confidence in solving real-world coding challenges. Python Coding Problems Features of Python Python stands out because of its simplicity and versatility, making it a top choice for both beginners and professionals. Here are some key features or characteristics: Easy to Read and Write: Python\u2019s syntax is clean and simple, making the code easy to understand and write. It is suitable for beginners. Interpreted Language: Python executes code line by line, which helps in easy debugging and testing during development. Object-Oriented and Functional: Python supports both object-oriented and functional programming, giving developers flexibility in how they structure their code. Dynamically Typed: You don\u2019t need to specify data types when declaring variables; Python figures it out automatically. Extensive Libraries: Python has a rich collection of libraries for tasks like web development, data analysis, machine learning and more. Cross-Platform: Python can run on different operating systems like Windows, macOS and Linux without modification. Community Support: Python has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions. This Python tutorial is updated based on latest Python 3.13.1 version. Applications of Python Web Development : Frameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently. Data Science & Analysis : Python is most preferred language for data analysis, visualization and handling large datasets.", "start_char_idx": 0, "end_char_idx": 5055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94c21b1f-f11f-4d0c-8e36-d04a7dae2390": {"__data__": {"id_": "94c21b1f-f11f-4d0c-8e36-d04a7dae2390", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f706a1d-5c5e-446d-ab65-708456c40080", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0409e30a5b8231f9b7970dd93cd8d250a1db63dc31f357ad00fa5481f7c58c06", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1f2ca55-19d6-4347-82d0-c82a7c2faab1", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9f2904cd1ae50e2376240ce391dc727cb9ee520137ad83691c7d525f84596bd8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ce240749-dd0b-4c20-8399-a00193565120", "node_type": "1", "metadata": {}, "hash": "bde1ff9e7dc81e37ab7c3b6053e6b2a3a2bce56dc08c88992f1b468fe13777ca", "class_name": "RelatedNodeInfo"}}, "text": "Object-Oriented and Functional: Python supports both object-oriented and functional programming, giving developers flexibility in how they structure their code. Dynamically Typed: You don\u2019t need to specify data types when declaring variables; Python figures it out automatically. Extensive Libraries: Python has a rich collection of libraries for tasks like web development, data analysis, machine learning and more. Cross-Platform: Python can run on different operating systems like Windows, macOS and Linux without modification. Community Support: Python has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions. This Python tutorial is updated based on latest Python 3.13.1 version. Applications of Python Web Development : Frameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently. Data Science & Analysis : Python is most preferred language for data analysis, visualization and handling large datasets. Because of extensive libraries like Pandas, NumPy and Matplotlib. Machine Learning & AI : Python is popular in AI and machine learning because of its powerful libraries like TensorFlow, Keras and Scikit-learn. Scripting & Automation : Python\u2019s simplicity makes it ideal for writing scripts that automate tasks in different systems, from server management to file handling. Python", "start_char_idx": 4011, "end_char_idx": 5435, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce240749-dd0b-4c20-8399-a00193565120": {"__data__": {"id_": "ce240749-dd0b-4c20-8399-a00193565120", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ccb122f-491f-48b6-a432-1fe3243a7a1a", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "578153eab1154fe5ccf9de9a97d21cb6672652ba4ff973a0e37c30fc76dce565", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94c21b1f-f11f-4d0c-8e36-d04a7dae2390", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b00fd4ff68fd1b7c380efbfb0408ac003d8c65ee8ff5272d4797cc721b4999e0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f95ea3e2-47d0-438e-989e-a57bb75a1707", "node_type": "1", "metadata": {}, "hash": "d82c5d8d13c4ede1c51a12318b43a5b65b14dbc8bd9e3509973a71aa6483c8d1", "class_name": "RelatedNodeInfo"}}, "text": "is commonly used to automate repetitive tasks, making processes faster and more efficient. Web Scraping : Libraries like Beautiful Soup and Scrapy. Desktop App Development : Python can be used to build desktop applications using frameworks like Tkinter and PyQt. Python is also used for game development, with libraries like Pygame to create simple games. Python vs. Other Programming Languages Below is the comparison of Python with C, C++ and Java : Feature Python C/C++ JavaScript Java Type Interpreted Compiled Interpreted Compiled and Interpreted Paradigm Multi-paradigm (object-oriented, procedural, functional) Procedural (C), Multi-paradigm (C++: object-oriented, generic) Multi-paradigm (event-driven, functional, object-oriented) Object-oriented, structured Memory Management Automatic Manual Automatic Automatic Syntax Simple Complex Simple Complex Use Cases Web development, data analysis, machine learning System programming, embedded systems, game/high-performance development Large-scale applications, enterprise software Large-scale applications, enterprise software Notable Frameworks/Libraries Django, Flask Standard Library, Boost Spring, Hibernate Spring, Hibernate Community Support Strong Strong Strong Strong Job Market Abundant Abundant Abundant Abundant List of Companies Using Python These are some Popular companies that use Python in their workflow: Company Description Google Uses Python for various applications, including their search engine and machine learning projects. Instagram The backend of Instagram is built using Python, enabling it to handle millions of users efficiently. Spotify Python is used for data analysis and backend services, helping improve user recommendations. Dropbox Python powers the desktop client of Dropbox, making it easy to sync files across devices. Netflix Python helps Netflix with data analysis and managing its content recommendation algorithms. Reddit One of the largest online communities, Reddit, uses Python for its core functionalities. Uber Uber uses Python for various features, including dynamic pricing and data analysis. Pinterest Python plays a key role in the backend of Pinterest, helping scale and manage user content. Career & Jobs in Python Python offer diverse opportunities across industries, here we have listed all the best career opportunity that anyone can pursue after learning Python. Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Python Developer \u20b9500,000 \u2013 \u20b91,200,000 $60,000 \u2013 $110,000 Data Scientist \u20b9600,000 \u2013 \u20b91,500,000 $70,000 \u2013 $130,000 Machine Learning Engineer \u20b9700,000 \u2013 \u20b91,800,000 $75,000 \u2013 $140,000 Full Stack Developer \u20b9600,000 \u2013 \u20b91,300,000 $65,000 \u2013 $120,000 DevOps Engineer \u20b9800,000 \u2013 \u20b92,000,000 $80,000 \u2013 $140,000 Automation Engineer \u20b9500,000 \u2013 \u20b91,200,000 $55,000 \u2013 $100,000 Data Analyst \u20b9400,000 \u2013 \u20b9900,000 $50,000 \u2013 $90,000 Software Engineer \u20b9500,000 \u2013 \u20b91,500,000 $65,000 \u2013 $120,000 Backend Developer \u20b9600,000 \u2013 \u20b91,300,000 $70,000 \u2013 $125,000 AI Engineer \u20b9900,000 \u2013 \u20b92,500,000 $90,000 \u2013 $160,000 Python Latest & Upcoming Features Python 3.13 is the most recent stable release of the programming language, featuring a blend of updates to its syntax, implementation and standard library. Key enhancements include the introduction of a revamped interactive interpreter, experimental capabilities for operating in a free-threaded mode (as outlined in PEP 703) and the addition of a Just-In-Time (JIT) compiler (detailed in PEP 744). The upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691). --> In this tutorial, we've provided the latest Python 3.13 version compiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises. Comment More info Campus Training Program Next Article Python Introduction kartik Follow Improve Article Tags : Python Python Programs python Tutorials Practice Tags : python python Similar Reads Python for Kids - Fun Tutorial to Learn Python Programming Python for Kids - Python is an easy-to-understand and good-to-start programming language. In this Python tutorial for kids or beginners, you will learn Python and know why... 15+ min read Python Tips and Tricks for Competitive Programming Python Programming language makes everything easier and straightforward.", "start_char_idx": 0, "end_char_idx": 4478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f95ea3e2-47d0-438e-989e-a57bb75a1707": {"__data__": {"id_": "f95ea3e2-47d0-438e-989e-a57bb75a1707", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ccb122f-491f-48b6-a432-1fe3243a7a1a", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "578153eab1154fe5ccf9de9a97d21cb6672652ba4ff973a0e37c30fc76dce565", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ce240749-dd0b-4c20-8399-a00193565120", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1966dd2610c770a440d4bd5f65678951823d3a5f66b316ca2d47b948d8ae13b2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f40d636-5a23-43fd-8ffb-367b3f9a0bfe", "node_type": "1", "metadata": {}, "hash": "d65088596f9fba556241258ae18401f41982dec9b9118c54920d7b4371648cb4", "class_name": "RelatedNodeInfo"}}, "text": "The upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691). --> In this tutorial, we've provided the latest Python 3.13 version compiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises. Comment More info Campus Training Program Next Article Python Introduction kartik Follow Improve Article Tags : Python Python Programs python Tutorials Practice Tags : python python Similar Reads Python for Kids - Fun Tutorial to Learn Python Programming Python for Kids - Python is an easy-to-understand and good-to-start programming language. In this Python tutorial for kids or beginners, you will learn Python and know why... 15+ min read Python Tips and Tricks for Competitive Programming Python Programming language makes everything easier and straightforward. Effective use of its built-in libraries can save a lot of time and help with faster submissions wh... 15+ min read Python Event-Driven Programming Event-driven programming is a powerful paradigm used in Python for building responsive and scalable applications. In this model, the flow of the program is driven by event... 15+ min read Structuring Python Programs In this article, you would come to know about proper structuring and formatting your python programs. Python Statements In general, the interpreter reads and executes the... 15+ min read Difference Between Go and Python Programming Language Golang is a procedural programming language. It was developed in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google but launched in 2009 as an open-source prog... 11 min read Understanding the Execution of Python Program This article aims at providing a detailed insight into the execution of the Python program. Let's consider the below example. Example: Python3 a = 10 b = 10 print(\"Su... 11 min read Python Exercise with Practice Questions", "start_char_idx": 3462, "end_char_idx": 5537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f40d636-5a23-43fd-8ffb-367b3f9a0bfe": {"__data__": {"id_": "2f40d636-5a23-43fd-8ffb-367b3f9a0bfe", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_3.txt", "file_name": "www.geeksforgeeks.org_2_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19a355b6-7d74-423b-9cee-2883f4bf25cd", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_3.txt", "file_name": "www.geeksforgeeks.org_2_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "44ab5e865ccb1c96c52aabab36514536eab7d5a1b70c5f02e64889ef86ae8b99", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f95ea3e2-47d0-438e-989e-a57bb75a1707", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bd41f778f6d271df642d5cdd9a3cf894ad9a704098cde9438db8dd0e29e5bb9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76d34fd4-451c-4840-9bf3-7e7e63ecd399", "node_type": "1", "metadata": {}, "hash": "7b4a1c365dae9a387493194e13906f6a828ad8ccbc88063a83255b5c04145ad2", "class_name": "RelatedNodeInfo"}}, "text": "and Solutions Python Exercise for Beginner: Practice makes perfect in everything, and this is especially true when learning Python. If you're a beginner, regularly practicing Python exe... 15+ min read 10 Python Code Snippets For Everyday Programming Problems In recent years, the Python programming language has seen a huge user base. One of the reasons could be that it is easier to learn as compared to other object-oriented pro... 15+ min read How to Import Other Python Files? We have a task of how to import other Python Files. In this article, we will see how to import other Python Files. Python's modular and reusable nature is one of its stren... 15+ min read Comparing Python with C and C++ In the following article, we will compare the 3 most used coding languages from a beginner's perspective. It will help you to learn basics of all the 3 languages together... 15+ min read Like 279k+ interested Geeks Python Full Course Online - Complete Beginner to Advanced Explore 2k+ interested Geeks Complete Python Program - Mastering from Fundamentals to Advanced Concepts Explore 331k+ interested Geeks Data Structures & Algorithms in Python - Self Paced Explore We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Improvement Suggest changes Suggest Changes Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal. Create Improvement Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all. Suggest Changes min 4 words, max Words Limit:1000 Thank You! Your suggestions are valuable to us. What kind of Experience do you want to share? Interview Experiences Admission Experiences Career Journeys Work Experiences Campus Experiences Competitive Exam Experiences", "start_char_idx": 0, "end_char_idx": 1968, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76d34fd4-451c-4840-9bf3-7e7e63ecd399": {"__data__": {"id_": "76d34fd4-451c-4840-9bf3-7e7e63ecd399", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_0.txt", "file_name": "www.geeksforgeeks.org_4_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a96c4de-1f61-4275-9a0b-328e695e37f2", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_0.txt", "file_name": "www.geeksforgeeks.org_4_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "73075b4cd0fd08c5e3c475e17c6974641d7bf818839ccc38c22861154f24a6b9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f40d636-5a23-43fd-8ffb-367b3f9a0bfe", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_3.txt", "file_name": "www.geeksforgeeks.org_2_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "44ab5e865ccb1c96c52aabab36514536eab7d5a1b70c5f02e64889ef86ae8b99", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d908bda8-03ef-41ff-a43b-5f630ef663c0", "node_type": "1", "metadata": {}, "hash": "43fbc7c9ba99804d4f65fd33b143443d2c528a38c56408b918b5db36f9a3212d", "class_name": "RelatedNodeInfo"}}, "text": "Python Tutorial | Learn Python Programming Language | GeeksforGeeks Python Course Python Tutorial Interview Questions Python Quiz Python Glossary Python Projects Practice Python Data Science With Python Python Web Dev DSA with Python Python OOPs Sign In \u25b2 Open In App Explore GfG Courses Share Your Experiences Python Tutorial | Learn Python Programming Language Python Fundamentals Python Introduction Input and Output in Python Python Variables Python Operators Python Keywords Python Data Types Conditional Statements in Python Loops in Python - For, While and Nested Loops Python Functions Python def Keyword Python return statement Global and Local Variables in Python Recursion in Python *args and **kwargs in Python Python Lambda Functions Python map() function Python Data Structures Python String Python Lists Python Tuples Dictionaries in Python Python Sets Python Arrays List Comprehension in Python Python OOPs Concepts Python Exception Handling File Handling in Python Python Database Handling Python MongoDB Tutorial Python MySQL Python Packages or Libraries Python Modules Python DSA Libraries List of Python GUI Library and Packages Data Science with Python Python NumPy Pandas Tutorial Matplotlib Tutorial Introduction to Seaborn - Python StatsModel Library- Tutorial Learning Model Building in Scikit-learn XGBoost TensorFlow Tutorial What is PyTorch ? Web Development with Python Flask Tutorial Django Tutorial | Learn Django Framework Django ORM - Inserting, Updating & Deleting Data Templating With Jinja2 in Flask Django Templates Python | Build a REST API using Flask How to Create a basic API using Django Rest Framework ? Python Quiz Python Coding Practice Problems Python Interview Questions and Answers DSA to Development Course Python Tutorial | Learn Python Programming Language Last Updated : 03 May, 2025 Comments Improve Suggest changes Like Article Like Report Python Tutorial \u2013 Python is one of the most popular programming languages. It\u2019s simple to use, packed with features and supported by a wide range of libraries and frameworks. Its clean syntax makes it beginner-friendly. Python is: A high-level language, used in web development, data science, automation, AI and more. Known for its readability, which means code is easier to write, understand and maintain. Backed by library support, so we don\u2019t have to build everything from scratch, there\u2019s probably a library that already does what we need. Why to Learn Python? Python requires fewer lines of code compared to other programming languages. Python is in high demand as it provides many job opportunities in Software Development, Data Science and AI/ML. Python provides popular Web Development, AI/ML, Data Science and Data Analysis Libraries like Django, Flask, Pandas, Tensorflow, Scikit-learn and many more. Python is an object oriented programming language which encapsulates code within object. Python is cross-platform which works on Windows, Mac and Linux without major changes. Python is used by big companies like Google, Netflix and NASA. First Python Program Here is a simple Python code, printing a string. We recommend you to edit the code and try to print your own name. Python print ( \"Hello World\" ) Output Hello World 1. Python Basics In this section, we\u2019ll cover the basics of Python programming, including installing Python, writing first program, understanding comments and working with variables, keywords and operators. These are essential building blocks to get started with Python coding. Before starting to learn python we need to install python on our system. Introduction Input and Output Variables Operators Quiz: Basics , I/O Keywords Data Types Quiz: Data Types , Numbers , Boolean Conditional Statements Python Loops Quiz : Control Flow , Loops 2. Python Functions Python Functions are the backbone of organized and efficient code in Python. Here, in this section of Python 3 tutorial we'll explore their syntax, parameter handling, return values and variable scope. From basic concepts to advanced techniques like closures and decorators. Along the way, we'll also introduce versatile functions like range(), map, filter and lambda functions. def keyword Use of pass Statement in Function Return statement Global and Local Variables Recursion in Python *args and **kwargs in Function \u2018Self\u2019 as Default Argument First Class Function Lambda Function Map , Reduce and Filter Function Inner Function Decorators Quiz: Functions 3. Python Data Structures Python offers versatile collections of data types, including lists, string, tuples, sets, dictionaries and arrays. In this section, we will learn about each data types in detail. Strings List Quiz: List , String Tuples Dictionary Quiz: Tuples , Dictionary Sets Arrays List Comprehension Quiz: Sets , Arrays , List Comprehension Python's collections module offers essential data structures, including the following: Counters Heapq Deque OrderedDict Defaultdict Quiz: Data Structures To learn data structure and algorithm with python in detail, you can refer to our DSA with Python Tutorial. 4. Python OOPs Concepts In this section of Python OOPs , we'll explore the core principles of object-oriented programming (OOP) in Python. From encapsulation to inheritance, polymorphism, abstract classes and iterators, we'll cover the essential", "start_char_idx": 0, "end_char_idx": 5310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d908bda8-03ef-41ff-a43b-5f630ef663c0": {"__data__": {"id_": "d908bda8-03ef-41ff-a43b-5f630ef663c0", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ccd4a68-89fd-425c-839e-ed83e4aee45f", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "de35cb81a50b63428b290c8ce3c5dc9836a76ae558088a7ab39248df8be9f758", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "76d34fd4-451c-4840-9bf3-7e7e63ecd399", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_0.txt", "file_name": "www.geeksforgeeks.org_4_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "73075b4cd0fd08c5e3c475e17c6974641d7bf818839ccc38c22861154f24a6b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2429ce8e-7ab6-4529-9afa-d6636704f708", "node_type": "1", "metadata": {}, "hash": "0702e0d42f4e0a873de55d5884a088e4022cd366509d4476c2257a331112eb69", "class_name": "RelatedNodeInfo"}}, "text": "concepts that helps you to build modular, reusable and scalable code. Classes and Objects Polymorphism Inheritance Abstract Encapsulation Iterators Quiz: OOPs 5. Python Exception Handling In this section of Python Tutorial, we'll explore Python Exception Handling that how Python deals with unexpected errors, enabling us to write fault-tolerant code. We'll cover file handling, including reading from and writing to files. Exception handling Try and Except Built-in Exception User defined Exception Quiz: Exception Handling 6. File Handling In this section, we will cover file handling, including reading from and writing to files. File Handling Different File Modes Read Files Write/Create Files OS Module pathlib Module Directory Management Quiz: File Handling 7. Python Database Handling In this section we will learn how to access and work with MySQL and MongoDB databases Python MongoDB Tutorial Python MySQL Tutorial 8. Python Packages or Libraries Python is a huge collection of Python Packages standard libraries that make development easier. These libraries help with a wide range of tasks and can save you a lot of time by providing ready-to-use tools. Some commonly used types of libraries in Python include: Built-in Modules in Python Python DSA Libraries Python GUI Libraries 9. Data Science with Python 1. Foundational Libraries : These are the libraries that form the base for all data science work. Start here to build a strong foundation. NumPy Pandas Matplotlib 2. Advanced Visualization and Statistical Tools: Once you\u2019re comfortable with basic data handling and visualization, move to creating cleaner visuals and performing statistical analysis. Seaborn Statsmodel 3. Machine Learning Libraries: After data manipulation and visualization, learn machine learning, starting with simpler models and moving to advanced ones. Scikit-learn XGBoost / LightGBM 4. Deep Learning Frameworks: If you\u2019re interested in AI and deep learning, these libraries will allow you to build and train neural networks. TensorFlow and Keras PyTorch To learn more, you can refer to Python for Data Science . 10. Web Development with Python 1. Core Web Frameworks (Backend Development with Python): These are the tools for building Python-based web applications. Flask Django 2. Database Integration: Learn how to connect Python web frameworks to databases for storing and retrieving data. SQLite SQLAlchemy Django ORM 3. Front-End and Backend Integration: Learn how to connect Python backends with front-end technologies to create dynamic, full-stack web applications. Jinja2 (Flask) Django Templates 4. API Development: Learn to build APIs (Application Programming Interfaces) for connecting your backend with front-end apps or other services. Flask-RESTful Django REST Framework (DRF) To learn more, you can refer to Python for Web Development . Python Quizzes Python quiz page covers topics including variables, data types and how to manage output effectively. You'll explore operators and control flow to structure our code, along with loops (for and while) for repetitive tasks. Additionally, you'll gain knowledge with Python data structures such as lists, tuples, dictionaries and sets. Quizzes Python Practice The Python Coding Practice Problems page offers exercises for all skill levels, covering basics, loops, functions and OOP. You'll work with lists, strings, dictionaries, sets and advanced structures like heaps and deques. These problems help build a strong foundation and boost confidence in solving real-world coding challenges. Python Coding Problems Features of Python Python stands out because of its simplicity and versatility, making it a top choice for both beginners and professionals. Here are some key features or characteristics: Easy to Read and Write: Python\u2019s syntax is clean and simple, making the code easy to understand and write. It is suitable for beginners. Interpreted Language: Python executes code line by line, which helps in easy debugging and testing during development. Object-Oriented and Functional: Python supports both object-oriented and functional programming, giving developers flexibility in how they structure their code. Dynamically Typed: You don\u2019t need to specify data types when declaring variables; Python figures it out automatically. Extensive Libraries: Python has a rich collection of libraries for tasks like web development, data analysis, machine learning and more. Cross-Platform: Python can run on different operating systems like Windows, macOS and Linux without modification. Community Support: Python has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions. This Python tutorial is updated based on latest Python 3.13.1 version. Applications of Python Web Development : Frameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently. Data Science & Analysis : Python is most preferred language for data analysis, visualization and handling large datasets.", "start_char_idx": 0, "end_char_idx": 5055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2429ce8e-7ab6-4529-9afa-d6636704f708": {"__data__": {"id_": "2429ce8e-7ab6-4529-9afa-d6636704f708", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ccd4a68-89fd-425c-839e-ed83e4aee45f", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "de35cb81a50b63428b290c8ce3c5dc9836a76ae558088a7ab39248df8be9f758", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d908bda8-03ef-41ff-a43b-5f630ef663c0", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c7ac678442c85a984505ff659c79bce72df8ae668e7e76807390eebe8929bdd6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6994cbb-707e-4127-989b-c70a12dd6340", "node_type": "1", "metadata": {}, "hash": "bde1ff9e7dc81e37ab7c3b6053e6b2a3a2bce56dc08c88992f1b468fe13777ca", "class_name": "RelatedNodeInfo"}}, "text": "Object-Oriented and Functional: Python supports both object-oriented and functional programming, giving developers flexibility in how they structure their code. Dynamically Typed: You don\u2019t need to specify data types when declaring variables; Python figures it out automatically. Extensive Libraries: Python has a rich collection of libraries for tasks like web development, data analysis, machine learning and more. Cross-Platform: Python can run on different operating systems like Windows, macOS and Linux without modification. Community Support: Python has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions. This Python tutorial is updated based on latest Python 3.13.1 version. Applications of Python Web Development : Frameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently. Data Science & Analysis : Python is most preferred language for data analysis, visualization and handling large datasets. Because of extensive libraries like Pandas, NumPy and Matplotlib. Machine Learning & AI : Python is popular in AI and machine learning because of its powerful libraries like TensorFlow, Keras and Scikit-learn. Scripting & Automation : Python\u2019s simplicity makes it ideal for writing scripts that automate tasks in different systems, from server management to file handling. Python", "start_char_idx": 4011, "end_char_idx": 5435, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6994cbb-707e-4127-989b-c70a12dd6340": {"__data__": {"id_": "e6994cbb-707e-4127-989b-c70a12dd6340", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "508fc256-7148-45f1-902d-c4d0d957dff8", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "af64ad5d22436a8fd62705bdfd2946dc1a1a25addf12bf9bdb9f507e9d3a5379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2429ce8e-7ab6-4529-9afa-d6636704f708", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d68d10e69214c440d22ae3821eab90bb15ed84ae0e3accf465125aa4c828259f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67ebc95f-6415-434d-a923-3b89152ffcfe", "node_type": "1", "metadata": {}, "hash": "d82c5d8d13c4ede1c51a12318b43a5b65b14dbc8bd9e3509973a71aa6483c8d1", "class_name": "RelatedNodeInfo"}}, "text": "is commonly used to automate repetitive tasks, making processes faster and more efficient. Web Scraping : Libraries like Beautiful Soup and Scrapy. Desktop App Development : Python can be used to build desktop applications using frameworks like Tkinter and PyQt. Python is also used for game development, with libraries like Pygame to create simple games. Python vs. Other Programming Languages Below is the comparison of Python with C, C++ and Java : Feature Python C/C++ JavaScript Java Type Interpreted Compiled Interpreted Compiled and Interpreted Paradigm Multi-paradigm (object-oriented, procedural, functional) Procedural (C), Multi-paradigm (C++: object-oriented, generic) Multi-paradigm (event-driven, functional, object-oriented) Object-oriented, structured Memory Management Automatic Manual Automatic Automatic Syntax Simple Complex Simple Complex Use Cases Web development, data analysis, machine learning System programming, embedded systems, game/high-performance development Large-scale applications, enterprise software Large-scale applications, enterprise software Notable Frameworks/Libraries Django, Flask Standard Library, Boost Spring, Hibernate Spring, Hibernate Community Support Strong Strong Strong Strong Job Market Abundant Abundant Abundant Abundant List of Companies Using Python These are some Popular companies that use Python in their workflow: Company Description Google Uses Python for various applications, including their search engine and machine learning projects. Instagram The backend of Instagram is built using Python, enabling it to handle millions of users efficiently. Spotify Python is used for data analysis and backend services, helping improve user recommendations. Dropbox Python powers the desktop client of Dropbox, making it easy to sync files across devices. Netflix Python helps Netflix with data analysis and managing its content recommendation algorithms. Reddit One of the largest online communities, Reddit, uses Python for its core functionalities. Uber Uber uses Python for various features, including dynamic pricing and data analysis. Pinterest Python plays a key role in the backend of Pinterest, helping scale and manage user content. Career & Jobs in Python Python offer diverse opportunities across industries, here we have listed all the best career opportunity that anyone can pursue after learning Python. Career Average Salary (INR) Per Annum Average Salary (USD) Per Annum Python Developer \u20b9500,000 \u2013 \u20b91,200,000 $60,000 \u2013 $110,000 Data Scientist \u20b9600,000 \u2013 \u20b91,500,000 $70,000 \u2013 $130,000 Machine Learning Engineer \u20b9700,000 \u2013 \u20b91,800,000 $75,000 \u2013 $140,000 Full Stack Developer \u20b9600,000 \u2013 \u20b91,300,000 $65,000 \u2013 $120,000 DevOps Engineer \u20b9800,000 \u2013 \u20b92,000,000 $80,000 \u2013 $140,000 Automation Engineer \u20b9500,000 \u2013 \u20b91,200,000 $55,000 \u2013 $100,000 Data Analyst \u20b9400,000 \u2013 \u20b9900,000 $50,000 \u2013 $90,000 Software Engineer \u20b9500,000 \u2013 \u20b91,500,000 $65,000 \u2013 $120,000 Backend Developer \u20b9600,000 \u2013 \u20b91,300,000 $70,000 \u2013 $125,000 AI Engineer \u20b9900,000 \u2013 \u20b92,500,000 $90,000 \u2013 $160,000 Python Latest & Upcoming Features Python 3.13 is the most recent stable release of the programming language, featuring a blend of updates to its syntax, implementation and standard library. Key enhancements include the introduction of a revamped interactive interpreter, experimental capabilities for operating in a free-threaded mode (as outlined in PEP 703) and the addition of a Just-In-Time (JIT) compiler (detailed in PEP 744). The upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691). --> In this tutorial, we've provided the latest Python 3.13 version compiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises. Comment More info Campus Training Program Next Article Python Introduction kartik Follow Improve Article Tags : Python Python Programs python Tutorials Practice Tags : python python Similar Reads Python for Kids - Fun Tutorial to Learn Python Programming Python for Kids - Python is an easy-to-understand and good-to-start programming language. In this Python tutorial for kids or beginners, you will learn Python and know why... 15+ min read Python Tips and Tricks for Competitive Programming Python Programming language makes everything easier and straightforward.", "start_char_idx": 0, "end_char_idx": 4478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67ebc95f-6415-434d-a923-3b89152ffcfe": {"__data__": {"id_": "67ebc95f-6415-434d-a923-3b89152ffcfe", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "508fc256-7148-45f1-902d-c4d0d957dff8", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "af64ad5d22436a8fd62705bdfd2946dc1a1a25addf12bf9bdb9f507e9d3a5379", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6994cbb-707e-4127-989b-c70a12dd6340", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "65a3e82dce8cb18e08a36a499ba25315188275ec3795133abc812c06e6360c2f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74acf83d-38ea-4705-a262-2d91f69f6370", "node_type": "1", "metadata": {}, "hash": "d65088596f9fba556241258ae18401f41982dec9b9118c54920d7b4371648cb4", "class_name": "RelatedNodeInfo"}}, "text": "The upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691). --> In this tutorial, we've provided the latest Python 3.13 version compiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises. Comment More info Campus Training Program Next Article Python Introduction kartik Follow Improve Article Tags : Python Python Programs python Tutorials Practice Tags : python python Similar Reads Python for Kids - Fun Tutorial to Learn Python Programming Python for Kids - Python is an easy-to-understand and good-to-start programming language. In this Python tutorial for kids or beginners, you will learn Python and know why... 15+ min read Python Tips and Tricks for Competitive Programming Python Programming language makes everything easier and straightforward. Effective use of its built-in libraries can save a lot of time and help with faster submissions wh... 15+ min read Python Event-Driven Programming Event-driven programming is a powerful paradigm used in Python for building responsive and scalable applications. In this model, the flow of the program is driven by event... 15+ min read Structuring Python Programs In this article, you would come to know about proper structuring and formatting your python programs. Python Statements In general, the interpreter reads and executes the... 15+ min read Difference Between Go and Python Programming Language Golang is a procedural programming language. It was developed in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google but launched in 2009 as an open-source prog... 11 min read Understanding the Execution of Python Program This article aims at providing a detailed insight into the execution of the Python program. Let's consider the below example. Example: Python3 a = 10 b = 10 print(\"Su... 11 min read Python Exercise with Practice Questions", "start_char_idx": 3462, "end_char_idx": 5537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74acf83d-38ea-4705-a262-2d91f69f6370": {"__data__": {"id_": "74acf83d-38ea-4705-a262-2d91f69f6370", "embedding": null, "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_3.txt", "file_name": "www.geeksforgeeks.org_4_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4d5155f-6114-49a1-84cc-491baf8a23d2", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_3.txt", "file_name": "www.geeksforgeeks.org_4_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ddd5cc004b72436331d3cc4bd895ae87b8c812c71ed0adbb80d4e1c55f38dc62", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67ebc95f-6415-434d-a923-3b89152ffcfe", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ac550128d66d71738d915a4cb35035fece5cf9a758680c0b80337b3018d26de2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7893f684-2f2e-406b-88f1-9092015ddbdc", "node_type": "1", "metadata": {}, "hash": "f638a973b2b89ced566a94916d37b32846f678edd85a189343ab40453bf34e73", "class_name": "RelatedNodeInfo"}}, "text": "and Solutions Python Exercise for Beginner: Practice makes perfect in everything, and this is especially true when learning Python. If you're a beginner, regularly practicing Python exe... 15+ min read 10 Python Code Snippets For Everyday Programming Problems In recent years, the Python programming language has seen a huge user base. One of the reasons could be that it is easier to learn as compared to other object-oriented pro... 15+ min read How to Import Other Python Files? We have a task of how to import other Python Files. In this article, we will see how to import other Python Files. Python's modular and reusable nature is one of its stren... 15+ min read Comparing Python with C and C++ In the following article, we will compare the 3 most used coding languages from a beginner's perspective. It will help you to learn basics of all the 3 languages together... 15+ min read Like 279k+ interested Geeks Python Full Course Online - Complete Beginner to Advanced Explore 2k+ interested Geeks Complete Python Program - Mastering from Fundamentals to Advanced Concepts Explore 331k+ interested Geeks Data Structures & Algorithms in Python - Self Paced Explore We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Improvement Suggest changes Suggest Changes Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal. Create Improvement Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all. Suggest Changes min 4 words, max Words Limit:1000 Thank You! Your suggestions are valuable to us. What kind of Experience do you want to share? Interview Experiences Admission Experiences Career Journeys Work Experiences Campus Experiences Competitive Exam Experiences", "start_char_idx": 0, "end_char_idx": 1968, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7893f684-2f2e-406b-88f1-9092015ddbdc": {"__data__": {"id_": "7893f684-2f2e-406b-88f1-9092015ddbdc", "embedding": null, "metadata": {"file_path": "docs\\python\\www.hackerrank.com_23_0.txt", "file_name": "www.hackerrank.com_23_0.txt", "file_type": "text/plain", "file_size": 683, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c35cd13-8a38-444a-b187-d77432161cb8", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.hackerrank.com_23_0.txt", "file_name": "www.hackerrank.com_23_0.txt", "file_type": "text/plain", "file_size": 683, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8cc01ace4ab21190ae5893c505ad428d1c108a4f31e9e1da09bba252c5da78c8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74acf83d-38ea-4705-a262-2d91f69f6370", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_3.txt", "file_name": "www.geeksforgeeks.org_4_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ddd5cc004b72436331d3cc4bd895ae87b8c812c71ed0adbb80d4e1c55f38dc62", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60b60797-e179-4a30-96d4-b24de2dff8af", "node_type": "1", "metadata": {}, "hash": "45b972adbc4fa07ba6304308fe9c9be86a92ba579ad3b3491ec3d6a3c064ce2c", "class_name": "RelatedNodeInfo"}}, "text": "Solve Python | HackerRank We use cookies to ensure you have the best browsing experience on our website. Please read our cookie policy for more information about how we use cookies. Ok Status Solved Unsolved Skills Problem Solving (Basic) Python (Basic) Problem Solving (Advanced) Python (Intermediate) Difficulty Easy Medium Hard Subdomains Introduction Basic Data Types Strings Sets Math Itertools Collections Date and Time Errors and Exceptions Classes Built-Ins Python Functionals Regex and Parsing XML Closures and Decorators Numpy Debugging Cookie support is required to access HackerRank Seems like cookies are disabled on this browser, please enable them to open this website", "start_char_idx": 0, "end_char_idx": 683, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60b60797-e179-4a30-96d4-b24de2dff8af": {"__data__": {"id_": "60b60797-e179-4a30-96d4-b24de2dff8af", "embedding": null, "metadata": {"file_path": "docs\\python\\www.kaggle.com_22_0.txt", "file_name": "www.kaggle.com_22_0.txt", "file_type": "text/plain", "file_size": 31, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50648295-0160-4522-ae1a-51369fbb510d", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.kaggle.com_22_0.txt", "file_name": "www.kaggle.com_22_0.txt", "file_type": "text/plain", "file_size": 31, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "183d4ca0d356d4b450c980e4b701c6a7a67783ca8f2060feb3286f40c21ffc41", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7893f684-2f2e-406b-88f1-9092015ddbdc", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.hackerrank.com_23_0.txt", "file_name": "www.hackerrank.com_23_0.txt", "file_type": "text/plain", "file_size": 683, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8cc01ace4ab21190ae5893c505ad428d1c108a4f31e9e1da09bba252c5da78c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4837110a-74cc-4f4b-a094-226578b18842", "node_type": "1", "metadata": {}, "hash": "41ea2ebada7549144e6926479f07af722838391707a0034ec1a4fffab3786299", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python Tutorials | Kaggle", "start_char_idx": 0, "end_char_idx": 31, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4837110a-74cc-4f4b-a094-226578b18842": {"__data__": {"id_": "4837110a-74cc-4f4b-a094-226578b18842", "embedding": null, "metadata": {"file_path": "docs\\python\\www.learnpython.org_25_0.txt", "file_name": "www.learnpython.org_25_0.txt", "file_type": "text/plain", "file_size": 2742, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fecf76c8-92fa-4d7e-ab19-c29d177588b7", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.learnpython.org_25_0.txt", "file_name": "www.learnpython.org_25_0.txt", "file_type": "text/plain", "file_size": 2742, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "694effdd096f3dabeccd9645e7a7e103750cf275f7b743bde7553280aef78cea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60b60797-e179-4a30-96d4-b24de2dff8af", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.kaggle.com_22_0.txt", "file_name": "www.kaggle.com_22_0.txt", "file_type": "text/plain", "file_size": 31, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "183d4ca0d356d4b450c980e4b701c6a7a67783ca8f2060feb3286f40c21ffc41", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f457bc5b-0690-44f7-a5b4-4c633c13ee00", "node_type": "1", "metadata": {}, "hash": "49ec2cddc8fd952f4f188e1e3363c2429298bf42caaea5c58e77cd2d48fad38e", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python - Free Interactive Python Tutorial Get started learning Python with DataCamp's free Intro to Python tutorial . Learn Data Science by completing interactive coding challenges and watching videos by expert instructors. Start Now ! This site is generously supported by DataCamp . DataCamp offers online interactive Python Tutorials for Data Science. Join 11 million other learners and get started learning Python for data science today! Good news! You can save 25% off your Datacamp annual subscription with the code LEARNPYTHON23ALE25 - Click here to redeem your discount Welcome Welcome to the LearnPython.org interactive Python tutorial. Whether you are an experienced programmer or not, this website is intended for everyone who wishes to learn the Python programming language. You are welcome to join our group on Facebook for questions, discussions and updates. After you complete the tutorials, you can get certified at LearnX and add your certification to your LinkedIn profile. Just click on the chapter you wish to begin from, and follow the instructions. Good luck! Learn the Basics Hello, World! Variables and Types Lists Basic Operators String Formatting Basic String Operations Conditions Loops Functions Classes and Objects Dictionaries Modules and Packages Input and Output Coding for Kids Starting Out Movement with Functions Collecting items Pushing objects Printing on screen Building objects Apply what you've learned Advanced Tutorials Generators List Comprehensions Lambda functions Multiple Function Arguments Regular Expressions Exception Handling Sets Serialization Partial functions Code Introspection Closures Decorators Map, Filter, Reduce Parsing CSV Files Other Python Tutorials DataCamp has tons of great interactive Python Tutorials covering data manipulation, data visualization, statistics, machine learning, and more Read Python Tutorials and References course from After Hours Programming Contributing Tutorials Read more here: Contributing Tutorials This site is generously supported by DataCamp . DataCamp offers online interactive Python Tutorials for Data Science. Join over a million other learners and get started learning Python for data science today! Take the Test Sponsors Chapters Hello, World! Variables and Types Lists Basic Operators String Formatting Basic String Operations Conditions Loops Functions Classes and Objects Dictionaries Modules and Packages Input and Output Generators List Comprehensions Lambda functions Multiple Function Arguments Regular Expressions Exception Handling Sets Serialization Partial functions Code Introspection Closures Decorators Map, Filter, Reduce Parsing CSV Files DataCamp Copyright \u00a9 learnpython.org. Read our Terms of Use and Privacy Policy", "start_char_idx": 0, "end_char_idx": 2741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f457bc5b-0690-44f7-a5b4-4c633c13ee00": {"__data__": {"id_": "f457bc5b-0690-44f7-a5b4-4c633c13ee00", "embedding": null, "metadata": {"file_path": "docs\\python\\www.programiz.com_7_0.txt", "file_name": "www.programiz.com_7_0.txt", "file_type": "text/plain", "file_size": 5210, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e9e9904-080c-4c4d-97ca-f7d976ba7bf3", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.programiz.com_7_0.txt", "file_name": "www.programiz.com_7_0.txt", "file_type": "text/plain", "file_size": 5210, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "babe433a4d34391ecd8b6d1b5399a8ed5eb35133de587b4e7547546223622714", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4837110a-74cc-4f4b-a094-226578b18842", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.learnpython.org_25_0.txt", "file_name": "www.learnpython.org_25_0.txt", "file_type": "text/plain", "file_size": 2742, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "694effdd096f3dabeccd9645e7a7e103750cf275f7b743bde7553280aef78cea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "39093845-3532-4e6b-8abb-16430d9377fc", "node_type": "1", "metadata": {}, "hash": "cf157ef23a2e411525bee3a5c22b0d85ecc6f04ec9d477b6a0861303660135c8", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python Programming Tutorials Courses Python JavaScript TypeScript SQL HTML CSS C C++ Java R RUST Golang Kotlin Swift C# DSA Ruby Become a certified Python programmer. ENROLL Popular Tutorials Getting Started With Python Python if Statement while Loop in Python Python Lists Dictionaries in Python Start Learning Python Popular Examples Add two numbers Check prime number Find the factorial of a number Print the Fibonacci sequence Check leap year Explore Python Examples Reference Materials Built-in Functions List Methods Dictionary Methods String Methods View all Created with over a decade of experience. Learn Practice Compete Learn Python Learn HTML Learn JavaScript Learn SQL Learn DSA Learn C Learn C++ Learn Java View all Courses on Python Basics Python Intermediate C++ Basics C++ Intermediate C++ OOP C Programming Java Basics Java Intermediate Java OOP View all Courses on Python Challenges JavaScript Challenges Java Challenges C++ Challenges C Challenges View all Challenges on Learn Practice Compete Certification Courses Created with over a decade of experience and thousands of feedback. Learn Python Learn HTML Learn JavaScript Learn SQL Learn DSA View all Courses on Learn C Learn C++ Learn Java Python JavaScript TypeScript SQL HTML CSS C C++ Java More languages Become a certified Python programmer. Try Programiz PRO! Popular Tutorials Getting Started With Python Python if Statement while Loop in Python Python Lists Dictionaries in Python Start Learning Python All Python Tutorials Reference Materials Built-in Functions List Methods Dictionary Methods String Methods View all Python JavaScript C C++ Java R Kotlin Become a certified Python programmer. Try Programiz PRO! Popular Examples Add two numbers Check prime number Find the factorial of a number Print the Fibonacci sequence Check leap year All Python Examples Learn Python Programming Tutorials Courses Examples References Online Compiler Recommended Course: Master Python Programming Perfect for beginners serious about building a career in Python. Created by the Programiz team with over a decade of experience. Try Now Enrollment: 317k Practice Problems: 239+ Projects: 5+ Certifications Python is one of the top programming languages in the world, widely used in fields such as AI, machine learning, data science, and web development. The simple and English-like syntax of Python makes it a go-to language for beginners who want to get into coding quickly. Because Python is used in multiple fields, there is a high demand for Python developers, with competitive base salaries. In this guide, we will cover: Beginner's Guide to Python Is Python for you? Best Way to Learn Python How to Run Python? If you are simply looking to learn Python step-by-step, you can follow our free tutorials in the next section. Beginner's Guide to Python These tutorials will provide you with a solid foundation in Python and prepare you for your career goals. Introduction How to Get Started With Python? Your First Python Program Python Comments Python Fundamentals Python Variables, Constants and Literals Python Type Conversion Python Basic Input and Output Python Operators Python Flow Control Python if...else Statement Python for Loop Python while Loop Python break and continue Python pass Statement Python Data Types Python Numbers, Type Conversion and Mathematics Python List Python Tuple Python Sets Python Dictionary Python Functions Python Functions Python Function Arguments Python Variable Scope Python Global Keyword Python Recursion Python Modules Python Package Python Main function Python Files Python Directory and Files Management Python CSV: Read and Write CSV files Reading CSV files in Python Writing CSV files in Python Python Exception Handling Python Exceptions Python Exception Handling Python Custom Exceptions Python Object and Class Python Objects and Classes Python Inheritance Python Multiple Inheritance Polymorphism in Python Python Operator Overloading Python Advanced Topics List comprehension Python Lambda/Anonymous Function Python Iterators Python Generators Python Namespace and Scope Python Closures Python Decorators Python @property decorator Python RegEx Python Date and Time Python datetime Python strftime() Python strptime() How to get current date and time in Python? Python Get Current Time Python timestamp to datetime and vice-versa Python time Module Python sleep() Additional Topic Precedence and Associativity of Operators in Python Python Keywords and Identifiers Python Asserts Python Json Python pip Python *args and **kwargs Is Python for you? Whether Python is the right choice depends on what you want to accomplish and your career goals. Python from Learning Perspective If you are new to programming and prefer simplicity, Python is probably the right choice for you. Let's see an example. main.py x = 5 y = 10 print(x + y) main.c #include <stdio.h> int main() { int x = 5, y = 10; printf(\"%d\", x + y); return 0; } Here, both programs in C and Python perform the same task. However, the Python code is much easier to understand, even if you have never been a programmer before. That being said, there are some advantages to learning languages like C as your first language.", "start_char_idx": 0, "end_char_idx": 5210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39093845-3532-4e6b-8abb-16430d9377fc": {"__data__": {"id_": "39093845-3532-4e6b-8abb-16430d9377fc", "embedding": null, "metadata": {"file_path": "docs\\python\\www.programiz.com_7_1.txt", "file_name": "www.programiz.com_7_1.txt", "file_type": "text/plain", "file_size": 4362, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d045b31-ddc6-433c-afe5-8d198a0d0189", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.programiz.com_7_1.txt", "file_name": "www.programiz.com_7_1.txt", "file_type": "text/plain", "file_size": 4362, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "841ab87432cb2aeb582bbe129c38a11747a50e6ef80682552bc9cfb920bfaac2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f457bc5b-0690-44f7-a5b4-4c633c13ee00", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.programiz.com_7_0.txt", "file_name": "www.programiz.com_7_0.txt", "file_type": "text/plain", "file_size": 5210, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "babe433a4d34391ecd8b6d1b5399a8ed5eb35133de587b4e7547546223622714", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee3a8984-5051-4b27-8252-7dc792c7f3cf", "node_type": "1", "metadata": {}, "hash": "b3b04941426433fc04a23eb559e97a92855ed954b9998f697a582ff43294790d", "class_name": "RelatedNodeInfo"}}, "text": "For example, C is much closer to the hardware and allows you to work with computer memory directly, thus providing you with a deeper understanding of how your code actually works. On the other hand, Python's clear, English-like syntax allows you to concentrate on problem-solving and building logic without being concerned about unnecessary complexities. So, it's up to you whether you want to quickly get started with programming or really take your time to understand the nitty-gritty parts of programming. Python as a Career Choice Python is a widely used programming language for creating real-world applications. It is extensively used in: Data Science Artificial Intelligence Automation Testing Backend Development Thus, learning Python offers significant advantages for your career opportunities. However, there are certain fields where Python doesn't excel. For example, if you are interested in frontend development, game development, or mobile app development, then Python is not the best choice. In these cases, alternatives such as JavaScript for frontend development, Kotlin, Swift, or Dart for mobile app development, and C++ for game development will be more suitable. Therefore, your career choices can guide you in selecting which programming language to learn. Best Way to Learn Python There is no right or wrong way to learn Python. It all depends on your learning style and pace. In this section, we have included the best Python learning resources tailored to your learning preferences, be it text-based, video-based, or interactive courses. Text-based Tutorial Best: if you are committed to learning Python but do not want to spend on it If you want to learn Python for free with a well-organized, step-by-step tutorial, you can use our free Python tutorials . Our tutorials will guide you through Python one step at a time, using practical examples to strengthen your foundation. Interactive Course Best: if you want hands-on learning, get your progress tracked, and maintain a learning streak Learning to code is tough. It requires dedication and consistency, and you need to write tons of code yourself. While videos and tutorials provide you with a step-by-step guide, they lack hands-on experience and structure. Recognizing all these challenges, Programiz offers a premium Learn Python Course that allows you to gain hands-on learning experience by solving challenges, building real-world projects, and tracking your progress. Online Video Best: if you are an audio-visual learner and learn by watching others code and following along If you're more of a visual learner, we have created a comprehensive Python course for beginners that will guide you on your Python journey. Additionally, there's a popular Python playlist by Corey Schafer available on YouTube to further guide you on your Python journey. If you're looking for a structured university course at zero cost, visit Python Course - University of Helsinki . Mobile App Best: if you are a casual and hobby learner who wants to learn Python on the go While it's possible to learn Python from mobile apps, it's not the ideal way because writing code can be challenging. Additionally, it's difficult to build real-world projects with multiple files on mobile devices. Nevertheless, you can use these apps to try things out. Learn Python Sololearn Important: You cannot learn to code without developing the habit of writing code yourself. Therefore, whatever method you choose, always write code. While writing code, you will encounter errors. Don't worry about them, try to understand them and find solutions. Remember, programming is all about solving problems, and errors are part of the process. How to Run Python? 1. Run Python in your browser. We have created an online editor to run Python directly in your browser. You don't have to go through a tedious installation process. It's completely free, and you can start coding directly. Run Python Online 2. Install Python on Your computer. Once you start writing complex programs and creating projects, you should definitely install Python on your computer. This is especially necessary when you are working with projects that involve multiple files and folders. To install Python on your device, you can use this guide. Getting Started with Python Learn how you can install and use Python on your own computer. Learn more", "start_char_idx": 0, "end_char_idx": 4362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee3a8984-5051-4b27-8252-7dc792c7f3cf": {"__data__": {"id_": "ee3a8984-5051-4b27-8252-7dc792c7f3cf", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_29_0.txt", "file_name": "www.python.org_29_0.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35aee719-2bbd-4376-9760-4ed0430bd967", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_29_0.txt", "file_name": "www.python.org_29_0.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c2071c16f76b5e279fd4f2b68680e0c2ca7dbdbee53154ea4db140c254a29e49", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39093845-3532-4e6b-8abb-16430d9377fc", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.programiz.com_7_1.txt", "file_name": "www.programiz.com_7_1.txt", "file_type": "text/plain", "file_size": 4362, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "841ab87432cb2aeb582bbe129c38a11747a50e6ef80682552bc9cfb920bfaac2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b16f772c-a5de-4e96-8a37-870bd4fa0f35", "node_type": "1", "metadata": {}, "hash": "ded52253054a89f34effd48484862dc946455846481777c8141e4efc4f757020", "class_name": "RelatedNodeInfo"}}, "text": "Applications for Python | Python.org Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Python >>> About >>> Applications Python is used in many application domains. Here's a sampling. The Python Package Index lists thousands of third party modules for Python. Web and Internet Development Python offers many choices for web development : Frameworks such as Django and Pyramid . Micro-frameworks such as Flask and Bottle . Advanced content management systems such as Plone and django CMS . Python's standard library supports many Internet protocols: HTML and XML JSON E-mail processing . Support for FTP , IMAP , and other Internet protocols . Easy-to-use socket interface . And the Package Index has yet more libraries: Requests , a powerful HTTP client library. Beautiful Soup , an HTML parser that can handle all sorts of oddball HTML. Feedparser for parsing RSS/Atom feeds. Paramiko , implementing the SSH2 protocol. Twisted Python , a framework for asynchronous network programming. Scientific and Numeric Python is widely used in scientific and numeric computing: SciPy is a collection of packages for mathematics, science, and engineering. Pandas is a data analysis and modeling library. IPython is a powerful interactive shell that features easy editing and recording of a work session, and supports visualizations and parallel computing. The Software Carpentry Course teaches basic skills for scientific computing, running bootcamps and providing open-access teaching materials. Education Python is a superb language for teaching programming, both at the introductory level and in more advanced courses. Books such as How to Think Like a Computer Scientist , Python Programming: An Introduction to Computer Science , and Practical Programming . The Education Special Interest Group is a good place to discuss teaching issues. Desktop GUIs The Tk GUI library is included with most binary distributions of Python. Some toolkits that are usable on several platforms are available separately: wxWidgets Kivy , for writing multitouch applications. Qt via pyqt or pyside Platform-specific toolkits are also available: GTK+ Microsoft Foundation Classes through the win32 extensions Software Development Python is often used as a support language for software developers, for build control and management, testing, and in many other ways. SCons for build control. Buildbot and Apache Gump for automated continuous compilation and testing. Roundup or Trac for bug tracking and project management. Business Applications Python is also used to build ERP and e-commerce systems: Odoo is an all-in-one management software that offers a range of business applications that form a complete suite of enterprise management applications. Tryton is a three-tier high-level general purpose application platform.", "start_char_idx": 0, "end_char_idx": 2911, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b16f772c-a5de-4e96-8a37-870bd4fa0f35": {"__data__": {"id_": "b16f772c-a5de-4e96-8a37-870bd4fa0f35", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50b81b01-35f1-4b75-9553-829546949f84", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "aacfc8eb3fe844267d7b5c9e77b50c84ab684f86fe8ed3b8a7e824ac5e2242fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee3a8984-5051-4b27-8252-7dc792c7f3cf", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_29_0.txt", "file_name": "www.python.org_29_0.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "c2071c16f76b5e279fd4f2b68680e0c2ca7dbdbee53154ea4db140c254a29e49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc114974-a6d0-4989-b173-c0cdd49872e0", "node_type": "1", "metadata": {}, "hash": "c3f6cfddd5c5020197cd3e7e55acc7fdbe6b4a55f1d151c14daa9578f27aa198", "class_name": "RelatedNodeInfo"}}, "text": "PEP 0 \u2013 Index of Python Enhancement Proposals (PEPs) | peps.python.org Following system colour scheme Selected dark colour scheme Selected light colour scheme PEP 0 \u2013 Index of Python Enhancement Proposals (PEPs) Author : The PEP Editors Status : Active Type : Informational Created : 13-Jul-2000 Table of Contents Introduction Topics API Numerical Index Index by Category Process and Meta-PEPs Other Informational PEPs Provisional PEPs (provisionally accepted; interface may still change) Accepted PEPs (accepted; may not be implemented yet) Open PEPs (under consideration) Finished PEPs (done, with a stable interface) Historical Meta-PEPs and Informational PEPs Deferred PEPs (postponed pending further research or updates) Rejected, Superseded, and Withdrawn PEPs Reserved PEP Numbers PEP Types Key PEP Status Key Authors/Owners Introduction This PEP contains the index of all Python Enhancement Proposals, known as PEPs. PEP numbers are assigned by the PEP editors, and once assigned are never changed. The version control history of the PEP texts represent their historical record. Topics PEPs for specialist subjects are indexed by topic . Governance PEPs Packaging PEPs Release PEPs Typing PEPs API The PEPS API is a JSON file of metadata about all the published PEPs. Read more here . Numerical Index The numerical index contains a table of all PEPs, ordered by number. Index by Category Process and Meta-PEPs PEP Title Authors PA 1 PEP Purpose and Guidelines Barry Warsaw, Jeremy Hylton, David Goodger, Alyssa Coghlan PA 2 Procedure for Adding New Modules Brett Cannon, Martijn Faassen PA 4 Deprecation of Standard Modules Brett Cannon, Martin von L\u00f6wis PA 7 Style Guide for C Code Guido van Rossum, Barry Warsaw PA 8 Style Guide for Python Code Guido van Rossum, Barry Warsaw, Alyssa Coghlan PA 10 Voting Guidelines Barry Warsaw PA 11 CPython platform support Martin von L\u00f6wis, Brett Cannon PA 12 Sample reStructuredText PEP Template David Goodger, Barry Warsaw, Brett Cannon PA 13 Python Language Governance The Python core team and community PA 387 Backwards Compatibility Policy Benjamin Peterson PA 545 Python Documentation Translations Julien Palard, Inada Naoki, Victor Stinner PA 602 Annual Release Cycle for Python \u0141ukasz Langa 3.9 PA 609 Python Packaging Authority (PyPA) Governance Dustin Ingram, Pradyun Gedam, Sumana Harihareswara PA 676 PEP Infrastructure Process Adam Turner PA 729 Typing governance process Jelle Zijlstra, Shantanu Jain PA 731 C API Working Group Charter Guido van Rossum, Petr Viktorin, Victor Stinner, Steve Dower, Irit Katriel PA 732 The Python Documentation Editorial Board Joanna Jablonski PA 761 Deprecating PGP signatures for CPython artifacts Seth Michael Larson 3.14 Other Informational PEPs PEP Title Authors IA 20 The Zen of Python Tim Peters IA 101 Doing Python Releases 101 Barry Warsaw, Guido van Rossum IF 247 API for Cryptographic Hash Functions A.M. Kuchling IF 248 Python Database API Specification v1.0 Greg Stein, Marc-Andr\u00e9 Lemburg IF 249 Python Database API Specification v2.0 Marc-Andr\u00e9 Lemburg IA 257 Docstring Conventions David Goodger, Guido van Rossum IF 272 API for Block Encryption Algorithms v1.0 A.M. Kuchling IA 287 reStructuredText Docstring Format David Goodger IA 290 Code Migration and Modernization Raymond Hettinger IF 333 Python Web Server Gateway Interface v1.0 Phillip J. Eby IA 394 The \u201cpython\u201d Command on Unix-Like Systems Kerrick Staley, Alyssa Coghlan, Barry Warsaw, Petr Viktorin, Miro Hron\u010dok, Carol Willing IF 399 Pure Python/C Accelerator Module Compatibility Requirements Brett Cannon 3.3 IF 430 Migrating to Python 3 as the default online documentation Alyssa Coghlan IA 434 IDLE Enhancement Exception for All Branches Todd Rovito, Terry Reedy IF 452 API for Cryptographic Hash Functions v2.0 A.M.", "start_char_idx": 0, "end_char_idx": 3790, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc114974-a6d0-4989-b173-c0cdd49872e0": {"__data__": {"id_": "bc114974-a6d0-4989-b173-c0cdd49872e0", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50b81b01-35f1-4b75-9553-829546949f84", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "aacfc8eb3fe844267d7b5c9e77b50c84ab684f86fe8ed3b8a7e824ac5e2242fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b16f772c-a5de-4e96-8a37-870bd4fa0f35", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d7bbf64e6b0cf258b3532b4d31033e2c3b922f2e0d3fe3925897a77f6e04239f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3c66723-c58c-44d8-9ac1-2b7d5fd9b6ca", "node_type": "1", "metadata": {}, "hash": "f909c901265bb81b7cdceb4245f8e6570128a8146fcc8299dd1b2441bb7b5e42", "class_name": "RelatedNodeInfo"}}, "text": "Kuchling IA 287 reStructuredText Docstring Format David Goodger IA 290 Code Migration and Modernization Raymond Hettinger IF 333 Python Web Server Gateway Interface v1.0 Phillip J. Eby IA 394 The \u201cpython\u201d Command on Unix-Like Systems Kerrick Staley, Alyssa Coghlan, Barry Warsaw, Petr Viktorin, Miro Hron\u010dok, Carol Willing IF 399 Pure Python/C Accelerator Module Compatibility Requirements Brett Cannon 3.3 IF 430 Migrating to Python 3 as the default online documentation Alyssa Coghlan IA 434 IDLE Enhancement Exception for All Branches Todd Rovito, Terry Reedy IF 452 API for Cryptographic Hash Functions v2.0 A.M. Kuchling, Christian Heimes IF 457 Notation For Positional-Only Parameters Larry Hastings IF 482 Literature Overview for Type Hints \u0141ukasz Langa IF 483 The Theory of Type Hints Guido van Rossum, Ivan Levkivskyi IA 514 Python registration in the Windows registry Steve Dower IF 579 Refactoring C functions and methods Jeroen Demeyer IF 588 GitHub Issues Migration Plan Mariatta IA 596 Python 3.9 Release Schedule \u0141ukasz Langa 3.9 IF 607 Reducing CPython\u2019s Feature Delivery Latency \u0141ukasz Langa, Steve Dower, Alyssa Coghlan 3.9 IA 619 Python 3.10 Release Schedule Pablo Galindo Salgado 3.10 IF 630 Isolating Extension Modules Petr Viktorin IF 635 Structural Pattern Matching: Motivation and Rationale Tobias Kohn, Guido van Rossum 3.10 IF 636 Structural Pattern Matching: Tutorial Daniel F Moisset 3.10 IF 659 Specializing Adaptive Interpreter Mark Shannon IA 664 Python 3.11 Release Schedule Pablo Galindo Salgado 3.11 IA 672 Unicode-related Security Considerations for Python Petr Viktorin IA 693 Python 3.12 Release Schedule Thomas Wouters 3.12 IA 719 Python 3.13 Release Schedule Thomas Wouters 3.13 IF 733 An Evaluation of Python\u2019s Public C API Erlend Egeberg Aasland, Domenico Andreoli, Stefan Behnel, Carl Friedrich Bolz-Tereick, Simon Cross, Steve Dower, Tim Felgentreff, David Hewitt, Shantanu Jain, Wenzel Jakob, Irit Katriel, Marc-Andre Lemburg, Donghee Na, Karl Nelson, Ronald Oussoren, Antoine Pitrou, Neil Schemenauer, Mark Shannon, Stepan Sindelar, Gregory P. Smith, Eric Snow, Victor", "start_char_idx": 3174, "end_char_idx": 5287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3c66723-c58c-44d8-9ac1-2b7d5fd9b6ca": {"__data__": {"id_": "c3c66723-c58c-44d8-9ac1-2b7d5fd9b6ca", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a647e91-0523-4d16-9dbe-609a8c6834ef", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "372dbede566d413511349eb9b46659cf8fcfcd3603348d2ca385ee4e81aef1a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc114974-a6d0-4989-b173-c0cdd49872e0", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "12f97b11411c4153e397b57737b81b4acf90e5ce94ec0fea3adee2f583baefd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb5b17c1-1ab1-46e8-8613-e1be486471ea", "node_type": "1", "metadata": {}, "hash": "326177d256db6e7dfe0bc2125de153151d50701570ef760a515deb9c355cf5b1", "class_name": "RelatedNodeInfo"}}, "text": "Stinner, Guido van Rossum, Petr Viktorin, Carol Willing, William Woodruff, David Woods, Jelle Zijlstra IA 745 Python 3.14 Release Schedule Hugo van Kemenade 3.14 IF 762 REPL-acing the default REPL Pablo Galindo Salgado, \u0141ukasz Langa, Lysandros Nikolaou, Emily Morehouse-Valcarcel 3.13 IA 790 Python 3.15 Release Schedule Hugo van Kemenade 3.15 IA 801 Reserved Barry Warsaw IF 3333 Python Web Server Gateway Interface v1.0.1 Phillip J. Eby IF 8000 Python Language Governance Proposal Overview Barry Warsaw IF 8002 Open Source Governance Survey Barry Warsaw, \u0141ukasz Langa, Antoine Pitrou, Doug Hellmann, Carol Willing IA 8016 The Steering Council Model Nathaniel J. Smith, Donald Stufft IF 8100 January 2019 Steering Council election Nathaniel J. Smith, Ee Durbin IF 8101 2020 Term Steering Council election Ewa Jodlowska, Ee Durbin IF 8102 2021 Term Steering Council election Ewa Jodlowska, Ee Durbin, Joe Carey IF 8103 2022 Term Steering Council election Ewa Jodlowska, Ee Durbin, Joe Carey IF 8104 2023 Term Steering Council election Ee Durbin IF 8105 2024 Term Steering Council election Ee Durbin IF 8106 2025 Term Steering Council election Ee Durbin Provisional PEPs (provisionally accepted; interface may still change) PEP Title Authors SP 708 Extending the Repository API to Mitigate Dependency Confusion Attacks Donald Stufft Accepted PEPs (accepted; may not be implemented yet) PEP Title Authors SA 458 Secure PyPI downloads with signed repository metadata Trishank Karthik Kuppusamy, Vladimir Diaz, Marina Moore, Lukas Puehringer, Joshua Lock, Lois Anne DeLong, Justin Cappos SA 590 Vectorcall: a fast calling protocol for CPython Mark Shannon, Jeroen Demeyer 3.8 SA 649 Deferred Evaluation Of Annotations Using Descriptors Larry Hastings 3.14 SA 658 Serve Distribution Metadata in the Simple Repository API Tzu-ping Chung SA 668 Marking Python base environments as \u201cexternally managed\u201d Geoffrey Thomas, Matthias Klose, Filipe La\u00edns, Donald Stufft, Tzu-ping Chung, Stefano Rivera, Elana Hashman, Pradyun Gedam SA 685 Comparison of extra names for optional distribution dependencies Brett Cannon SA 686 Make UTF-8 mode default Inada Naoki 3.15 SA 687 Isolating modules in the standard library Erlend Egeberg Aasland, Petr Viktorin 3.12 SA 691 JSON-based Simple API for Python Package Indexes Donald Stufft, Pradyun Gedam, Cooper Lees, Dustin Ingram SA 699 Remove private dict version field added in PEP 509 Ken Jin 3.12 SA 701 Syntactic formalization of f-strings Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Marta G\u00f3mez Mac\u00edas 3.12 SA 703 Making the Global Interpreter Lock Optional in CPython Sam Gross 3.13 SA 714 Rename dist-info-metadata in the Simple API Donald Stufft SA 739 build-details.json 1.0 \u2014 a static description file for Python build details Filipe La\u00edns 3.14 SA 749 Implementing PEP 649 Jelle Zijlstra 3.14 SA 750 Template Strings Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, Lysandros Nikolaou, Dave Peck 3.14 SA 751 A file format to record Python dependencies for installation reproducibility Brett Cannon SA 753 Uniform project URLs in core metadata William Woodruff, Facundo Tuesca SA 758 Allow except and except* expressions without parentheses Pablo Galindo, Brett Cannon 3.14 SA 768 Safe external debugger interface for CPython Pablo Galindo Salgado, Matt Wozniski, Ivona Stojanovic 3.14 SA 770 Improving measurability of Python packages with Software Bill-of-Materials Seth Larson SA 773 A Python Installation Manager for Windows Steve Dower Open PEPs (under consideration) PEP Title Authors S 467 Minor API improvements for binary sequences Alyssa Coghlan, Ethan Furman 3.15 S 480 Surviving a Compromise of PyPI: End-to-end signing of packages Trishank Karthik Kuppusamy, Vladimir Diaz, Justin Cappos,", "start_char_idx": 0, "end_char_idx": 3752, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb5b17c1-1ab1-46e8-8613-e1be486471ea": {"__data__": {"id_": "eb5b17c1-1ab1-46e8-8613-e1be486471ea", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a647e91-0523-4d16-9dbe-609a8c6834ef", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "372dbede566d413511349eb9b46659cf8fcfcd3603348d2ca385ee4e81aef1a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3c66723-c58c-44d8-9ac1-2b7d5fd9b6ca", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "82d1dca0ca9c40d589ecb3651f70707d3fb0a15a2c830d5958880f502ea86193", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06f323ff-0508-4aef-bbcb-8b5994f66075", "node_type": "1", "metadata": {}, "hash": "af5823ac5093a7cca5a6b7d0dcf708cfade6973f8a20a43dd05859b993625620", "class_name": "RelatedNodeInfo"}}, "text": "Dave Peck 3.14 SA 751 A file format to record Python dependencies for installation reproducibility Brett Cannon SA 753 Uniform project URLs in core metadata William Woodruff, Facundo Tuesca SA 758 Allow except and except* expressions without parentheses Pablo Galindo, Brett Cannon 3.14 SA 768 Safe external debugger interface for CPython Pablo Galindo Salgado, Matt Wozniski, Ivona Stojanovic 3.14 SA 770 Improving measurability of Python packages with Software Bill-of-Materials Seth Larson SA 773 A Python Installation Manager for Windows Steve Dower Open PEPs (under consideration) PEP Title Authors S 467 Minor API improvements for binary sequences Alyssa Coghlan, Ethan Furman 3.15 S 480 Surviving a Compromise of PyPI: End-to-end signing of packages Trishank Karthik Kuppusamy, Vladimir Diaz, Justin Cappos, Marina Moore S 603 Adding a frozenmap type to collections Yury Selivanov S 638 Syntactic Macros Mark Shannon S 653 Precise Semantics for Pattern Matching Mark Shannon S 671 Syntax for late-bound function argument defaults Chris Angelico 3.12 S 679 Allow parentheses in assert statements Pablo Galindo Salgado 3.12 S 694 Upload 2.0 API for Python Package Indexes Barry Warsaw, Donald Stufft S 710 Recording the provenance of installed packages Fridol\u00edn Pokorn\u00fd S 711 PyBI: a standard format for distributing Python Binaries Nathaniel J. Smith S 718 Subscriptable functions James Hilton-Balfe 3.15 I 720 Cross-compiling Python packages Filipe La\u00edns 3.12 S 725 Specifying external dependencies in pyproject.toml Pradyun Gedam, Ralf Gommers S 728 TypedDict with Typed Extra Items Zixuan James Li 3.15 S 743 Add Py_COMPAT_API_VERSION to the Python C API Victor Stinner, Petr Viktorin 3.14 I 744 JIT Compilation Brandt Bucher, Savannah Ostrowski 3.13 S 746 Type checking Annotated metadata Adrian Garcia Badaracco 3.15 S 747 Annotating Type Forms David Foster, Eric Traut 3.15 S 748 A Unified TLS API for Python Joop van de Pol, William Woodruff 3.14 S 752 Implicit namespaces for package repositories Ofek Lev, Jarek Potiuk P 755 Implicit namespace policy for PyPI Ofek Lev S 763 Limiting deletions on PyPI William Woodruff, Alexis Challande S 764 Inline typed dictionaries Victorien Plot 3.15 I 766 Explicit Priority Choices Among Multiple Indexes Michael Sarahan S 767 Annotating Read-Only Attributes Eneg 3.15 S 769", "start_char_idx": 2938, "end_char_idx": 5266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06f323ff-0508-4aef-bbcb-8b5994f66075": {"__data__": {"id_": "06f323ff-0508-4aef-bbcb-8b5994f66075", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "433d7c5c-d598-4743-b6f2-5eefac12a0c6", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cf75bc89e70583b679e0e2965461223f07266109b61c17e7b62ece7c28464bd3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb5b17c1-1ab1-46e8-8613-e1be486471ea", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1d0ba8dc3c210bd0114dd8d2ae8ba51a3638f0758448594e29895b596c0ac7f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc11a169-d959-446c-9776-cc851b73bbde", "node_type": "1", "metadata": {}, "hash": "44940664bc4188060947c70ac67516e741eafd8d2c2b0b5507edfc86032e427b", "class_name": "RelatedNodeInfo"}}, "text": "Amethyst Reese amethyst at n7.gg Ammar Askar ammar at ammaraskar.com Andre Roberge andre.roberge at gmail.com Andrew McClelland eternalsquire at comcast.net Andrew McNamara andrewm at object-craft.com.au Anthony Baxter anthony at interlink.com.au Antoine Pitrou solipsis at pitrou.net Armin Ronacher armin.ronacher at active-4.com Arun Babu Neelicattu arun.neelicattu at gmail.com Atsuo Ishimoto ishimoto at gembook.org Barry Warsaw barry at python.org Batuhan Taskaya batuhan at python.org Ben Finney ben+python at benfinney.id.au Ben Hoyt benhoyt at gmail.com Ben North ben at redfrontdoor.org Benjamin Peterson benjamin at python.org Benoit Bryon benoit at marmelune.net Berker Peksag berker.peksag at gmail.com Bern\u00e1t G\u00e1bor gaborjbernat at gmail.com Bj\u00f6rn Lindqvist bjourne at gmail.com Brandt Bucher brandt at python.org Brett Cannon brett at python.org Brian Quinlan brian at sweetapp.com C.A.M. Gerlach cam.gerlach at gerlach.cam Calvin Spealman ironfroggy at gmail.com Cameron Simpson cs at cskk.id.au Carl Banks pythondev at aerojockey.com Carl Friedrich Bolz-Tereick cfbolz at gmx.de Carl Meyer carl at oddbird.net Carol Willing willingc at gmail.com Charles R. McCreary Charles-Fran\u00e7ois Natali cf.natali at gmail.com Chris Angelico rosuav at gmail.com Chris Jerdonek chris.jerdonek at gmail.com Chris McDonough chrism at plope.com Christian Heimes christian at python.org Christian R. Reis kiko at async.com.br Christopher A. Craig python-pep at ccraig.org Christopher Barker pythonchb at gmail.com Clark C. Evans cce at clarkevans.com Cliff Wells logiplexsoftware at earthlink.net Collin Winter collinwinter at google.com Cooper Lees me at cooperlees.com Cory Benfield cory at lukasa.co.uk Damien George Daniel F Moisset dfmoisset at gmail.com Daniel Holth dholth at gmail.com Daniel Stutzbach daniel at stutzbachenterprises.com Daniel Urban urban.dani+py at gmail.com Dave Cole djc at object-craft.com.au Dave Peck davepeck at davepeck.org David Ascher davida at activestate.com David Eppstein eppstein at ics.uci.edu David Foster david at dafoster.net David Goodger goodger at python.org David Hewitt 1939362+davidhewitt at users.noreply.github.com David Woods dw-git at d-woods.co.uk Deb Nicholson deb at python.org Dennis Sweeney sweeney.dennis650 at gmail.com Dino Viehland dinov at microsoft.com Dirkjan Ochtman dirkjan at ochtman.nl Domenico Andreoli domenico.andreoli at linux.com Donald Stufft donald at stufft.io Donghee Na donghee.na at python.org Doug Hellmann doug at doughellmann.com Dustin Ingram di at python.org Ed Schofield ed at pythoncharmers.com Eddie Elizondo eduardo.elizondorueda at gmail.com Ee Durbin ee at python.org Elana Hashman ehashman at debian.org Eli Bendersky eliben at gmail.com Elvis Pranskevichus elvis at edgedb.com Emily Morehouse-Valcarcel emily at python.org Emma Harper Smith emma at python.org Eneg eneg at discuss.python.org Eric N. Vander Weele ericvw at gmail.com Eric Pruitt Eric Snow ericsnowcurrently at gmail.com Eric Traut erictr at microsoft.com Eric V. Smith eric at trueblade.com Erik De Bonte erikd at microsoft.com Erik M. Bray Erlend Egeberg Aasland erlend at python.org Ethan Furman ethan at stoneleaf.us Ewa Jodlowska ewa at python.org Ezio Melotti ezio.melotti at gmail.com Facundo Batista facundo at taniquetil.com.ar Facundo Tuesca facundo.tuesca at trailofbits.com Filipe La\u00edns lains at python.org Franek Magiera framagie at gmail.com Fred L. Drake, Jr.", "start_char_idx": 0, "end_char_idx": 3429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc11a169-d959-446c-9776-cc851b73bbde": {"__data__": {"id_": "fc11a169-d959-446c-9776-cc851b73bbde", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "433d7c5c-d598-4743-b6f2-5eefac12a0c6", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cf75bc89e70583b679e0e2965461223f07266109b61c17e7b62ece7c28464bd3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06f323ff-0508-4aef-bbcb-8b5994f66075", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1cb2bc1d7ae5cb691ca61576631db7fbc47480ee6848da2407c81ca38856d6ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07f09aa6-0448-4200-b4da-a5a061ffbc64", "node_type": "1", "metadata": {}, "hash": "6781083529842c7f0c98b510d78159f29192c1b84a62a9cc40876d29a45ae379", "class_name": "RelatedNodeInfo"}}, "text": "fred at fdrake.net Fr\u00e9d\u00e9ric B. Giacometti fred at arakne.com Fridol\u00edn Pokorn\u00fd fridolin.pokorny at gmail.com Geoffrey Thomas geofft at ldpreload.com Georg Brandl georg at python.org Gerald Britton gerald.britton at gmail.com Germ\u00e1n M\u00e9ndez Bravo german.mb at gmail.com Gordon McMillan gmcm at hypernet.com Graham Bleaney gbleaney at gmail.com Grant Griffin g2 at iowegian.com Greg Slodkowicz jergosh at gmail.com Greg Stein gstein at lyra.org Greg Wilson gvwilson at ddj.com Gregory Ewing greg.ewing at canterbury.ac.nz Gregory Lielens gregory.lielens at fft.be Gregory P. Smith greg at krypto.org Gregory R. Warnes gregory_r_warnes at groton.pfizer.com Guido van Rossum guido at python.org Holger Krekel holger at merlinux.eu Hood Chatham roberthoodchatham at gmail.com Huaiyu Zhu hzhu at users.sourceforge.net Hugo van Kemenade Inada Naoki songofacandy at gmail.com Irit Katriel irit at python.org Ivan Levkivskyi levkivskyi at gmail.com Ivona Stojanovic stojanovic.i at hotmail.com Jack Diederich jackdied at gmail.com Jack Jansen jack at cwi.nl James C. Ahlstrom jim at interet.com James Hilton-Balfe gobot1234yt at gmail.com James Polley jp at jamezpolley.com Jarek Potiuk potiuk at apache.org Jason Orendorff jason.orendorff at gmail.com Jason Petrone jp at demonseed.net Jeff Epler jepler at unpythonic.net Jeffrey Yasskin jyasskin at google.com Jelle Zijlstra jelle.zijlstra at gmail.com Jeremy Hylton jeremy at alum.mit.edu Jeroen Demeyer j.demeyer at ugent.be Jervis Whitley jervisau at gmail.com Jesse Noller jnoller at gmail.com Jim Althoff james_althoff at i2.com Jim Baker jim.baker at python.org Jim J. Jewett jimjjewett at gmail.com Jiwon Seo seojiwon at gmail.com Joanna Jablonski Joe Carey joe at python.org John Belmonte john at neggie.net Jonathan Dekhtiar jonathan at dekhtiar.com Jonathan Riehl jriehl at spaceship.com Joop van de Pol joop.vandepol at trailofbits.com Joseph Jevnik joejev at gmail.com Joseph Martinot-Lagarde Joshua Bambrick jbambrick at google.com Joshua Cannon joshdcannon at gmail.com Joshua Landau joshua at landau.ws Joshua Lock jlock at vmware.com Joshua Xu jxu425 at fb.com Josiah Carlson jcarlson at uci.edu Jukka Lehtosalo jukka.lehtosalo at iki.fi Julien Palard julien at palard.fr Just van Rossum just at letterror.com Justin Cappos jcappos at nyu.edu Ka-Ping Yee ping at zesty.ca Karl Nelson nelson85 at llnl.gov Karolina Surma karolina.surma at gazeta.pl Ken Jin kenjin at python.org Kerrick Staley mail at kerrickstaley.com Kevin Altis altis at semi-retired.com", "start_char_idx": 3430, "end_char_idx": 5942, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07f09aa6-0448-4200-b4da-a5a061ffbc64": {"__data__": {"id_": "07f09aa6-0448-4200-b4da-a5a061ffbc64", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9c9f59875ae67796b3fa5f3acb87e6433de373f84104bdafd82474bf903e6229", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc11a169-d959-446c-9776-cc851b73bbde", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "e04ee141ecc2d99853e1274c4c7a5c2f1f5f5101dfaf48a728de804a773b5eb2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b080ad7f-db3c-4b68-813d-209875415606", "node_type": "1", "metadata": {}, "hash": "a91d6770d156b1d73ae16ec216f21370a410b63620d4a0a54f3bb8bfed57da6c", "class_name": "RelatedNodeInfo"}}, "text": "Kevin D. Smith kevin.smith at themorgue.org Klaus Zimmermann klaus_zimmermann at gmx.de Konstantin Kashin kkashin at fb.com Koos Zevenhoven k7hoven at gmail.com Koudai Aono koxudaxi at gmail.com Kushal Das mail at kushaldas.in Larry Hastings larry at hastings.org Laura Creighton lac at strakt.com Laurens Van Houtven _ at lvh.cc Laurie Opperman laurie_opperman at hotmail.com Lennart Regebro regebro at gmail.com Lie Ryan lie.1296 at gmail.com Lino Mastrodomenico l.mastrodomenico at gmail.com Lisa Roach lisaroach14 at gmail.com Lois Anne DeLong lad278 at nyu.edu Lukas Puehringer lukas.puehringer at nyu.edu Lysandros Nikolaou lisandrosnik at gmail.com Maggie Moss maggiebmoss at gmail.com Magnus Lie Hetland magnus at hetland.org Malcolm Smith smith at chaquo.com Marc-Andre Lemburg mal at lemburg.com Marc-Andr\u00e9 Lemburg mal at lemburg.com Marcel Plch gmarcel.plch at gmail.com Mariatta mariatta at python.org Marina Moore mm9693 at nyu.edu Mario Corchero mariocj89 at gmail.com Mark E. Haase mehaase at gmail.com Mark Hammond mhammond at skippinet.com.au Mark Mendoza mendoza.mark.a at gmail.com Mark Shannon mark at hotpy.org Mark Williams mrw at enotuniq.org Markus Meskanen markusmeskanen at gmail.com Marta G\u00f3mez Mac\u00edas cyberwitch at google.com Martijn Faassen faassen at infrae.com Martin Teichmann lkb.teichmann at gmail.com Martin von L\u00f6wis martin at v.loewis.de Masayuki Yamamoto Matt Chisholm matt-python at theory.org Matt Page mpage at python.org Matt Wozniski godlygeek at gmail.com Matthew Rahtz mrahtz at google.com Matthias Klose doko at ubuntu.com Micah Elliott mde at tracos.org Michael Foord michael at python.org Michael Hudson mwh at python.net Michael J. Sullivan sully at msully.net Michael Lee michael.lee.0x2a at gmail.com Michael P. Dubner dubnerm at mindless.com Michael Sarahan msarahan at gmail.com Michel Pelletier michel at users.sourceforge.net Mike G. Miller Mike Meyer mwm at mired.org Mike Verdone mike.verdone at gmail.com Miro Hron\u010dok miro at hroncok.cz Moshe Zadka moshez at zadka.site.co.il Nathaniel J. Smith njs at pobox.com Neal Norwitz nnorwitz at gmail.com Ned Deily nad at python.org Neil Hodgson neilh at scintilla.org Neil Schemenauer nas at arctrix.com Nick Humrich nick at humrich.us Ofek Lev ofekmeister at gmail.com Oleg Broytman phd at phdru.name Oren Tirosh oren at hishome.net Pablo Galindo pablogsal at python.org Pablo Galindo Salgado pablogsal at python.org Patrick Maupin pmaupin at gmail.com Paul Barrett barrett at stsci.edu Paul Colomiets paul at colomiets.name Paul Everitt pauleveritt at me.com Paul F. Dubois paul at pfdubois.com Paul Ganssle paul at ganssle.io Paul Moore p.f.moore at gmail.com Paul Prescod paul at prescod.net Peter Astrand astrand at lysator.liu.se Peter Bierma zintensitydev at gmail.com Peter Harris scav at blueyonder.co.uk Peter Moody pmoody at google.com Peter Schneider-Kamp nowonder at nowonder.de Petr Viktorin encukou at gmail.com Philip House phouse512 at gmail.com Philipp Angerer phil.angerer at gmail.com Philippe Ombredanne pombredanne at nexb.com Philippe PRADOS python at prados.fr Phillip J. Eby pje at telecommunity.com Pradeep Kumar Srinivasan gohanpra at gmail.com Pradyun Gedam pradyunsg at gmail.", "start_char_idx": 0, "end_char_idx": 3206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b080ad7f-db3c-4b68-813d-209875415606": {"__data__": {"id_": "b080ad7f-db3c-4b68-813d-209875415606", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9c9f59875ae67796b3fa5f3acb87e6433de373f84104bdafd82474bf903e6229", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07f09aa6-0448-4200-b4da-a5a061ffbc64", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "966974c25e4228fac63dc5e27d065928165824df47d6d32a7de35f9133c2060c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a5a05fe-0ba9-4bce-9f0e-2cf477e8ecb6", "node_type": "1", "metadata": {}, "hash": "fbae33b5be9e99c86fe1759a191c871375193aa898b42fa35a64ad8e08fcacf7", "class_name": "RelatedNodeInfo"}}, "text": "com Paul F. Dubois paul at pfdubois.com Paul Ganssle paul at ganssle.io Paul Moore p.f.moore at gmail.com Paul Prescod paul at prescod.net Peter Astrand astrand at lysator.liu.se Peter Bierma zintensitydev at gmail.com Peter Harris scav at blueyonder.co.uk Peter Moody pmoody at google.com Peter Schneider-Kamp nowonder at nowonder.de Petr Viktorin encukou at gmail.com Philip House phouse512 at gmail.com Philipp Angerer phil.angerer at gmail.com Philippe Ombredanne pombredanne at nexb.com Philippe PRADOS python at prados.fr Phillip J. Eby pje at telecommunity.com Pradeep Kumar Srinivasan gohanpra at gmail.com Pradyun Gedam pradyunsg at gmail.com R David Murray Ralf Gommers ralf.gommers at gmail.com Raymond Hettinger python at rcn.com Reid Kleckner rnk at mit.edu Rich Chiodo rchiodo at microsoft.com Richard Jones richard at python.org Richard Oudkerk r.m.oudkerk at googlemail.com Robert Collins rbtcollins at hp.com Robert Kuska rkuska at redhat.com Robert T. McGibbon rmcgibbo at gmail.com Roman Suzi rnd at onego.ru Ronald Oussoren ronaldoussoren at mac.com Russell Keith-Magee russell at keith-magee.com Ryan Gonzalez rymg19 at gmail.com Sam Gross colesbury at gmail.com Samuele Pedroni pedronis at python.org Savannah Ostrowski savannah at python.org Scott Gilbert xscottg at yahoo.com Sean Reifschneider jafo-pep at tummy.com Sebastian Kreft skreft at deezer.com Sebasti\u00e1n Ram\u00edrez tiangolo at gmail.com Sergey B Kirpichev skirpichev at gmail.com Serhiy Storchaka Seth Larson seth at python.org Seth Michael Larson seth at python.org S\u00e9bastien Eustace sebastien at eustace.io Shannon Zhu szhu at fb.com Shantanu Jain hauntsaninja at gmail.com Simon Cross hodgestar at gmail.com Skip Montanaro skip at pobox.com Stan Ulbrych stanulbrych at gmail.com Stefan Behnel stefan_ml at behnel.de Stefan Krah skrah at bytereef.org Stefano Borini Stefano Rivera stefanor at debian.org Stepan Koltsov yozh at mx1.ru Stepan Sindelar stepan.sindelar at oracle.com Stephen J. Turnbull stephen at xemacs.org Stephen Rosen sirosen0 at gmail.com Steve Dower steve.dower at python.org Steven Bethard steven.bethard at gmail.com Steven D\u2019Aprano steve at pearwood.info Steven Taschuk staschuk at telusplanet.net Steven Troxler steven.troxler at gmail.com St\u00e9phane Bidoul stephane.bidoul at gmail.com Sumana Harihareswara sh at changeset.nyc Tal Einat tal at python.org Talin viridia at gmail.com Taneli Hukkinen Tarek Ziad\u00e9 tarek at ziade.org Terence Way terry at wayforward.net Terry Reedy tjreedy at udel.edu The Python core team and community Thomas Bellman bellman+pep-divmod at lysator.liu.se Thomas Heller theller at python.net Thomas Kluyver thomas at kluyver.me.uk Thomas Robitaille thomas.robitaille at gmail.com Thomas Wouters thomas at python.org Tian Gao gaogaotiantian at hotmail.com Till Varoquaux till at fb.com Tim Delaney timothy.c.delaney at gmail.com Tim Felgentreff tim.felgentreff at oracle.com Tim Peters tim.peters at gmail.com Tobias Kohn kohnt at tobiaskohn.ch Todd Rovito rovitotv at gmail.com Tom\u00e1\u0161 Orsava tomas.n at orsava.cz Tony Lownds tony at lownds.com Travis Oliphant oliphant at ee.byu.edu Trent Mick trentm at activestate.com Trishank Karthik Kuppusamy karthik at trishank.", "start_char_idx": 2558, "end_char_idx": 5758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a5a05fe-0ba9-4bce-9f0e-2cf477e8ecb6": {"__data__": {"id_": "2a5a05fe-0ba9-4bce-9f0e-2cf477e8ecb6", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "9c9f59875ae67796b3fa5f3acb87e6433de373f84104bdafd82474bf903e6229", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b080ad7f-db3c-4b68-813d-209875415606", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "45a7f08670cf541d844b56132a543e4f2ac6e68a5e6e5f7f62aa187e09686ffb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26820dcf-0ea8-4ae3-a4ee-1ef72b4814a4", "node_type": "1", "metadata": {}, "hash": "ee1f3ab7322836df678b246388d7802475f84f5f3ae9e15dbe71ba8909ff8123", "class_name": "RelatedNodeInfo"}}, "text": "se Thomas Heller theller at python.net Thomas Kluyver thomas at kluyver.me.uk Thomas Robitaille thomas.robitaille at gmail.com Thomas Wouters thomas at python.org Tian Gao gaogaotiantian at hotmail.com Till Varoquaux till at fb.com Tim Delaney timothy.c.delaney at gmail.com Tim Felgentreff tim.felgentreff at oracle.com Tim Peters tim.peters at gmail.com Tobias Kohn kohnt at tobiaskohn.ch Todd Rovito rovitotv at gmail.com Tom\u00e1\u0161 Orsava tomas.n at orsava.cz Tony Lownds tony at lownds.com Travis Oliphant oliphant at ee.byu.edu Trent Mick trentm at activestate.com Trishank Karthik Kuppusamy karthik at trishank.com Tzu-ping Chung uranusjr at gmail.com Victor Stinner vstinner at python.org Victorien Plot contact", "start_char_idx": 5145, "end_char_idx": 5859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26820dcf-0ea8-4ae3-a4ee-1ef72b4814a4": {"__data__": {"id_": "26820dcf-0ea8-4ae3-a4ee-1ef72b4814a4", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_12.txt", "file_name": "www.python.org_3_12.txt", "file_type": "text/plain", "file_size": 500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "933428dc-c760-4f34-b08b-bd0bb8cef492", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_12.txt", "file_name": "www.python.org_3_12.txt", "file_type": "text/plain", "file_size": 500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "307af6f75af9bdfc048bdf63149847b08f566588daa17728d2a822d81cb03693", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a5a05fe-0ba9-4bce-9f0e-2cf477e8ecb6", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1e97cdf668261640aeffddff18a59a448ec0b9bca9da21857bea188a4f2f6408", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3f9929a-5db9-425e-9c60-4ac52e143374", "node_type": "1", "metadata": {}, "hash": "ea541f51212caebae5846ede8b34c5ce871fee2dc519f73abfc04b835140ea5d", "class_name": "RelatedNodeInfo"}}, "text": "at vctrn.dev Vikram Jayanthi vikramjayanthi at google.com Vinay Sajip vinay_sajip at red-dove.com Vincent Siles vsiles at fb.com Vladimir Diaz vladimir.diaz at nyu.edu W Isaac Carroll icarroll at pobox.com Walter D\u00f6rwald walter at livinglogic.de Wenzel Jakob wenzel.jakob at epfl.ch William Woodruff william at yossarian.net Yury Selivanov yury at edgedb.com Zac Hatfield-Dodds zac at zhd.dev Zachary Ware zach at python.org Zixuan James Li p359101898 at gmail.com \u0141ukasz Langa lukasz at python.org", "start_char_idx": 0, "end_char_idx": 498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3f9929a-5db9-425e-9c60-4ac52e143374": {"__data__": {"id_": "d3f9929a-5db9-425e-9c60-4ac52e143374", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb09a449-881d-442b-8c61-af9111f4bc11", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7bb6393e8ee2b709d581f4a36d91919ba4d46696f6330f804079ab56418e037f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26820dcf-0ea8-4ae3-a4ee-1ef72b4814a4", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_12.txt", "file_name": "www.python.org_3_12.txt", "file_type": "text/plain", "file_size": 500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "307af6f75af9bdfc048bdf63149847b08f566588daa17728d2a822d81cb03693", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1fdac43d-b959-4857-a7ae-ecf08e4b5406", "node_type": "1", "metadata": {}, "hash": "a0b564cecd9dd3519102a19b97dacf835af0093d9fefa8ea07217d7cf9bb6eeb", "class_name": "RelatedNodeInfo"}}, "text": "Add a \u2018default\u2019 keyword argument to \u2018attrgetter\u2019, \u2018itemgetter\u2019 and \u2018getitem\u2019 Facundo Batista 3.14 S 771 Default Extras for Python Software Packages Thomas Robitaille, Jonathan Dekhtiar P 772 Packaging governance process Barry Warsaw, Deb Nicholson, Pradyun Gedam S 774 Removing the LLVM requirement for JIT builds Savannah Ostrowski 3.14 I 776 Emscripten Support Hood Chatham 3.14 S 777 How to Re-invent the Wheel Emma Harper Smith S 779 Criteria for supported status for free-threaded Python Thomas Wouters, Matt Page, Sam Gross 3.14 S 780 ABI features as environment markers Klaus Zimmermann, Ralf Gommers 3.14 S 781 Make TYPE_CHECKING a built-in constant Inada Naoki 3.15 S 782 Add PyBytesWriter C API Victor Stinner 3.15 S 783 Emscripten Packaging Hood Chatham S 785 New methods for easier handling of ExceptionGroups Zac Hatfield-Dodds 3.14 S 788 Reimagining native threads Peter Bierma 3.15 S 789 Preventing task-cancellation bugs by limiting yield in async generators Zac Hatfield-Dodds, Nathaniel J. Smith 3.14 S 791 imath \u2014 module for integer-specific mathematics functions Sergey B Kirpichev 3.15 Finished PEPs (done, with a stable interface) PEP Title Authors SF 100 Python Unicode Integration Marc-Andr\u00e9 Lemburg 2.0 SF 201 Lockstep Iteration Barry Warsaw 2.0 SF 202 List Comprehensions Barry Warsaw 2.0 SF 203 Augmented Assignments Thomas Wouters 2.0 SF 205 Weak References Fred L. Drake, Jr. 2.1 SF 207 Rich Comparisons Guido van Rossum, David Ascher 2.1 SF 208 Reworking the Coercion Model Neil Schemenauer, Marc-Andr\u00e9 Lemburg 2.1 SF 214 Extended Print Statement Barry Warsaw 2.0 SF 217 Display Hook for Interactive Use Moshe Zadka 2.1 SF 218 Adding a Built-In Set Object Type Greg Wilson, Raymond Hettinger 2.2 SF 221 Import As Thomas Wouters 2.0 SF 223 Change the Meaning of x Escapes Tim Peters 2.0 SF 227 Statically Nested Scopes Jeremy Hylton 2.1 SF 229 Using Distutils to Build Python A.M.", "start_char_idx": 0, "end_char_idx": 1909, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fdac43d-b959-4857-a7ae-ecf08e4b5406": {"__data__": {"id_": "1fdac43d-b959-4857-a7ae-ecf08e4b5406", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb09a449-881d-442b-8c61-af9111f4bc11", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7bb6393e8ee2b709d581f4a36d91919ba4d46696f6330f804079ab56418e037f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3f9929a-5db9-425e-9c60-4ac52e143374", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6491a913d128650cfbc3cb19c2eaea1b0765b4c53a49750546988941cfeda268", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a5635d2d-7258-4fbb-b0e2-3627d398bfaf", "node_type": "1", "metadata": {}, "hash": "ee71d53a34d395288aedd287880b81d8a6fd18d3c79dc395cb611d37a51cfeb1", "class_name": "RelatedNodeInfo"}}, "text": "2.1 SF 207 Rich Comparisons Guido van Rossum, David Ascher 2.1 SF 208 Reworking the Coercion Model Neil Schemenauer, Marc-Andr\u00e9 Lemburg 2.1 SF 214 Extended Print Statement Barry Warsaw 2.0 SF 217 Display Hook for Interactive Use Moshe Zadka 2.1 SF 218 Adding a Built-In Set Object Type Greg Wilson, Raymond Hettinger 2.2 SF 221 Import As Thomas Wouters 2.0 SF 223 Change the Meaning of x Escapes Tim Peters 2.0 SF 227 Statically Nested Scopes Jeremy Hylton 2.1 SF 229 Using Distutils to Build Python A.M. Kuchling 2.1 SF 230 Warning Framework Guido van Rossum 2.1 SF 232 Function Attributes Barry Warsaw 2.1 SF 234 Iterators Ka-Ping Yee, Guido van Rossum 2.1 SF 235 Import on Case-Insensitive Platforms Tim Peters 2.1 SF 236 Back to the __future__ Tim Peters 2.1 SF 237 Unifying Long Integers and Integers Moshe Zadka, Guido van Rossum 2.2 SF 238 Changing the Division Operator Moshe Zadka, Guido van Rossum 2.2 SF 250 Using site-packages on Windows Paul Moore 2.2 SF 252 Making Types Look More Like Classes Guido van Rossum 2.2 SF 253 Subtyping Built-in Types Guido van Rossum 2.2 SF 255 Simple Generators Neil Schemenauer, Tim Peters, Magnus Lie Hetland 2.2 SF 260 Simplify xrange() Guido van Rossum 2.2 SF 261 Support for \u201cwide\u201d Unicode characters Paul Prescod 2.2 SF 263 Defining Python Source Code Encodings Marc-Andr\u00e9 Lemburg, Martin von L\u00f6wis 2.3 SF 264 Future statements in simulated shells Michael Hudson 2.2 SF 273 Import Modules from Zip Archives James C. Ahlstrom 2.3 SF 274 Dict Comprehensions Barry Warsaw 2.7, 3.0 SF 277 Unicode file name support for Windows NT Neil Hodgson 2.3 SF 278 Universal Newline Support Jack Jansen 2.3 SF 279 The enumerate() built-in function Raymond Hettinger 2.3 SF 282 A Logging System Vinay Sajip, Trent Mick 2.3 SF 285 Adding a bool type Guido van Rossum 2.3 SF 289 Generator Expressions Raymond Hettinger 2.4 SF 292 Simpler String Substitutions Barry Warsaw 2.4 SF 293 Codec Error Handling Callbacks Walter D\u00f6rwald 2.3 SF 301 Package Index and Metadata for Distutils Richard Jones 2.3 SF 302 New Import Hooks Just van Rossum, Paul Moore 2.3 SF 305 CSV File API Kevin Altis, Dave Cole, Andrew McNamara, Skip Montanaro, Cliff Wells 2.3 SF 307 Extensions to the pickle protocol Guido van Rossum, Tim Peters 2.3 SF 308 Conditional Expressions Guido van Rossum, Raymond Hettinger 2.5 SF 309 Partial Function Application Peter Harris 2.5 SF 311 Simplified Global Interpreter Lock Acquisition for Extensions Mark Hammond 2.3 SF 318 Decorators for Functions and Methods Kevin D. Smith, Jim J. Jewett, Skip Montanaro, Anthony Baxter 2.4 SF 322 Reverse Iteration Raymond Hettinger 2.4 SF 324 subprocess - New process module Peter Astrand 2.4 SF 327 Decimal Data Type Facundo Batista 2.4 SF 328 Imports: Multi-Line and Absolute/Relative Aahz 2.4, 2.5, 2.6 SF 331 Locale-Independent Float/String Conversions Christian R. Reis 2.4 SF 338 Executing modules as scripts Alyssa Coghlan 2.5 SF 341 Unifying try-except and try-finally Georg Brandl 2.5 SF 342 Coroutines via Enhanced Generators Guido van Rossum, Phillip J. Eby 2.5 SF 343 The \u201cwith\u201d Statement Guido van Rossum, Alyssa Coghlan 2.5 SF 352 Required Superclass for Exceptions Brett Cannon, Guido van Rossum 2.5 SF 353 Using ssize_t as the index type Martin von L\u00f6wis 2.5 SF 357 Allowing Any Object to be Used for Slicing Travis Oliphant 2.5 SF 358 The \u201cbytes\u201d Object Neil Schemenauer, Guido van Rossum 2.6, 3.0 SF 362 Function Signature Object Brett Cannon, Jiwon Seo, Yury Selivanov, Larry Hastings 3.3 SF 366 Main module explicit relative", "start_char_idx": 1405, "end_char_idx": 4935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5635d2d-7258-4fbb-b0e2-3627d398bfaf": {"__data__": {"id_": "a5635d2d-7258-4fbb-b0e2-3627d398bfaf", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdbc74be-8b07-4207-af06-53712754df49", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8e50c8d13065d6e314c3c8a625fc18f234712c37389efd89b30fc34549d5af6e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1fdac43d-b959-4857-a7ae-ecf08e4b5406", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7ff1cd0ac22ad2f5a8f1fc141b26bd82bdc9b5a8d18cd82204ff505dcddecf9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3de311fe-ddc8-4292-8ef4-02e3719ccd4a", "node_type": "1", "metadata": {}, "hash": "6167642c6007e3ec11b53ea5769a8b3e36a7e9078204a3da0a8edfaffd4c6e0f", "class_name": "RelatedNodeInfo"}}, "text": "imports Alyssa Coghlan 2.6, 3.0 SF 370 Per user site-packages directory Christian Heimes 2.6, 3.0 SF 371 Addition of the multiprocessing package to the standard library Jesse Noller, Richard Oudkerk 2.6, 3.0 SF 372 Adding an ordered dictionary to collections Armin Ronacher, Raymond Hettinger 2.7, 3.1 SF 376 Database of Installed Python Distributions Tarek Ziad\u00e9 2.7, 3.2 SF 378 Format Specifier for Thousands Separator Raymond Hettinger 2.7, 3.1 SF 380 Syntax for Delegating to a Subgenerator Gregory Ewing 3.3 SF 383 Non-decodable Bytes in System Character Interfaces Martin von L\u00f6wis 3.1 SF 384 Defining a Stable ABI Martin von L\u00f6wis 3.2 SF 389 argparse - New Command Line Parsing Module Steven Bethard 2.7, 3.2 SF 391 Dictionary-Based Configuration For Logging Vinay Sajip 2.7, 3.2 SF 393 Flexible String Representation Martin von L\u00f6wis 3.3 SF 397 Python launcher for Windows Mark Hammond, Martin von L\u00f6wis 3.3 SF 405 Python Virtual Environments Carl Meyer 3.3 SF 409 Suppressing exception context Ethan Furman 3.3 SF 412 Key-Sharing Dictionary Mark Shannon 3.3 SF 414 Explicit Unicode Literal for Python 3.3 Armin Ronacher, Alyssa Coghlan 3.3 SF 415 Implement context suppression with exception attributes Benjamin Peterson 3.3 SF 417 Including mock in the Standard Library Michael Foord 3.3 SF 418 Add monotonic time, performance counter, and process time functions Cameron Simpson, Jim J. Jewett, Stephen J. Turnbull, Victor Stinner 3.3 SF 420 Implicit Namespace Packages Eric V. Smith 3.3 SF 421 Adding sys.implementation Eric Snow 3.3 SF 424 A method for exposing a length hint Alex Gaynor 3.4 SF 425 Compatibility Tags for Built Distributions Daniel Holth 3.4 SF 427 The Wheel Binary Package Format 1.0 Daniel Holth SF 428 The pathlib module \u2013 object-oriented filesystem paths Antoine Pitrou 3.4 SF 435 Adding an Enum type to the Python standard library Barry Warsaw, Eli Bendersky, Ethan Furman 3.4 SF 436 The Argument Clinic DSL Larry Hastings 3.4 SF 440 Version Identification and Dependency Specification Alyssa Coghlan, Donald Stufft SF 441 Improving Python ZIP Application Support Daniel Holth, Paul Moore 3.5 SF 442 Safe object finalization Antoine Pitrou 3.4 SF 443 Single-dispatch generic functions \u0141ukasz Langa 3.4 SF 445 Add new APIs to customize Python memory allocators Victor Stinner 3.4 SF 446 Make newly created file descriptors non-inheritable Victor Stinner 3.4 SF 448 Additional Unpacking Generalizations Joshua Landau 3.5 SF 450 Adding A Statistics Module To The Standard Library Steven D\u2019Aprano 3.4 SF 451 A ModuleSpec Type for the Import System Eric Snow 3.4 SF 453 Explicit bootstrapping of pip in Python installations Donald Stufft, Alyssa Coghlan SF 454 Add a new tracemalloc module to trace Python memory allocations Victor Stinner 3.4 SF 456 Secure and interchangeable hash algorithm Christian Heimes 3.4 SF 461 Adding % formatting to bytes and bytearray Ethan Furman 3.5 SF 465 A dedicated infix operator for matrix multiplication Nathaniel J. Smith 3.5 SF 466 Network Security Enhancements for Python 2.7.x Alyssa Coghlan 2.7.9 SF 468 Preserving the order of **kwargs in a function.", "start_char_idx": 0, "end_char_idx": 3122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3de311fe-ddc8-4292-8ef4-02e3719ccd4a": {"__data__": {"id_": "3de311fe-ddc8-4292-8ef4-02e3719ccd4a", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdbc74be-8b07-4207-af06-53712754df49", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "8e50c8d13065d6e314c3c8a625fc18f234712c37389efd89b30fc34549d5af6e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a5635d2d-7258-4fbb-b0e2-3627d398bfaf", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bb947b0c7e930f1e9cbf61e2a1a9188becf25ae9d28ee6594d78478b897aa421", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b00e595-cc45-48af-8704-c49c963892d1", "node_type": "1", "metadata": {}, "hash": "e3ea993019497e56c92baa58b988b750aa5c6b64d2255d78b5567d33c4695bc6", "class_name": "RelatedNodeInfo"}}, "text": "Eric Snow 3.6 SF 471 os.scandir() function \u2013 a better and faster directory iterator Ben Hoyt 3.5 SF 475 Retry system calls failing with EINTR Charles-Fran\u00e7ois Natali, Victor Stinner 3.5 SF 476 Enabling certificate verification by default for stdlib http clients Alex Gaynor 2.7.9, 3.4.3, 3.5 SF 477 Backport ensurepip (PEP 453) to Python 2.7 Donald Stufft, Alyssa Coghlan SF 479 Change StopIteration handling inside generators Chris Angelico, Guido van Rossum 3.5 SF 484 Type Hints Guido van Rossum, Jukka Lehtosalo, \u0141ukasz Langa 3.5 SF 485 A Function for testing approximate equality Christopher Barker 3.5 SF 486 Make the Python Launcher aware of virtual environments Paul Moore 3.5 SF 487 Simpler customisation of class creation Martin Teichmann 3.6 SF 488 Elimination of PYO files Brett Cannon 3.5 SF 489 Multi-phase extension module initialization Petr Viktorin, Stefan Behnel, Alyssa Coghlan 3.5 SF 492 Coroutines with async and await syntax Yury Selivanov 3.5 SF 493 HTTPS verification migration tools for Python 2.7 Alyssa Coghlan, Robert Kuska, Marc-Andr\u00e9 Lemburg 2.7.12 SF 495 Local Time Disambiguation Alexander Belopolsky, Tim Peters 3.6 SF 498 Literal String Interpolation Eric V. Smith 3.6 SF 503 Simple Repository API Donald Stufft SF 506 Adding A Secrets Module To The Standard Library Steven D\u2019Aprano 3.6 SF 508 Dependency specification for Python Software Packages Robert Collins SF 515 Underscores in Numeric Literals Georg Brandl, Serhiy Storchaka 3.6 SF 517 A build-system independent format for source trees Nathaniel J. Smith, Thomas Kluyver SF 518 Specifying Minimum Build System Requirements for Python Projects Brett Cannon, Nathaniel J. Smith, Donald Stufft SF 519 Adding a file system path protocol Brett Cannon, Koos Zevenhoven 3.6 SF 520 Preserving Class Attribute Definition Order Eric Snow 3.6 SF 523 Adding a frame evaluation API to CPython Brett Cannon, Dino Viehland 3.6 SF 524 Make os.urandom() blocking on Linux Victor Stinner 3.6 SF 525 Asynchronous", "start_char_idx": 3123, "end_char_idx": 5110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b00e595-cc45-48af-8704-c49c963892d1": {"__data__": {"id_": "7b00e595-cc45-48af-8704-c49c963892d1", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59375a9c-b993-4bb8-80ba-b80ca695b5d6", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cb50f2e49abadd78889028aea3670a27ed595d4c4ced0bdc8df4251c052b2011", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3de311fe-ddc8-4292-8ef4-02e3719ccd4a", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "051482ce7d855d42a8e67dec7309a7b20b0f1c448418793789e5597870e24fe2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3a6cfc7-ac78-4e53-bb81-92cc8f0bd5cc", "node_type": "1", "metadata": {}, "hash": "3c0129503dabb3052f5799e063afb75cea945d2523bf170b7501b9d07063e5d5", "class_name": "RelatedNodeInfo"}}, "text": "Generators Yury Selivanov 3.6 SF 526 Syntax for Variable Annotations Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, Guido van Rossum 3.6 SF 527 Removing Un(der)used file types/extensions on PyPI Donald Stufft SF 528 Change Windows console encoding to UTF-8 Steve Dower 3.6 SF 529 Change Windows filesystem encoding to UTF-8 Steve Dower 3.6 SF 530 Asynchronous Comprehensions Yury Selivanov 3.6 SF 538 Coercing the legacy C locale to a UTF-8 based locale Alyssa Coghlan 3.7 SF 539 A New C-API for Thread-Local Storage in CPython Erik M. Bray, Masayuki Yamamoto 3.7 SF 540 Add a new UTF-8 Mode Victor Stinner 3.7 SF 544 Protocols: Structural subtyping (static duck typing) Ivan Levkivskyi, Jukka Lehtosalo, \u0141ukasz Langa 3.8 SF 552 Deterministic pycs Benjamin Peterson 3.7 SF 553 Built-in breakpoint() Barry Warsaw 3.7 SF 557 Data Classes Eric V. Smith 3.7 SF 560 Core support for typing module and generic types Ivan Levkivskyi 3.7 SF 561 Distributing and Packaging Type Information Emma Harper Smith 3.7 SF 562 Module __getattr__ and __dir__ Ivan Levkivskyi 3.7 SF 564 Add new time functions with nanosecond resolution Victor Stinner 3.7 SF 565 Show DeprecationWarning in __main__ Alyssa Coghlan 3.7 SF 566 Metadata for Python Software Packages 2.1 Dustin Ingram 3.x SF 567 Context Variables Yury Selivanov 3.7 SF 570 Python Positional-Only Parameters Larry Hastings, Pablo Galindo, Mario Corchero, Eric N. Vander Weele 3.8 SF 572 Assignment Expressions Chris Angelico, Tim Peters, Guido van Rossum 3.8 SF 573 Module State Access from C Extension Methods Petr Viktorin, Alyssa Coghlan, Eric Snow, Marcel Plch 3.9 SF 574 Pickle protocol 5 with out-of-band data Antoine Pitrou 3.8 SF 578 Python Runtime Audit Hooks Steve Dower 3.8 SF 584 Add Union Operators To dict Steven D\u2019Aprano, Brandt Bucher 3.9 SF 585 Type Hinting Generics In Standard Collections \u0141ukasz Langa 3.9 SF 586 Literal Types Michael Lee, Ivan Levkivskyi, Jukka Lehtosalo 3.8 SF 587 Python Initialization Configuration Victor Stinner, Alyssa Coghlan 3.8 SF 589 TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys Jukka Lehtosalo 3.8 SF 591 Adding a final qualifier to typing Michael J. Sullivan, Ivan Levkivskyi 3.8 SF 592 Adding \u201cYank\u201d Support to the Simple API Donald Stufft SF 593 Flexible function and variable annotations Till Varoquaux, Konstantin Kashin 3.9 SF 594 Removing dead batteries from the standard library Christian Heimes, Brett Cannon 3.11 SF 597 Add optional EncodingWarning Inada Naoki 3.10 SF 600 Future \u2018manylinux\u2019 Platform Tags for Portable Linux Built Distributions Nathaniel J. Smith, Thomas Kluyver SF 604 Allow writing union types as X | Y Philippe PRADOS, Maggie Moss 3.10 SF 610 Recording the Direct URL Origin of installed distributions St\u00e9phane Bidoul, Chris Jerdonek SF 612 Parameter Specification Variables Mark Mendoza 3.10 SF 613 Explicit Type Aliases Shannon Zhu 3.10 SF 614 Relaxing Grammar Restrictions On Decorators Brandt Bucher 3.9 SF 615 Support for the IANA Time Zone Database in the Standard Library Paul Ganssle 3.9 SF 616 String methods to remove prefixes and suffixes Dennis Sweeney 3.9 SF 617 New PEG parser for CPython Guido van Rossum, Pablo Galindo, Lysandros Nikolaou 3.9 SF 618 Add Optional Length-Checking To zip Brandt Bucher 3.10 SF 621 Storing project metadata in pyproject.toml Brett Cannon, Dustin Ingram, Paul Ganssle, Pradyun Gedam, S\u00e9bastien Eustace, Thomas Kluyver, Tzu-ping Chung SF 623 Remove wstr from Unicode Inada Naoki 3.", "start_char_idx": 0, "end_char_idx": 3476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3a6cfc7-ac78-4e53-bb81-92cc8f0bd5cc": {"__data__": {"id_": "d3a6cfc7-ac78-4e53-bb81-92cc8f0bd5cc", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59375a9c-b993-4bb8-80ba-b80ca695b5d6", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cb50f2e49abadd78889028aea3670a27ed595d4c4ced0bdc8df4251c052b2011", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b00e595-cc45-48af-8704-c49c963892d1", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0506cffd907ef9c5017720a28b3e275ff60eb76b9607f76772c7d149877bf7f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be7218ec-0e9e-4292-a454-e750c5cac555", "node_type": "1", "metadata": {}, "hash": "fa3b9d61f969017f56c49a6aa8b37eb54b60d7d3e4487fe19f6083ea6a306879", "class_name": "RelatedNodeInfo"}}, "text": "10 SF 613 Explicit Type Aliases Shannon Zhu 3.10 SF 614 Relaxing Grammar Restrictions On Decorators Brandt Bucher 3.9 SF 615 Support for the IANA Time Zone Database in the Standard Library Paul Ganssle 3.9 SF 616 String methods to remove prefixes and suffixes Dennis Sweeney 3.9 SF 617 New PEG parser for CPython Guido van Rossum, Pablo Galindo, Lysandros Nikolaou 3.9 SF 618 Add Optional Length-Checking To zip Brandt Bucher 3.10 SF 621 Storing project metadata in pyproject.toml Brett Cannon, Dustin Ingram, Paul Ganssle, Pradyun Gedam, S\u00e9bastien Eustace, Thomas Kluyver, Tzu-ping Chung SF 623 Remove wstr from Unicode Inada Naoki 3.10 SF 624 Remove Py_UNICODE encoder APIs Inada Naoki 3.11 SF 625 Filename of a Source Distribution Tzu-ping Chung, Paul Moore SF 626 Precise line numbers for debugging and other tools. Mark Shannon 3.10 SF 627 Recording installed projects Petr Viktorin SF 628 Add math.tau Alyssa Coghlan 3.6 SF 629 Versioning PyPI\u2019s Simple API Donald Stufft SF 632 Deprecate distutils module Steve Dower 3.10 SF 634 Structural Pattern Matching: Specification Brandt Bucher, Guido van Rossum 3.10 SF 639 Improving License Clarity with Better Package Metadata Philippe Ombredanne, C.A.M. Gerlach, Karolina Surma SF 643 Metadata for Package Source Distributions Paul Moore SF 644 Require OpenSSL 1.1.1 or newer Christian Heimes 3.10 SF 646 Variadic Generics Mark Mendoza, Matthew Rahtz, Pradeep Kumar Srinivasan, Vincent Siles 3.11 SF 647 User-Defined Type Guards Eric Traut 3.10 SF 652 Maintaining the Stable ABI Petr Viktorin 3.10 SF 654 Exception Groups and except* Irit Katriel, Yury Selivanov, Guido van Rossum 3.11 SF 655 Marking individual TypedDict items as required or potentially-missing David Foster 3.11 SF 656 Platform Tag for Linux Distributions Using Musl Tzu-ping Chung SF 657 Include Fine Grained Error Locations in Tracebacks Pablo Galindo, Batuhan Taskaya, Ammar Askar 3.11 SF 660 Editable installs for pyproject.toml based builds (wheel based) Daniel Holth, St\u00e9phane Bidoul SF 667 Consistent views of namespaces Mark Shannon, Tian Gao 3.13 SF 669 Low Impact Monitoring for CPython Mark Shannon 3.12 SF 670 Convert macros to functions in the Python C API Erlend Egeberg Aasland, Victor Stinner 3.11 SF 673 Self Type", "start_char_idx": 2841, "end_char_idx": 5091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be7218ec-0e9e-4292-a454-e750c5cac555": {"__data__": {"id_": "be7218ec-0e9e-4292-a454-e750c5cac555", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "055904b6-e92e-4bb9-835f-51a27f78a532", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b05e69d77cbee746d581f0fb4964040d75d10e155922f435638d3cfc7b10690f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3a6cfc7-ac78-4e53-bb81-92cc8f0bd5cc", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "7f8e4bac751ca466bd1ee49e8f9654af0595e6c5907356c624934c6642fd0654", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b8efe35-903b-44a8-bd7c-8193ae2360e3", "node_type": "1", "metadata": {}, "hash": "e9935c5839d7a000511d2141306dc69782391bf04f05ec7fefa78fee93b3080f", "class_name": "RelatedNodeInfo"}}, "text": "Pradeep Kumar Srinivasan, James Hilton-Balfe 3.11 SF 675 Arbitrary Literal String Type Pradeep Kumar Srinivasan, Graham Bleaney 3.11 SF 678 Enriching Exceptions with Notes Zac Hatfield-Dodds 3.11 SF 680 tomllib: Support for Parsing TOML in the Standard Library Taneli Hukkinen, Shantanu Jain 3.11 SF 681 Data Class Transforms Erik De Bonte, Eric Traut 3.11 SF 682 Format Specifier for Signed Zero John Belmonte 3.11 SF 683 Immortal Objects, Using a Fixed Refcount Eric Snow, Eddie Elizondo 3.12 SF 684 A Per-Interpreter GIL Eric Snow 3.12 SF 688 Making the buffer protocol accessible in Python Jelle Zijlstra 3.12 SF 689 Unstable C API tier Petr Viktorin 3.12 SF 692 Using TypedDict for more precise **kwargs typing Franek Magiera 3.12 SF 695 Type Parameter Syntax Eric Traut 3.12 SF 696 Type Defaults for Type Parameters James Hilton-Balfe 3.13 SF 697 Limited C API for Extending Opaque Types Petr Viktorin 3.12 SF 698 Override Decorator for Static Typing Steven Troxler, Joshua Xu, Shannon Zhu 3.12 SF 700 Additional Fields for the Simple API for Package Indexes Paul Moore SF 702 Marking deprecations using the type system Jelle Zijlstra 3.13 SF 705 TypedDict: Read-only items Alice Purcell 3.13 SF 706 Filter for tarfile.extractall Petr Viktorin 3.12 SF 709 Inlined comprehensions Carl Meyer 3.12 SF 715 Disabling bdist_egg distribution uploads on PyPI William Woodruff SF 721 Using tarfile.data_filter for source distribution extraction Petr Viktorin 3.12 SF 723 Inline script metadata Ofek Lev SF 730 Adding iOS as a supported platform Russell Keith-Magee 3.13 SF 735 Dependency Groups in pyproject.toml Stephen Rosen SF 737 C API to format a type fully qualified name Victor Stinner 3.13 SF 738 Adding Android as a supported platform Malcolm Smith 3.13 SF 740 Index support for digital attestations William Woodruff, Facundo Tuesca, Dustin Ingram SF 741 Python Configuration C API Victor Stinner 3.14 SF 742 Narrowing types with TypeIs Jelle Zijlstra 3.13 SF 757 C API to import-export Python integers Sergey B Kirpichev, Victor Stinner 3.14 SF 765 Disallow return/break/continue that exit a finally block Irit Katriel, Alyssa Coghlan 3.14 SF 784 Adding Zstandard to the standard library Emma Harper Smith 3.14 SF 3101 Advanced String Formatting Talin 3.0 SF 3102 Keyword-Only Arguments Talin 3.0 SF 3104 Access to Names in Outer Scopes Ka-Ping Yee 3.0 SF 3105 Make print a function Georg Brandl 3.0 SF 3106 Revamping dict.keys(), .values() and .items() Guido van Rossum 3.0 SF 3107 Function Annotations Collin Winter, Tony Lownds 3.0 SF 3108 Standard Library Reorganization Brett Cannon 3.0 SF 3109 Raising Exceptions in Python 3000 Collin Winter 3.0 SF 3110 Catching Exceptions in Python 3000 Collin Winter 3.0 SF 3111 Simple input built-in in Python 3000 Andre Roberge 3.0 SF 3112 Bytes literals in Python 3000 Jason Orendorff 3.0 SF 3113 Removal of Tuple Parameter Unpacking Brett Cannon 3.0 SF 3114 Renaming iterator.next() to iterator.__next__() Ka-Ping Yee 3.0 SF 3115 Metaclasses in Python 3000 Talin 3.0 SF 3116 New I/O Daniel Stutzbach, Guido van Rossum, Mike Verdone 3.0 SF 3118 Revising the buffer protocol Travis Oliphant, Carl Banks 3.0 SF 3119 Introducing Abstract Base Classes Guido van Rossum, Talin 3.0 SF 3120 Using UTF-8 as the default source encoding Martin von L\u00f6wis 3.0 SF 3121 Extension Module Initialization and Finalization Martin von L\u00f6wis 3.0 SF 3123 Making PyObject_HEAD conform to standard C Martin von L\u00f6wis 3.", "start_char_idx": 0, "end_char_idx": 3448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b8efe35-903b-44a8-bd7c-8193ae2360e3": {"__data__": {"id_": "0b8efe35-903b-44a8-bd7c-8193ae2360e3", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "055904b6-e92e-4bb9-835f-51a27f78a532", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b05e69d77cbee746d581f0fb4964040d75d10e155922f435638d3cfc7b10690f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be7218ec-0e9e-4292-a454-e750c5cac555", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "fc5d633e029b3ae6e0bc9763f34d073babfed0b595fe67222d2cc8901986a0ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b4a9f25-7e4e-49cb-bf3e-e0d91a67061e", "node_type": "1", "metadata": {}, "hash": "30f8a71352bb65fb91d06c0053fa65c057d126bc48edd4f226a8877c271dc4e8", "class_name": "RelatedNodeInfo"}}, "text": "0 SF 3113 Removal of Tuple Parameter Unpacking Brett Cannon 3.0 SF 3114 Renaming iterator.next() to iterator.__next__() Ka-Ping Yee 3.0 SF 3115 Metaclasses in Python 3000 Talin 3.0 SF 3116 New I/O Daniel Stutzbach, Guido van Rossum, Mike Verdone 3.0 SF 3118 Revising the buffer protocol Travis Oliphant, Carl Banks 3.0 SF 3119 Introducing Abstract Base Classes Guido van Rossum, Talin 3.0 SF 3120 Using UTF-8 as the default source encoding Martin von L\u00f6wis 3.0 SF 3121 Extension Module Initialization and Finalization Martin von L\u00f6wis 3.0 SF 3123 Making PyObject_HEAD conform to standard C Martin von L\u00f6wis 3.0 SF 3127 Integer Literal Support and Syntax Patrick Maupin 3.0 SF 3129 Class Decorators Collin Winter 3.0 SF 3131 Supporting Non-ASCII Identifiers Martin von L\u00f6wis 3.0 SF 3132 Extended Iterable Unpacking Georg Brandl 3.0 SF 3134 Exception Chaining and Embedded Tracebacks Ka-Ping Yee 3.0 SF 3135 New Super Calvin Spealman, Tim Delaney, Lie Ryan 3.0 SF 3137 Immutable Bytes and Mutable Buffer Guido van Rossum 3.0 SF 3138 String representation in Python 3000 Atsuo Ishimoto 3.0 SF 3141 A Type Hierarchy for Numbers Jeffrey Yasskin 3.0 SF 3144 IP Address Manipulation Library for the Python Standard Library Peter Moody 3.3 SF 3147 PYC Repository Directories Barry Warsaw 3.2 SF 3148 futures - execute computations asynchronously Brian Quinlan 3.2 SF 3149 ABI version tagged .so files Barry Warsaw 3.2 SF 3151 Reworking the OS and IO exception hierarchy Antoine Pitrou 3.3 SF 3154 Pickle protocol version 4 Antoine Pitrou 3.4 SF 3155 Qualified name for classes and functions Antoine Pitrou 3.3 SF 3156 Asynchronous IO Support Rebooted: the \u201casyncio\u201d Module Guido van Rossum 3.3 Historical Meta-PEPs and Informational PEPs PEP Title Authors PS 5 Guidelines for Language Evolution Paul Prescod PS 6 Bug Fix Releases Aahz, Anthony Baxter IF 160 Python 1.6 Release Schedule Fred L. Drake, Jr. 1.6 IF 200 Python 2.0 Release Schedule Jeremy Hylton 2.0 IF 226 Python 2.1 Release Schedule Jeremy Hylton 2.1 IF 251 Python 2.2 Release Schedule Barry Warsaw, Guido van Rossum 2.2 IF 283 Python 2.3 Release Schedule Guido van Rossum 2.3 IF", "start_char_idx": 2839, "end_char_idx": 4974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b4a9f25-7e4e-49cb-bf3e-e0d91a67061e": {"__data__": {"id_": "1b4a9f25-7e4e-49cb-bf3e-e0d91a67061e", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2469720-5160-49e8-9f03-31c74b3d84f3", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5062147fbcb09b90537a92c7932d0ea9ef675c3f693fdaa4185b4bc5d3327197", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b8efe35-903b-44a8-bd7c-8193ae2360e3", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "298e17183daa5db012bf1510d44ee5729e54015f5175b395aeed65ae75537916", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b996b334-d3c4-4fef-a46b-e74bef7903df", "node_type": "1", "metadata": {}, "hash": "9670d775bfd44ed9a3be4766a3dc259944cf22f5768fb1aa8bebec6e0e31b561", "class_name": "RelatedNodeInfo"}}, "text": "320 Python 2.4 Release Schedule Barry Warsaw, Raymond Hettinger, Anthony Baxter 2.4 PF 347 Migrating the Python CVS to Subversion Martin von L\u00f6wis IF 356 Python 2.5 Release Schedule Neal Norwitz, Guido van Rossum, Anthony Baxter 2.5 PF 360 Externally Maintained Packages Brett Cannon IF 361 Python 2.6 and 3.0 Release Schedule Neal Norwitz, Barry Warsaw 2.6, 3.0 IF 373 Python 2.7 Release Schedule Benjamin Peterson 2.7 PF 374 Choosing a distributed VCS for the Python project Brett Cannon, Stephen J. Turnbull, Alexandre Vassalotti, Barry Warsaw, Dirkjan Ochtman IF 375 Python 3.1 Release Schedule Benjamin Peterson 3.1 PF 385 Migrating from Subversion to Mercurial Dirkjan Ochtman, Antoine Pitrou, Georg Brandl IF 392 Python 3.2 Release Schedule Georg Brandl 3.2 IF 398 Python 3.3 Release Schedule Georg Brandl 3.3 IF 404 Python 2.8 Un-release Schedule Barry Warsaw 2.8 IF 429 Python 3.4 Release Schedule Larry Hastings 3.4 PS 438 Transitioning to release-file hosting on PyPI Holger Krekel, Carl Meyer PF 449 Removal of the PyPI Mirror Auto Discovery and Naming Scheme Donald Stufft PF 464 Removal of the PyPI Mirror Authenticity API Donald Stufft PF 470 Removing External Hosting Support on PyPI Donald Stufft IF 478 Python 3.5 Release Schedule Larry Hastings 3.5 IF 494 Python 3.6 Release Schedule Ned Deily 3.6 PF 512 Migrating from hg.python.org to GitHub Brett Cannon IF 537 Python 3.7 Release Schedule Ned Deily 3.7 PF 541 Package Index Name Retention \u0141ukasz Langa IF 569 Python 3.8 Release Schedule \u0141ukasz Langa 3.8 PF 581 Using GitHub Issues for CPython Mariatta PF 3000 Python 3000 Guido van Rossum PF 3002 Procedure for Backwards-Incompatible Changes Steven Bethard PF 3003 Python Language Moratorium Brett Cannon, Jesse Noller, Guido van Rossum PF 3099 Things that will Not Change in Python 3000 Georg Brandl PF 3100 Miscellaneous Python 3.0 Plans Brett Cannon PF 8001 Python Governance Voting Process Brett Cannon, Christian Heimes, Donald Stufft, Eric Snow, Gregory P. Smith, \u0141ukasz Langa, Mariatta, Nathaniel J. Smith, Pablo Galindo Salgado, Raymond Hettinger, Tal Einat, Tim Peters, Zachary Ware Deferred PEPs (postponed pending further research or updates) PEP Title Authors SD 213 Attribute Access Handlers Paul Prescod 2.1 SD 219 Stackless Python Gordon McMillan 2.1 SD 222 Web Library Enhancements A.M.", "start_char_idx": 0, "end_char_idx": 2324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b996b334-d3c4-4fef-a46b-e74bef7903df": {"__data__": {"id_": "b996b334-d3c4-4fef-a46b-e74bef7903df", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c2469720-5160-49e8-9f03-31c74b3d84f3", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "5062147fbcb09b90537a92c7932d0ea9ef675c3f693fdaa4185b4bc5d3327197", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b4a9f25-7e4e-49cb-bf3e-e0d91a67061e", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "3b9683677e3da38710c1fd752b24cf9e85cffad78f8fbd79f1837584e86bea9f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eed80f96-461c-4386-af0c-6eb2682de7be", "node_type": "1", "metadata": {}, "hash": "657d661fa6c55ab28b14af4a2d092988cb37de3468832f24ea26ae155acdfc3d", "class_name": "RelatedNodeInfo"}}, "text": "Kuchling 2.1 SD 233 Python Online Help Paul Prescod 2.1 SD 267 Optimized Access to Module Namespaces Jeremy Hylton 2.2 SD 269 Pgen Module for Python Jonathan Riehl 2.2 SD 280 Optimizing access to globals Guido van Rossum 2.3 SD 286 Enhanced Argument Tuples Martin von L\u00f6wis 2.3 SD 312 Simple Implicit Lambda Roman Suzi, Alex Martelli 2.4 SD 316 Programming by Contract for Python Terence Way SD 323 Copyable Iterators Alex Martelli 2.5 SD 337 Logging Usage in the Standard Library Michael P. Dubner 2.5 SD 368 Standard image protocol and class Lino Mastrodomenico 2.6, 3.0 SD 400 Deprecate codecs.StreamReader and codecs.StreamWriter Victor Stinner 3.3 SD 403 General purpose decorator clause (aka \u201c@in\u201d clause) Alyssa Coghlan 3.4 PD 407 New release cycle and introducing long-term support versions Antoine Pitrou, Georg Brandl, Barry Warsaw SD 419 Protecting cleanup statements from interruptions Paul Colomiets 3.3 ID 423 Naming conventions and recipes related to packaging Benoit Bryon ID 444 Python Web3 Interface Chris McDonough, Armin Ronacher SD 447 Add __getdescriptor__ method to metaclass Ronald Oussoren SD 491 The Wheel Binary Package Format 1.9 Daniel Holth SD 499 python -m foo should also bind \u2018foo\u2019 in sys.modules Cameron Simpson, Chris Angelico, Joseph Jevnik 3.10 SD 505 None-aware operators Mark E. Haase, Steve Dower 3.8 SD 532 A circuit breaking protocol and binary operators Alyssa Coghlan, Mark E. Haase 3.8 SD 533 Deterministic cleanup for iterators Nathaniel J. Smith SD 534 Improved Errors for Missing Standard Library Modules Tom\u00e1\u0161 Orsava, Petr Viktorin, Alyssa Coghlan SD 535 Rich comparison chaining Alyssa Coghlan 3.8 SD 547 Running extension modules using the -m option Marcel Plch, Petr Viktorin 3.7 SD 556 Threaded garbage collection Antoine Pitrou 3.7 SD 568 Generator-sensitivity for Context Variables Nathaniel J. Smith 3.8 SD 661 Sentinel Values Tal Einat SD 674 Disallow using macros as l-values Victor Stinner 3.12 SD 734 Multiple Interpreters in the Stdlib Eric Snow 3.13 SD 787 Safer subprocess usage using t-strings Nick Humrich, Alyssa Coghlan 3.15 SD 3124 Overloading, Generic Functions, Interfaces, and Adaptation Phillip J. Eby SD 3143 Standard daemon process library Ben Finney 3.x SD 3150 Statement local namespaces (aka \u201cgiven\u201d clause) Alyssa Coghlan 3.4 Rejected, Superseded, and Withdrawn PEPs PEP Title Authors PW 3 Guidelines for Handling Bug Reports Jeremy Hylton PW 9 Sample Plaintext PEP Template Barry Warsaw PW 42 Feature Requests Jeremy Hylton IS 102 Doing Python Micro Releases Anthony Baxter, Barry Warsaw, Guido van Rossum IW 103 Collecting information about git Oleg Broytman SR 204 Range Literals Thomas Wouters 2.0 IW 206 Python Advanced Library A.M. Kuchling SW 209 Multi-dimensional Arrays Paul Barrett, Travis Oliphant", "start_char_idx": 2325, "end_char_idx": 5111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eed80f96-461c-4386-af0c-6eb2682de7be": {"__data__": {"id_": "eed80f96-461c-4386-af0c-6eb2682de7be", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d93ee76e-26dd-460c-aac4-238384e2e80e", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "3945f6f53d2463fdff416db0eca1d21180608f8647407b0e909faa61f1509451", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b996b334-d3c4-4fef-a46b-e74bef7903df", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "260120060c105171d6e132ff72cb8a53ed79b6cf8b9a8c8db98d659a1fdf32f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11d98ef4-ee93-436e-ab13-2007cdb77cfc", "node_type": "1", "metadata": {}, "hash": "0fa6206227c1410bba4977e0326f48a841762808b73cce29b4dc939cafa6faa2", "class_name": "RelatedNodeInfo"}}, "text": "2.2 SR 210 Decoupling the Interpreter Loop David Ascher 2.1 SR 211 Adding A New Outer Product Operator Greg Wilson 2.1 SR 212 Loop Counter Iteration Peter Schneider-Kamp 2.1 SS 215 String Interpolation Ka-Ping Yee 2.1 IW 216 Docstring Format Moshe Zadka IR 220 Coroutines, Generators, Continuations Gordon McMillan SR 224 Attribute Docstrings Marc-Andr\u00e9 Lemburg 2.1 SR 225 Elementwise/Objectwise Operators Huaiyu Zhu, Gregory Lielens 2.1 SW 228 Reworking Python\u2019s Numeric Model Moshe Zadka, Guido van Rossum SR 231 __findattr__() Barry Warsaw 2.1 SR 239 Adding a Rational Type to Python Christopher A. Craig, Moshe Zadka 2.2 SR 240 Adding a Rational Literal to Python Christopher A. Craig, Moshe Zadka 2.2 SS 241 Metadata for Python Software Packages A.M. Kuchling SW 242 Numeric Kinds Paul F. Dubois 2.2 SW 243 Module Repository Upload Mechanism Sean Reifschneider 2.1 SR 244 The directive statement Martin von L\u00f6wis 2.1 SR 245 Python Interface Syntax Michel Pelletier 2.2 SR 246 Object Adaptation Alex Martelli, Clark C. Evans 2.5 SR 254 Making Classes Look More Like Types Guido van Rossum 2.2 SR 256 Docstring Processing System Framework David Goodger SR 258 Docutils Design Specification David Goodger SR 259 Omit printing newline after newline Guido van Rossum 2.2 SR 262 A Database of Installed Python Packages A.M. Kuchling SR 265 Sorting Dictionaries by Value Grant Griffin 2.2 SW 266 Optimizing Global Variable/Attribute Access Skip Montanaro 2.3 SR 268 Extended HTTP functionality and WebDAV Greg Stein 2.x SR 270 uniq method for list objects Jason Petrone 2.2 SR 271 Prefixing sys.path by command line option Fr\u00e9d\u00e9ric B. Giacometti 2.2 SR 275 Switching on Multiple Values Marc-Andr\u00e9 Lemburg 2.6 SR 276 Simple Iterator for ints Jim Althoff 2.3 SR 281 Loop Counter Iteration with range and xrange Magnus Lie Hetland 2.3 SR 284 Integer for-loops David Eppstein, Gregory Ewing 2.3 SW 288 Generators Attributes and Exceptions Raymond Hettinger 2.5 IS 291 Backward Compatibility for the Python 2 Standard Library Neal Norwitz 2.3 SR 294 Type Names in the types Module Oren Tirosh 2.5 SR 295 Interpretation of multiline string constants Stepan Koltsov 3.0 SW 296 Adding a bytes Object Type Scott Gilbert 2.3 SR 297 Support for System Upgrades Marc-Andr\u00e9 Lemburg 2.6 SW 298 The Locked Buffer Interface Thomas Heller 2.3 SR 299 Special __main__() function in modules Jeff Epler 2.3 SR 303 Extend divmod() for Multiple Divisors Thomas Bellman 2.3 SW 304 Controlling Generation of Bytecode Files Skip Montanaro IW 306 How to Change Python\u2019s Grammar Michael Hudson, Jack Diederich, Alyssa Coghlan, Benjamin Peterson SR 310 Reliable Acquisition/Release Pairs Michael Hudson, Paul Moore 2.4 SR 313 Adding Roman Numeral Literals to Python Mike Meyer 2.4 SS 314 Metadata for Python Software Packages 1.1 A.M. Kuchling, Richard Jones 2.5 SR 315 Enhanced While Loop Raymond Hettinger, W Isaac Carroll 2.5 SR 317 Eliminate Implicit Exception Instantiation Steven Taschuk 2.4 SR 319 Python Synchronize/Asynchronize Block Michel Pelletier 2.4 SW 321 Date/Time Parsing and Formatting A.M.", "start_char_idx": 0, "end_char_idx": 3078, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11d98ef4-ee93-436e-ab13-2007cdb77cfc": {"__data__": {"id_": "11d98ef4-ee93-436e-ab13-2007cdb77cfc", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d93ee76e-26dd-460c-aac4-238384e2e80e", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "3945f6f53d2463fdff416db0eca1d21180608f8647407b0e909faa61f1509451", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eed80f96-461c-4386-af0c-6eb2682de7be", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "1b2b40605bacb5862a41bc689316060f099b91b6cd8295a1ce02425e4a800069", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92492932-e6f8-4bef-aad6-0432c13c67e2", "node_type": "1", "metadata": {}, "hash": "da8712566aac74fbed9152254349c2d5b273a3e587978fba3f01b432f668dd0c", "class_name": "RelatedNodeInfo"}}, "text": "Kuchling, Richard Jones 2.5 SR 315 Enhanced While Loop Raymond Hettinger, W Isaac Carroll 2.5 SR 317 Eliminate Implicit Exception Instantiation Steven Taschuk 2.4 SR 319 Python Synchronize/Asynchronize Block Michel Pelletier 2.4 SW 321 Date/Time Parsing and Formatting A.M. Kuchling 2.4 SR 325 Resource-Release Support for Generators Samuele Pedroni 2.4 SR 326 A Case for Top and Bottom Values Josiah Carlson, Terry Reedy 2.4 SR 329 Treating Builtins as Constants in the Standard Library Raymond Hettinger 2.4 SR 330 Python Bytecode Verification Michel Pelletier 2.6 SR 332 Byte vectors and String/Unicode Unification Skip Montanaro 2.5 SW 334 Simple Coroutines via SuspendIteration Clark C. Evans 3.0 SR 335 Overloadable Boolean Operators Gregory Ewing 3.3 SR 336 Make None Callable Andrew McClelland IW 339 Design of the CPython Compiler Brett Cannon SR 340 Anonymous Block Statements Guido van Rossum SS 344 Exception Chaining and Embedded Tracebacks Ka-Ping Yee 2.5 SS 345 Metadata for Python Software Packages 1.2 Richard Jones 2.7 SW 346 User Defined (\u201cwith\u201d) Statements Alyssa Coghlan 2.5 SR 348 Exception Reorganization for Python 3.0 Brett Cannon SR 349 Allow str() to return unicode strings Neil Schemenauer 2.5 IR 350 Codetags Micah Elliott SR 351 The freeze protocol Barry Warsaw 2.5 SS 354 Enumerations in Python Ben Finney 2.6 SR 355 Path - Object oriented filesystem paths Bj\u00f6rn Lindqvist 2.5 SW 359 The \u201cmake\u201d Statement Steven Bethard 2.6 SR 363 Syntax For Dynamic Attribute Access Ben North SW 364 Transitioning to the Py3K Standard Library Barry Warsaw 2.6 SR 365 Adding the pkg_resources module Phillip J. Eby SS 367 New Super Calvin Spealman, Tim Delaney 2.6 SW 369 Post import hooks Christian Heimes 2.6, 3.0 SR 377 Allow __enter__() methods to skip the statement body Alyssa Coghlan 2.7, 3.1 SW 379 Adding an Assignment Expression Jervis Whitley 2.7, 3.2 SW 381 Mirroring infrastructure for PyPI Tarek Ziad\u00e9, Martin von L\u00f6wis SR 382 Namespace Packages Martin von L\u00f6wis 3.2 SS 386 Changing the version comparison module in Distutils Tarek Ziad\u00e9 SR 390 Static metadata for Distutils Tarek Ziad\u00e9 2.7, 3.2 SW 395 Qualified Names for Modules Alyssa Coghlan 3.4 IW 396 Module Version Numbers Barry Warsaw", "start_char_idx": 2805, "end_char_idx": 5025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92492932-e6f8-4bef-aad6-0432c13c67e2": {"__data__": {"id_": "92492932-e6f8-4bef-aad6-0432c13c67e2", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc0a671b-1618-4355-b357-9f3655fa79ce", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a313ca8557dae49b262aa22d8b0828c425461d7449ad128e3cc477c7226e93f2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11d98ef4-ee93-436e-ab13-2007cdb77cfc", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "ed6c1fb2392662c098ac53e615fa0ef9fbe18f99066dea089e3556dcc2b8e5f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "702a4c63-a2d9-42fc-9917-d2d1c6fceefd", "node_type": "1", "metadata": {}, "hash": "5fded412110c34532be6ac7647460c8379af97f99e92e05c03e83621bdbcfd79", "class_name": "RelatedNodeInfo"}}, "text": "PR 401 BDFL Retirement Barry Warsaw, Brett Cannon SR 402 Simplified Package Layout and Partitioning Phillip J. Eby 3.3 SW 406 Improved Encapsulation of Import State Alyssa Coghlan, Greg Slodkowicz 3.4 SR 408 Standard library __preview__ package Alyssa Coghlan, Eli Bendersky 3.3 SR 410 Use decimal.Decimal type for timestamps Victor Stinner 3.3 IS 411 Provisional packages in the Python standard library Alyssa Coghlan, Eli Bendersky 3.3 PW 413 Faster evolution of the Python Standard Library Alyssa Coghlan SR 416 Add a frozendict builtin type Victor Stinner 3.3 SW 422 Simpler customisation of class creation Alyssa Coghlan, Daniel Urban 3.5 IW 426 Metadata for Python Software Packages 2.0 Alyssa Coghlan, Daniel Holth, Donald Stufft SS 431 Time zone support improvements Lennart Regebro SW 432 Restructuring the CPython startup sequence Alyssa Coghlan, Victor Stinner, Eric Snow SS 433 Easier suppression of file descriptor inheritance Victor Stinner 3.4 SR 437 A DSL for specifying signatures, annotations and argument converters Stefan Krah 3.4 SR 439 Inclusion of implicit pip bootstrap in Python installation Richard Jones 3.4 SR 455 Adding a key-transforming dictionary to collections Antoine Pitrou 3.5 SW 459 Standard Metadata Extensions for Python Software Packages Alyssa Coghlan SW 460 Add binary interpolation and formatting Antoine Pitrou 3.5 PW 462 Core development workflow automation for CPython Alyssa Coghlan SR 463 Exception-catching expressions Chris Angelico 3.5 SW 469 Migration of dict iteration code to Python 3 Alyssa Coghlan 3.5 SR 472 Support for indexing with keyword arguments Stefano Borini, Joseph Martinot-Lagarde 3.6 SR 473 Adding structured data to built-in exceptions Sebastian Kreft PW 474 Creating forge.python.org Alyssa Coghlan PW 481 Migrate CPython to Git, Github, and Phabricator Donald Stufft SR 490 Chain exceptions at C level Victor Stinner 3.6 IR 496 Environment Markers James Polley PR 497 A standard mechanism for backward compatibility Ed Schofield SR 500 A protocol for delegating datetime methods to their tzinfo implementations Alexander Belopolsky, Tim Peters SW 501 General purpose template literal strings Alyssa Coghlan, Nick Humrich 3.12 IR 502 String Interpolation - Extended Discussion Mike G. Miller 3.6 SW 504 Using the System RNG by default Alyssa Coghlan 3.6 PR 507 Migrate CPython to Git and GitLab Barry Warsaw SS 509 Add a private version to dict Victor Stinner 3.6 SR 510 Specialize functions with guards Victor Stinner 3.6 SR 511 API for code transformers Victor Stinner 3.6 IS 513 A Platform Tag for Portable Linux Built Distributions Robert T. McGibbon, Nathaniel J. Smith SR 516 Build system abstraction for pip/conda etc Robert Collins, Nathaniel J. Smith SW 521 Managing global context via \u2018with\u2019 blocks in generators and coroutines Nathaniel J. Smith 3.6 SR 522 Allow BlockingIOError in security sensitive APIs Alyssa Coghlan, Nathaniel J. Smith 3.6 SW 531 Existence checking operators Alyssa Coghlan 3.7 SW 536 Final Grammar for Literal String Interpolation Philipp Angerer 3.7 SR 542 Dot Notation Assignment In Function Header Markus Meskanen SW 543 A Unified TLS API for Python Cory Benfield, Christian Heimes 3.7 SR 546 Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7 Victor Stinner, Cory Benfield 2.7 SR 548 More Flexible Loop Control R David Murray 3.7 SR 549 Instance Descriptors Larry Hastings 3.7 SW 550 Execution Context Yury Selivanov, Elvis Pranskevichus 3.7 IW 551 Security transparency in the Python runtime Steve Dower 3.7 SS 554 Multiple Interpreters in the Stdlib Eric Snow 3.13 SW 555 Context-local variables (contextvars) Koos Zevenhoven 3.7 SW 558 Defined semantics for locals() Alyssa Coghlan 3.13 SR 559 Built-in noop() Barry Warsaw 3.7 SS 563 Postponed Evaluation of Annotations \u0141ukasz Langa 3.7 IS 571 The manylinux2010 Platform Tag Mark Williams, Geoffrey Thomas, Thomas Kluyver SW 575 Unifying function/method classes Jeroen Demeyer 3.", "start_char_idx": 0, "end_char_idx": 3945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "702a4c63-a2d9-42fc-9917-d2d1c6fceefd": {"__data__": {"id_": "702a4c63-a2d9-42fc-9917-d2d1c6fceefd", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc0a671b-1618-4355-b357-9f3655fa79ce", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "a313ca8557dae49b262aa22d8b0828c425461d7449ad128e3cc477c7226e93f2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92492932-e6f8-4bef-aad6-0432c13c67e2", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "d9033bb6c154c710bc62dfa0cb795a5326733bd0632459bd50538b2a8d69bd99", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f55553d2-c76e-4d17-9b47-744da997cc89", "node_type": "1", "metadata": {}, "hash": "57dfec1f830cebfab7825a26fb5cc2b4b4b9feba45bad390fbb2993a6a4c4e6b", "class_name": "RelatedNodeInfo"}}, "text": "7 Victor Stinner, Cory Benfield 2.7 SR 548 More Flexible Loop Control R David Murray 3.7 SR 549 Instance Descriptors Larry Hastings 3.7 SW 550 Execution Context Yury Selivanov, Elvis Pranskevichus 3.7 IW 551 Security transparency in the Python runtime Steve Dower 3.7 SS 554 Multiple Interpreters in the Stdlib Eric Snow 3.13 SW 555 Context-local variables (contextvars) Koos Zevenhoven 3.7 SW 558 Defined semantics for locals() Alyssa Coghlan 3.13 SR 559 Built-in noop() Barry Warsaw 3.7 SS 563 Postponed Evaluation of Annotations \u0141ukasz Langa 3.7 IS 571 The manylinux2010 Platform Tag Mark Williams, Geoffrey Thomas, Thomas Kluyver SW 575 Unifying function/method classes Jeroen Demeyer 3.8 SW 576 Rationalize Built-in function classes Mark Shannon 3.8 SW 577 Augmented Assignment Expressions Alyssa Coghlan 3.8 SR 580 The C call protocol Jeroen Demeyer 3.8 SR 582 Python local packages directory Kushal Das, Steve Dower, Donald Stufft, Alyssa Coghlan 3.12 IW 583 A Concurrency Memory Model for Python Jeffrey Yasskin IW 595 Improving bugs.python.org Ezio Melotti, Berker Peksag IW 598 Introducing incremental feature releases Alyssa Coghlan 3.9 IS 599 The manylinux2014 Platform Tag Dustin Ingram SR 601 Forbid return/break/continue breaking out of finally Damien George, Batuhan Taskaya 3.8 IR 605 A rolling feature release stream for CPython Steve Dower, Alyssa Coghlan 3.9 SR 606 Python Compatibility Version Victor Stinner 3.9 SR 608 Coordinated Python release Miro Hron\u010dok, Victor Stinner 3.9 SW 611 The one million limit Mark Shannon SW 620 Hide implementation details from the C API Victor Stinner 3.12 SS 622 Structural Pattern Matching Brandt Bucher, Daniel F Moisset, Tobias Kohn, Ivan Levkivskyi, Guido van Rossum, Talin 3.10 SS 631 Dependency specification in pyproject.toml based on PEP 508 Ofek Lev SR 633 Dependency specification in pyproject.toml using an exploded TOML table Laurie Opperman, Arun Babu Neelicattu SR 637 Support for indexing with keyword arguments", "start_char_idx": 3254, "end_char_idx": 5237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f55553d2-c76e-4d17-9b47-744da997cc89": {"__data__": {"id_": "f55553d2-c76e-4d17-9b47-744da997cc89", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d971507c-638d-448a-8b92-f29b8ac01662", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd308122581d9cbcf01e15af08aa324ea498dac5ccaf4180c68ab9af10fe3e9e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "702a4c63-a2d9-42fc-9917-d2d1c6fceefd", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "2f850d375c91a8f7991372fae73b87351aa9aa939a7217dcc52f445d75287f0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96be2371-d6dc-4dea-acd4-9fc3d1ef0a30", "node_type": "1", "metadata": {}, "hash": "59a57aa8bab44175f74307da586056d1cdaf6b38b3b52a82910f1dbadc895de0", "class_name": "RelatedNodeInfo"}}, "text": "Stefano Borini 3.10 SR 640 Unused variable syntax Thomas Wouters 3.10 SR 641 Using an underscore in the version portion of Python 3.10 compatibility tags Brett Cannon, Steve Dower, Barry Warsaw 3.10 SR 642 Explicit Pattern Syntax for Structural Pattern Matching Alyssa Coghlan 3.10 SW 645 Allow writing optional types as x?", "start_char_idx": 0, "end_char_idx": 323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96be2371-d6dc-4dea-acd4-9fc3d1ef0a30": {"__data__": {"id_": "96be2371-d6dc-4dea-acd4-9fc3d1ef0a30", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d971507c-638d-448a-8b92-f29b8ac01662", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd308122581d9cbcf01e15af08aa324ea498dac5ccaf4180c68ab9af10fe3e9e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f55553d2-c76e-4d17-9b47-744da997cc89", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b7f69de2edfaba64e902a39aba3cd4a042e1d6e5847f058074f67ef61043a62a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2b33092-70c2-4ba5-854e-cbcd8bdee4a5", "node_type": "1", "metadata": {}, "hash": "22501dc48822f074533a5f0406c29471d112beb6de77807158d7a2328dd11222", "class_name": "RelatedNodeInfo"}}, "text": "Stefano Borini 3.10 SR 640 Unused variable syntax Thomas Wouters 3.10 SR 641 Using an underscore in the version portion of Python 3.10 compatibility tags Brett Cannon, Steve Dower, Barry Warsaw 3.10 SR 642 Explicit Pattern Syntax for Structural Pattern Matching Alyssa Coghlan 3.10 SW 645 Allow writing optional types as x? Maggie Moss SR 648 Extensible customizations of the interpreter at startup Mario Corchero 3.11 SW 650 Specifying Installer Requirements for Python Projects Vikram Jayanthi, Dustin Ingram, Brett Cannon SR 651 Robust Stack Overflow Handling Mark Shannon SR 662 Editable installs via virtual wheels Bern\u00e1t G\u00e1bor IR 663 Standardizing Enum str(), repr(), and format() behaviors Ethan Furman 3.11 SR 665 A file format to list Python dependencies for reproducibility of an application Brett Cannon, Pradyun Gedam, Tzu-ping Chung SR 666 Reject Foolish Indentation Laura Creighton 2.2 SR 677 Callable Type Syntax Steven Troxler, Pradeep Kumar Srinivasan 3.11 SR 690 Lazy Imports Germ\u00e1n M\u00e9ndez Bravo, Carl Meyer 3.12 SW 704 Require virtual environments by default for package installers Pradyun Gedam SR 707 A simplified signature for __exit__ and __aexit__ Irit Katriel 3.12 SR 712 Adding a \u201cconverter\u201d parameter to dataclasses.field Joshua Cannon 3.13 SR 713 Callable Modules Amethyst Reese 3.12 SR 722 Dependency specification for single-file scripts Paul Moore SW 724 Stricter Type Guards Rich Chiodo, Eric Traut, Erik De Bonte 3.13 SR 726 Module __setattr__ and __delattr__ Sergey B Kirpichev 3.13 SW 727 Documentation in Annotated Metadata Sebasti\u00e1n Ram\u00edrez 3.13 SR 736 Shorthand syntax for keyword arguments at invocation Joshua Bambrick, Chris Angelico 3.14 SR 754 IEEE 754 Floating Point Special Values Gregory R. Warnes 2.3 SW 756 Add PyUnicode_Export() and PyUnicode_Import() C functions Victor Stinner 3.14 SW 759 External Wheel Hosting Barry Warsaw, Emma Harper Smith SW 760 No More Bare Excepts Pablo Galindo, Brett Cannon 3.14 SW 775 Make zlib required to build CPython Gregory P. Smith, Stan Ulbrych, Petr Viktorin 3.14 PR 2026 Calendar versioning for Python Hugo van Kemenade 3.26 PW 3001 Procedure for reviewing and improving standard library modules Georg Brandl SR 3103 A Switch/Case Statement Guido van Rossum 3.0 SR 3117 Postfix type declarations Georg Brandl 3.0 SR 3122 Delineation of the main module Brett Cannon SR 3125 Remove Backslash Continuation Jim J. Jewett SR 3126 Remove Implicit String Concatenation Jim J. Jewett, Raymond Hettinger SR 3128 BList: A Faster List-like Type Daniel Stutzbach 2.6, 3.0 SR 3130 Access to Current Module/Class/Function Jim J. Jewett 3.0 SR 3133 Introducing Roles Collin Winter 3.0 SR 3136 Labeled break and continue Matt Chisholm 3.1 SR 3139 Cleaning out sys and the \u201cinterpreter\u201d module Benjamin Peterson 3.0 SR 3140 str(container) should call str(item), not repr(item) Oleg Broytman, Jim J. Jewett SR 3142 Add a \u201cwhile\u201d clause to generator expressions Gerald Britton 3.0 SW 3145 Asynchronous I/O For subprocess.Popen Eric Pruitt, Charles R. McCreary, Josiah Carlson 3.2 SW 3146 Merging Unladen Swallow into CPython Collin Winter, Jeffrey Yasskin, Reid Kleckner 3.3 SR 3152 Cofunctions Gregory Ewing 3.3 SS 3153 Asynchronous IO support Laurens Van Houtven IR 8010 The Technical Leader Governance Model Barry Warsaw IR 8011 Python Governance Model Lead by Trio of Pythonistas Mariatta, Barry Warsaw IR 8012 The Community Governance Model \u0141ukasz Langa IR 8013 The External Council Governance Model Steve Dower IR 8014 The Commons Governance Model Jack Jansen IR 8015 Organization of the Python community Victor Stinner Reserved PEP Numbers PEP Title Authors 801 RESERVED Warsaw PEP Types Key I \u2014 Informational : Non-normative PEP containing background, guidelines or other information relevant to the Python ecosystem P \u2014 Process : Normative PEP describing or proposing a change to a Python community process, workflow or governance S \u2014 Standards Track : Normative PEP with a new feature for Python, implementation change for CPython or interoperability standard for the ecosystem More info in PEP 1 .", "start_char_idx": 0, "end_char_idx": 4076, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2b33092-70c2-4ba5-854e-cbcd8bdee4a5": {"__data__": {"id_": "e2b33092-70c2-4ba5-854e-cbcd8bdee4a5", "embedding": null, "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d971507c-638d-448a-8b92-f29b8ac01662", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "cd308122581d9cbcf01e15af08aa324ea498dac5ccaf4180c68ab9af10fe3e9e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96be2371-d6dc-4dea-acd4-9fc3d1ef0a30", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "6e8dacf6321b33638ddc2284082215efe94fec09f4884e8b587a406cb73ee13d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e073011d-9cb5-4948-a618-4284719defb4", "node_type": "1", "metadata": {}, "hash": "d52520c7c05b323093fe8ed2f56c31387b0bb5538877403910a3134abc53354c", "class_name": "RelatedNodeInfo"}}, "text": "PEP Status Key A \u2014 Accepted : Normative proposal accepted for implementation A \u2014 Active : Currently valid informational guidance, or an in-use process D \u2014 Deferred : Inactive draft that may be taken up again at a later time <No letter> \u2014 Draft : Proposal under active discussion and revision F \u2014 Final : Accepted and implementation complete, or no longer active P \u2014 Provisional : Provisionally accepted but additional feedback needed R \u2014 Rejected : Formally declined and will not be accepted S \u2014 Superseded : Replaced by another succeeding PEP W \u2014 Withdrawn : Removed from consideration by sponsor or authors More info in PEP 1 . Authors/Owners Name Email Address A.M. Kuchling amk at amk.ca Aahz aahz at pythoncraft.com Adam Turner python at quite.org.uk Adrian Garcia Badaracco adrian at adriangb.com Alex Gaynor alex.gaynor at gmail.com Alex Martelli aleaxit at gmail.com Alexander Belopolsky alexander.belopolsky at gmail.com Alexandre Vassalotti alexandre at peadrop.com Alexis Challande alexis.challande at trailofbits.com Alice Purcell alicederyn at gmail.com Alyssa Coghlan ncoghlan at gmail.com", "start_char_idx": 4077, "end_char_idx": 5180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e073011d-9cb5-4948-a618-4284719defb4": {"__data__": {"id_": "e073011d-9cb5-4948-a618-4284719defb4", "embedding": null, "metadata": {"file_path": "docs\\python\\www.pythoncheatsheet.org_39_0.txt", "file_name": "www.pythoncheatsheet.org_39_0.txt", "file_type": "text/plain", "file_size": 907, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bb0c0e2-4d01-48db-968e-91e6fdca5c8f", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.pythoncheatsheet.org_39_0.txt", "file_name": "www.pythoncheatsheet.org_39_0.txt", "file_type": "text/plain", "file_size": 907, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "38a9162913e732643b103d1b80ce6792ba858d60791c810ef5aec397ab147e82", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2b33092-70c2-4ba5-854e-cbcd8bdee4a5", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0e327f5a0ea0ff7e0766887cb7510fa5371b477c994b4176da26ed2937c0ffc3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc388c01-d4e4-4d9b-b305-55fa141768d4", "node_type": "1", "metadata": {}, "hash": "8896e1ef31c0fc53130b4cdf31bd8ba2c6bc5402e0648ee0a6c6c16e2ce5c84a", "class_name": "RelatedNodeInfo"}}, "text": "Python Cheatsheet - Python Cheatsheet Python Cheatsheet Based on the book Automate the Boring Stuff with Python and many other sources. Subscribe to pythoncheatsheet.org Join 14,100+ Python developers in a two times a month and bullshit free publication , full of interesting, relevant links. View on GitHub Drop a star on GitHub if you find this project useful. Contribute Get to know how easy it is to contribute to the Python Cheatsheet. Blog Read detailed articles about Python and it's ecosystem. Changelog See what is new, what got fixed, and what is coming. Getting started Anyone can forget how to make character classes for a regex, slice a list or do a for loop . This Python cheatsheet tries to provide basic reference for beginner and advanced developers, lower the entry barrier for newcomers and help veterans refresh the old tricks. Contributors Previous page Changelog Next page Contributing", "start_char_idx": 0, "end_char_idx": 907, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc388c01-d4e4-4d9b-b305-55fa141768d4": {"__data__": {"id_": "bc388c01-d4e4-4d9b-b305-55fa141768d4", "embedding": null, "metadata": {"file_path": "docs\\python\\www.pythonforbeginners.com_12_0.txt", "file_name": "www.pythonforbeginners.com_12_0.txt", "file_type": "text/plain", "file_size": 2393, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e84f2b0a-23e4-4770-8a83-9a10fbb027c8", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.pythonforbeginners.com_12_0.txt", "file_name": "www.pythonforbeginners.com_12_0.txt", "file_type": "text/plain", "file_size": 2393, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "de3e45fb0c84834c4935804539a6a7b10d7fef15f7ddb19e1d1de16128b1c82c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e073011d-9cb5-4948-a618-4284719defb4", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.pythoncheatsheet.org_39_0.txt", "file_name": "www.pythoncheatsheet.org_39_0.txt", "file_type": "text/plain", "file_size": 907, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "38a9162913e732643b103d1b80ce6792ba858d60791c810ef5aec397ab147e82", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7b912e5-1be7-46c0-b791-cbb28481df38", "node_type": "1", "metadata": {}, "hash": "e73eb0eeb56d186af3f266a28a8a97cbc19a7dea36b993fe39985aa20f79939e", "class_name": "RelatedNodeInfo"}}, "text": "Learn Python By Example - PythonForBeginners.com Skip to primary navigation Skip to main content Learn Python By Example PythonForBeginners.com offers free content for those looking to learn the Python programming language. We offer a free Python Tutorial with over 4,000 words of content to help cover all the basics. In addition, we offer an email newsletter that provides more tips and tricks to solve your programming objectives as well as instructor led courses. Start Here! Free Python Tutorial For Beginners Are you new to Python? Our free Python Tutorial will get you started on the path to becoming a Python developer! 4,000 words 19 Topics Perfect for the beginner Review examples Course: Python 3 For Beginners $9.95 Do you want to be a Python programmer?Start learning now with our instructor led course. Over 13 hours of video 70 Lessons Beginner to Advanced Topics Write working programs Popular Python Tutorials Reading and Writing Files in Python String Concatenation and Formatting in Python List Comprehensions in Python Python For, While and Nested Loops How To Use Dictionaries in Python Working with the Python Super Function Python Sys.argv Python Code Examples Python Split Web Scraping with BeautifulSoup Error Handling: Python Try and Except Getting User Input from the Keyboard Categories Loops Regular Expressions Python Games Basics Functions Code Examples Strings Dictionaries Python on the Web Lists Modules Python Comments Latest Content Our recent python blog posts covering python development, python examples and much more Missing values in tabular data are a common problem. When we load tabular data with missing values into a pyspark dataframe, the empty values are\u2026 Continue Reading Count Rows With Null Values in PySpark While working with pyspark dataframes, we often need to order the rows according to one or multiple columns. In this article, we will discuss different\u2026 Continue Reading PySpark OrderBy One or Multiple Columns Missing values in tabular data are a common problem. When we load tabular data with missing values into a pyspark dataframe, the empty values are\u2026 Continue Reading Select Rows with Null values in PySpark While handling data in pyspark, we often need to find the count of distinct values in one or multiple columns in a pyspark dataframe. In\u2026 Continue Reading PySpark Count Distinct Values in One or Multiple Columns", "start_char_idx": 0, "end_char_idx": 2385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7b912e5-1be7-46c0-b791-cbb28481df38": {"__data__": {"id_": "f7b912e5-1be7-46c0-b791-cbb28481df38", "embedding": null, "metadata": {"file_path": "docs\\python\\www.tensorflow.org_47_0.txt", "file_name": "www.tensorflow.org_47_0.txt", "file_type": "text/plain", "file_size": 4198, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4dc8719-f6c9-4c98-9be7-2eaa551bb010", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.tensorflow.org_47_0.txt", "file_name": "www.tensorflow.org_47_0.txt", "file_type": "text/plain", "file_size": 4198, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "de80ad9ce8a21fa3f7e381114adeb81d3390935bd1d6764154f4daeb6f4f9f09", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc388c01-d4e4-4d9b-b305-55fa141768d4", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.pythonforbeginners.com_12_0.txt", "file_name": "www.pythonforbeginners.com_12_0.txt", "file_type": "text/plain", "file_size": 2393, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "de3e45fb0c84834c4935804539a6a7b10d7fef15f7ddb19e1d1de16128b1c82c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59c6c403-c7bf-4ead-8650-59dbf0b21481", "node_type": "1", "metadata": {}, "hash": "3e3fefef3587431067652a318411502c039ec6479de3eceab317f4f8043119dc", "class_name": "RelatedNodeInfo"}}, "text": "Tutorials | TensorFlow Core Skip to main content English Espa\u00f1ol \u2013 Am\u00e9rica Latina Fran\u00e7ais Indonesia Italiano Polski Portugu\u00eas \u2013 Brasil Ti\u00ea\u0301ng Vi\u00ea\u0323t T\u00fcrk\u00e7e \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u05e2\u05d1\u05e8\u05d9\u05ea \u0627\u0644\u0639\u0631\u0628\u064a\u0651\u0629 \u0641\u0627\u0631\u0633\u06cc \u0939\u093f\u0902\u0926\u0940 \u09ac\u09be\u0982\u09b2\u09be \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 \u4e2d\u6587 \u2013 \u7b80\u4f53 \u4e2d\u6587 \u2013 \u7e41\u9ad4 \u65e5\u672c\u8a9e \ud55c\uad6d\uc5b4 GitHub Sign in TensorFlow Core An open source machine learning library for research and production. TensorFlow Learn TensorFlow Core Stay organized with collections Save and categorize content based on your preferences. The TensorFlow tutorials are written as Jupyter notebooks and run directly in Google Colab\u2014a hosted notebook environment that requires no setup. At the top of each tutorial, you'll see a Run in Google Colab button. Click the button to open the notebook and run the code yourself. For beginners The best place to start is with the user-friendly Keras sequential API. Build models by plugging together building blocks. After these tutorials, read the Keras guide . Beginner quickstart This \"Hello, World!\" notebook shows the Keras Sequential API and model.fit . Keras basics This notebook collection demonstrates basic machine learning tasks using Keras. Load data These tutorials use tf.data to load various data formats and build input pipelines. For experts The Keras functional and subclassing APIs provide a define-by-run interface for customization and advanced research. Build your model, then write the forward and backward pass. Create custom layers, activations, and training loops. Advanced quickstart This \"Hello, World!\" notebook uses the Keras subclassing API and a custom training loop. Customization This notebook collection shows how to build custom layers and training loops in TensorFlow. Distributed training Distribute your model training across multiple GPUs, multiple machines or TPUs. The Advanced section has many instructive notebooks examples, including Neural machine translation , Transformers , and CycleGAN . Video tutorials Check out these videos for an introduction to machine learning with TensorFlow: TensorFlow ML Zero to Hero Basic Computer Vision with ML Libraries and extensions Explore libraries to build advanced models or methods using TensorFlow, and access domain-specific application packages that extend TensorFlow. This is a sample of the tutorials available for these projects. chevron_right TensorBoard Get started with TensorBoard Logging training metrics in Keras chevron_right TensorFlow Hub Object detection Arbitrary style transfer chevron_right Model Optimization Magnitude-based weight pruning with Keras Post-training quantization chevron_right TensorFlow Federated Federated learning for image classification Federated learning for text generation chevron_right Neural Structured Learning Natural graph regularization for document classification Synthetic graph regularization for sentiment classification chevron_right TensorFlow Graphics Object pose alignment Mesh segmentation chevron_right SIG Addons Image operations in TensorFlow Addons Normalization layers in TensorFlow Addons. chevron_right TFX TFX developer tutorial Serve a model with TensorFlow Serving chevron_right Datasets Using TensorFlow Datasets chevron_right Probability TensorFlow distributions introduction Probabilistic regression chevron_right XLA Classifying CIFAR-10 with XLA Use XLA with tf.function chevron_right Decision Forests Train a decision forest model Use text and NN features with decision forests chevron_right TensorFlow Agents Train a deep-Q network with TF Agents Reinforcement learning environments chevron_right TensorFlow Ranking TF-Ranking Keras user guide TF Ranking for sparse features chevron_right Magenta Generating Piano music with Transformer GANSynth TensorFlow updates Subscribe to the TensorFlow blog , YouTube channel , and Twitter for the latest updates. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates. Last updated 2023-09-19 UTC.", "start_char_idx": 0, "end_char_idx": 4091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59c6c403-c7bf-4ead-8650-59dbf0b21481": {"__data__": {"id_": "59c6c403-c7bf-4ead-8650-59dbf0b21481", "embedding": null, "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_0.txt", "file_name": "www.tutorialspoint.com_5_0.txt", "file_type": "text/plain", "file_size": 4984, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f55fe5f0-9ada-41bb-8c41-348cc954ac47", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_0.txt", "file_name": "www.tutorialspoint.com_5_0.txt", "file_type": "text/plain", "file_size": 4984, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0c3ee465dbab3e57a2f199f166fb1208f13276ae5abb36e5727aad95634c7950", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7b912e5-1be7-46c0-b791-cbb28481df38", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.tensorflow.org_47_0.txt", "file_name": "www.tensorflow.org_47_0.txt", "file_type": "text/plain", "file_size": 4198, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "de80ad9ce8a21fa3f7e381114adeb81d3390935bd1d6764154f4daeb6f4f9f09", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b21d430a-50a9-484a-8d5e-ca8edf5e2dca", "node_type": "1", "metadata": {}, "hash": "aea11bc570bffb02846196e7b4221c819e71ead4fd03fc98ecc264734831e053", "class_name": "RelatedNodeInfo"}}, "text": "Python Tutorial Python - Home Python - Overview Python - History Python - Features Python vs C++ Python - Hello World Program Python - Application Areas Python - Interpreter Python - Environment Setup Python - Virtual Environment Python - Basic Syntax Python - Variables Python - Data Types Python - Type Casting Python - Unicode System Python - Literals Python - Operators Python - Arithmetic Operators Python - Comparison Operators Python - Assignment Operators Python - Logical Operators Python - Bitwise Operators Python - Membership Operators Python - Identity Operators Python - Operator Precedence Python - Comments Python - User Input Python - Numbers Python - Booleans Python - Control Flow Python - Decision Making Python - If Statement Python - If else Python - Nested If Python - Match-Case Statement Python - Loops Python - for Loops Python - for-else Loops Python - While Loops Python - break Statement Python - continue Statement Python - pass Statement Python - Nested Loops Python Functions & Modules Python - Functions Python - Default Arguments Python - Keyword Arguments Python - Keyword-Only Arguments Python - Positional Arguments Python - Positional-Only Arguments Python - Arbitrary Arguments Python - Variables Scope Python - Function Annotations Python - Modules Python - Built in Functions Python Strings Python - Strings Python - Slicing Strings Python - Modify Strings Python - String Concatenation Python - String Formatting Python - Escape Characters Python - String Methods Python - String Exercises Python Lists Python - Lists Python - Access List Items Python - Change List Items Python - Add List Items Python - Remove List Items Python - Loop Lists Python - List Comprehension Python - Sort Lists Python - Copy Lists Python - Join Lists Python - List Methods Python - List Exercises Python Tuples Python - Tuples Python - Access Tuple Items Python - Update Tuples Python - Unpack Tuples Python - Loop Tuples Python - Join Tuples Python - Tuple Methods Python - Tuple Exercises Python Sets Python - Sets Python - Access Set Items Python - Add Set Items Python - Remove Set Items Python - Loop Sets Python - Join Sets Python - Copy Sets Python - Set Operators Python - Set Methods Python - Set Exercises Python Dictionaries Python - Dictionaries Python - Access Dictionary Items Python - Change Dictionary Items Python - Add Dictionary Items Python - Remove Dictionary Items Python - Dictionary View Objects Python - Loop Dictionaries Python - Copy Dictionaries Python - Nested Dictionaries Python - Dictionary Methods Python - Dictionary Exercises Python Arrays Python - Arrays Python - Access Array Items Python - Add Array Items Python - Remove Array Items Python - Loop Arrays Python - Copy Arrays Python - Reverse Arrays Python - Sort Arrays Python - Join Arrays Python - Array Methods Python - Array Exercises Python File Handling Python - File Handling Python - Write to File Python - Read Files Python - Renaming and Deleting Files Python - Directories Python - File Methods Python - OS File/Directory Methods Python - OS Path Methods Object Oriented Programming Python - OOPs Concepts Python - Classes & Objects Python - Class Attributes Python - Class Methods Python - Static Methods Python - Constructors Python - Access Modifiers Python - Inheritance Python - Polymorphism Python - Method Overriding Python - Method Overloading Python - Dynamic Binding Python - Dynamic Typing Python - Abstraction Python - Encapsulation Python - Interfaces Python - Packages Python - Inner Classes Python - Anonymous Class and Objects Python - Singleton Class Python - Wrapper Classes Python - Enums Python - Reflection Python Errors & Exceptions Python - Syntax Errors Python - Exceptions Python - try-except Block Python - try-finally Block Python - Raising Exceptions Python - Exception Chaining Python - Nested try Block Python - User-defined Exception Python - Logging Python - Assertions Python - Built-in Exceptions Python Multithreading Python - Multithreading Python - Thread Life Cycle Python - Creating a Thread Python - Starting a Thread Python - Joining Threads Python - Naming Thread Python - Thread Scheduling Python - Thread Pools Python - Main Thread Python - Thread Priority Python - Daemon Threads Python - Synchronizing Threads Python Synchronization Python - Inter-thread Communication Python - Thread Deadlock Python - Interrupting a Thread Python Networking Python - Networking Python - Socket Programming Python - URL Processing Python - Generics Python Libraries NumPy Tutorial Pandas Tutorial SciPy Tutorial Matplotlib Tutorial Django Tutorial OpenCV Tutorial Python Miscellenous Python - Date & Time Python - Maths Python - Iterators Python - Generators Python - Closures Python - Decorators Python - Recursion Python - Reg Expressions Python - PIP Python - Database Access Python - Weak References Python - Serialization Python - Templating Python - Output Formatting Python - Performance Measurement Python - Data Compression", "start_char_idx": 0, "end_char_idx": 4984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b21d430a-50a9-484a-8d5e-ca8edf5e2dca": {"__data__": {"id_": "b21d430a-50a9-484a-8d5e-ca8edf5e2dca", "embedding": null, "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_1.txt", "file_name": "www.tutorialspoint.com_5_1.txt", "file_type": "text/plain", "file_size": 5269, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc6a9f90-1aa9-48a3-94b1-7d0e413126e6", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_1.txt", "file_name": "www.tutorialspoint.com_5_1.txt", "file_type": "text/plain", "file_size": 5269, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b77335efa133c1b03b4c204d57fdd830b6d143bd6194c6b198ab0d145820395f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59c6c403-c7bf-4ead-8650-59dbf0b21481", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_0.txt", "file_name": "www.tutorialspoint.com_5_0.txt", "file_type": "text/plain", "file_size": 4984, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "0c3ee465dbab3e57a2f199f166fb1208f13276ae5abb36e5727aad95634c7950", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "01b05f41-3a77-48b0-82e7-93e4b7876d24", "node_type": "1", "metadata": {}, "hash": "ff4424b0f6d627ed43a7972d3a09835e1f95e0eeb198ff0b95145b0c737ebfdb", "class_name": "RelatedNodeInfo"}}, "text": "Python - CGI Programming Python - XML Processing Python - GUI Programming Python - Command-Line Arguments Python - Docstrings Python - JSON Python - Sending Email Python - Further Extensions Python - Tools/Utilities Python - GUIs Python Advanced Concepts Python - Abstract Base Classes Python - Custom Exceptions Python - Higher Order Functions Python - Object Internals Python - Memory Management Python - Metaclasses Python - Metaprogramming with Metaclasses Python - Mocking and Stubbing Python - Monkey Patching Python - Signal Handling Python - Type Hints Python - Automation Tutorial Python - Humanize Package Python - Context Managers Python - Coroutines Python - Descriptors Python - Diagnosing and Fixing Memory Leaks Python - Immutable Data Structures Python Useful Resources Python - Questions & Answers Python - Interview Questions & Answers Python - Online Quiz Python - Quick Guide Python - Reference Python - Cheatsheet Python - Projects Python - Useful Resources Python - Discussion Python Compiler NumPy Compiler Matplotlib Compiler SciPy Compiler Selected Reading UPSC IAS Exams Notes Developer's Best Practices Questions and Answers Effective Resume Writing AI Based Resume Builder Personal AI Study Assistant Generate Coding Logic HR Interview Questions Computer Glossary Who is Who Python Tutorial Python Introduction What is Python Python \"Hello, World!\" Python Compiler Python Characteristics Applications of Python Features of Python Python Database Handling Python Reference Python Practice Python Exercises Python Jobs Why to Learn Python Careers with Python Download Python Python Updates Python Audiences Python Prerequisites Python Questions & Answers Python Tutorial Today, Python is one of the most popular programming languages. Although it is a general-purpose language, it is used in various areas of applications such as Machine Learning, Artificial Intelligence, web development, IoT, and more. This Python tutorial has been written for the beginners to help them understand the basic to advanced concepts of Python Programming Language. After completing this tutorial, you will find yourself at a great level of expertise in Python, from where you can take yourself to the next levels to become a world class Software Engineer. This Python tutorial is based on the latest Python 3.13 version. What is Python? Python is a very popular general-purpose interpreted, interactive, object-oriented, and high-level programming language. Python is dynamically-typed and garbage-collected programming language. It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under the GNU General Public License (GPL). Python supports multiple programming paradigms, including Procedural, Object Oriented and Functional programming language. Python design philosophy emphasizes code readability with the use of significant indentation. This Python tutorial gives a complete understanding of Python programming language, starting from basic concepts to advanced concepts. This tutorial will take you through simple and practical approaches while learning Python Programming language. Python \"Hello, World!\" To start with Python programming, the very basic program is to print \"Hello, World!\" You can use the print() function . Below is an example of Python code to print \"Hello, World!\" \u2212 # Python code to print \"Hello, World!\" print (\"Hello, World!\") Python Online Compiler Our Python programming tutorial provides various examples to explain different concepts. We have provided Online Python Compiler/Interpreter . You can Edit and Execute almost all the examples directly from your browser without the need to set up your development environment. Try to click the icon to run the following Python code to print conventional \"Hello, World!\". Below code box allows you to change the value of the code. Try to change the value inside print() and run it again to verify the result. # This is my first Python program. # This will print 'Hello, World!' as the output print (\"Hello, World!\"); Characteristics of Python Following are important characteristics of Python Programming \u2212 It supports functional and structured programming methods as well as OOP . It can be used as a scripting language or can be compiled to byte-code for building large applications. It provides very high-level dynamic data types and supports dynamic type checking. It supports automatic garbage collection. It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java. Applications of Python Python is a general purpose programming language known for its readability. It is widely applied in various fields. In Data Science , Python libraries like Numpy , Pandas , and Matplotlib are used for data analysis and visualization. Python frameworks like Django , and Pyramid , make the development and deployment of Web Applications easy. This programming language also extends its applications to computer vision and image processing. It is also favored in many tasks like Automation , Job Scheduling, GUI development , etc. Features of Python The latest release of Python is 3.x. As mentioned before, Python is one of the most widely used languages on the web. I'm going to list a few of them here: Easy-to-learn \u2212", "start_char_idx": 0, "end_char_idx": 5263, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01b05f41-3a77-48b0-82e7-93e4b7876d24": {"__data__": {"id_": "01b05f41-3a77-48b0-82e7-93e4b7876d24", "embedding": null, "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_2.txt", "file_name": "www.tutorialspoint.com_5_2.txt", "file_type": "text/plain", "file_size": 5123, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1de701fb-4a0b-4e5c-9cac-5a575e7b2de1", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_2.txt", "file_name": "www.tutorialspoint.com_5_2.txt", "file_type": "text/plain", "file_size": 5123, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b594bd9f2c8c1f86e80d0a257b7472ac88721cb17c2bbb1583308b437afac57f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b21d430a-50a9-484a-8d5e-ca8edf5e2dca", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_1.txt", "file_name": "www.tutorialspoint.com_5_1.txt", "file_type": "text/plain", "file_size": 5269, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b77335efa133c1b03b4c204d57fdd830b6d143bd6194c6b198ab0d145820395f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7b56209-d4a7-43d4-b133-74c488a8d4c6", "node_type": "1", "metadata": {}, "hash": "d6420200400924da0ebb6bd9defe107b7bf5e1bcb7905eb20f48917328849770", "class_name": "RelatedNodeInfo"}}, "text": "Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly. Easy-to-read \u2212 Python code is more clearly defined and visible to the eyes. Easy-to-maintain \u2212 Python's source code is fairly easy-to-maintain. A broad standard library \u2212 Python's bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh. Interactive Mode \u2212 Python has support for an interactive mode that allows interactive testing and debugging of snippets of code. Portable \u2212 Python can run on a wide variety of hardware platforms and has the same interface on all platforms. Extendable \u2212 You can add low-level modules to the Python interpreter . These modules enable programmers to add to or customize their tools to be more efficient. Databases \u2212 Python provides interfaces to all major commercial databases. GUI Programming \u2212 Python supports GUI applications that can be created and ported to many system calls, libraries, and Windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix. Scalable \u2212 Python provides a better structure and support for large programs than shell scripting. Python Database Handling The following tutorials will help you learn how to work with different databases using Python programming: Python MongoDB Tutorial Python MySQL Tutorial Python PostgreSQL Tutorial Python SQLite Tutorial Python Reference The complete function and method references \u2212 Python Complete Reference Python Built-in Functions Reference Python Modules Reference Python Keywords Reference Python Cheatsheet Python Practice Practice Python from the below-given links: Python Quick Guide Python Online Quiz Python Interview Questions & Answers Python Exercises You can practice various Python topics with the help of examples provided: String Exercises List Exercises Tuple Exercises Set Exercises Dictionary Exercises Array Exercises Python Jobs Today, Python is very high in demand, and all the major companies are looking for great Python programmers to develop websites, software components, and applications or to work with data science, AI, and ML technologies. When we are developing this tutorial in 2022, there is a high shortage of Python programmers, where the market demands a greater number of Python programmers due to its applications in machine learning, artificial intelligence, etc. Today, a Python programmer with 3-5 years of experience is asking for around $150,000 in an in an annual package, and this is the most demanding programming language in America. Though it can vary depending on the location of the job. It's impossible to list all of the companies using Python, to name a few big companies are: Google Intel NASA PayPal Facebook IBM Amazon Netflix Pinterest Uber Many more... So, you could be the next potential employee for any of these major companies. We have developed great learning material for you to learn Python programming, which will help you prepare for the technical interviews and certification exams based on Python. So, start learning Python using this simple and effective tutorial from anywhere and anytime, absolutely at your pace. Why to Learn Python? Python is consistently rated as one of the world's most popular programming languages. Python is fairly easy to learn, so if you are starting to learn any programming language, then Python could be your great choice. Today, various schools, colleges, and universities are teaching Python as their primary programming language. There are many other good reasons that make Python the top choice of any programmer: Python is open source, which means it's available free of cost. Python is simple and so easy to learn. Python is versatile and can be used to create many different things. Python has powerful development libraries, including AI, ML, etc. Python is much in demand and ensures a high salary. Python is a MUST for students and working professionals to become great software engineers, especially when they are working in the web development domain. I will list down some of the key advantages of learning Python: Python is Interpreted \u2212 Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP. Python is Interactive \u2212 You can actually sit at a Python prompt and interact with the interpreter directly to write your programs. Python is Object-Oriented \u2212 Python supports Object-Oriented style or technique of programming that encapsulates code within objects. Python is a Beginner's Language \u2212 Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games. Careers with Python If you know Python nicely, then you have a great career ahead. Here are just a few of the career options where Python is a key skill: Game developer Web designer Python developer Full-stack developer Machine learning engineer Data scientist Data analyst Data engineer DevOps engineer Software engineer Many", "start_char_idx": 0, "end_char_idx": 5095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7b56209-d4a7-43d4-b133-74c488a8d4c6": {"__data__": {"id_": "c7b56209-d4a7-43d4-b133-74c488a8d4c6", "embedding": null, "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_3.txt", "file_name": "www.tutorialspoint.com_5_3.txt", "file_type": "text/plain", "file_size": 1199, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a91b38b1-5bbc-4741-836c-792c49037ef6", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_3.txt", "file_name": "www.tutorialspoint.com_5_3.txt", "file_type": "text/plain", "file_size": 1199, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bb25b9f081beac5591d9521c95f5e5d7adb48a84373a2792bd3df46b4056fa7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "01b05f41-3a77-48b0-82e7-93e4b7876d24", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_2.txt", "file_name": "www.tutorialspoint.com_5_2.txt", "file_type": "text/plain", "file_size": 5123, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "b594bd9f2c8c1f86e80d0a257b7472ac88721cb17c2bbb1583308b437afac57f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1320bb9-1c0f-4293-b1a9-8ecc8a1201c5", "node_type": "1", "metadata": {}, "hash": "b050a3ebdf036bad70cc119ce9de9c5327cfe4d4e9b05a5e5e212160c5768e61", "class_name": "RelatedNodeInfo"}}, "text": "more other roles Download Python You can download Python from its official website: https://www.python.org/downloads/ Python Updates & New Features The current stable version of Python is 3.13, which was released on October 7, 2024. Python 3.14 is still in the development phase with many new features and changes: PEP 649 : Deferred evaluation of annotations. PEP 741 : Python configuration C API. PEP 761 : Sigstore replaces PGP signatures for verification. Improved error messages. Target Audience: Who Can Learn Python? This tutorial has been prepared for the beginners to help them understand the basics to advanced concepts of Python programming language. After completing this tutorial, you will find yourself at a great level of expertise in Python programming, from where you can take yourself to the next levels. Prerequisites to Learn Python Although it is a beginners tutorial, we assume that the readers have a reasonable exposure to any programming environment and knowledge of basic concepts such as variables, commands, syntax, etc. Python Questions & Answers You can explore a set of Python Questions and Answers at Python Questions & Answers Print Page Previous Next Advertisements", "start_char_idx": 0, "end_char_idx": 1199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1320bb9-1c0f-4293-b1a9-8ecc8a1201c5": {"__data__": {"id_": "e1320bb9-1c0f-4293-b1a9-8ecc8a1201c5", "embedding": null, "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_0.txt", "file_name": "www.w3schools.com_9_0.txt", "file_type": "text/plain", "file_size": 5473, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18e4b820-2746-40d8-92bc-cff9e8885d3d", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_0.txt", "file_name": "www.w3schools.com_9_0.txt", "file_type": "text/plain", "file_size": 5473, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f2891beadb5bdca69da54070f00afdf9b23a5389f728435e6a56695c852ded59", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7b56209-d4a7-43d4-b133-74c488a8d4c6", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_3.txt", "file_name": "www.tutorialspoint.com_5_3.txt", "file_type": "text/plain", "file_size": 1199, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "bb25b9f081beac5591d9521c95f5e5d7adb48a84373a2792bd3df46b4056fa7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f0cf30fe-9306-4ca9-aac1-faa80912d8c6", "node_type": "1", "metadata": {}, "hash": "975415eb00b3f107c24ba38b4c1bb7c630bb2e71af0a312f0717c61a88cb8cdd", "class_name": "RelatedNodeInfo"}}, "text": "Python Tutorial Menu Search field \u00d7 \ue80b Sign In \u2605 +1 Get Certified For Teachers Spaces Plus Get Certified For Teachers Spaces Plus \u276e \u276f HTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS DSA TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AI R GO KOTLIN SASS VUE GEN AI SCIPY CYBERSECURITY DATA SCIENCE INTRO TO PROGRAMMING BASH RUST Python Tutorial Python HOME Python Intro Python Get Started Python Syntax Python Comments Python Variables Python Variables Variable Names Assign Multiple Values Output Variables Global Variables Variable Exercises Python Data Types Python Numbers Python Casting Python Strings Python Strings Slicing Strings Modify Strings Concatenate Strings Format Strings Escape Characters String Methods String Exercises Python Booleans Python Operators Python Lists Python Lists Access List Items Change List Items Add List Items Remove List Items Loop Lists List Comprehension Sort Lists Copy Lists Join Lists List Methods List Exercises Python Tuples Python Tuples Access Tuples Update Tuples Unpack Tuples Loop Tuples Join Tuples Tuple Methods Tuple Exercises Python Sets Python Sets Access Set Items Add Set Items Remove Set Items Loop Sets Join Sets Set Methods Set Exercises Python Dictionaries Python Dictionaries Access Items Change Items Add Items Remove Items Loop Dictionaries Copy Dictionaries Nested Dictionaries Dictionary Methods Dictionary Exercises Python If...Else Python Match Python While Loops Python For Loops Python Functions Python Lambda Python Arrays Python Classes/Objects Python Inheritance Python Iterators Python Polymorphism Python Scope Python Modules Python Dates Python Math Python JSON Python RegEx Python PIP Python Try...Except Python String Formatting Python User Input Python VirtualEnv File Handling Python File Handling Python Read Files Python Write/Create Files Python Delete Files Python Modules NumPy Tutorial Pandas Tutorial SciPy Tutorial Django Tutorial Python Matplotlib Matplotlib Intro Matplotlib Get Started Matplotlib Pyplot Matplotlib Plotting Matplotlib Markers Matplotlib Line Matplotlib Labels Matplotlib Grid Matplotlib Subplot Matplotlib Scatter Matplotlib Bars Matplotlib Histograms Matplotlib Pie Charts Machine Learning Getting Started Mean Median Mode Standard Deviation Percentile Data Distribution Normal Data Distribution Scatter Plot Linear Regression Polynomial Regression Multiple Regression Scale Train/Test Decision Tree Confusion Matrix Hierarchical Clustering Logistic Regression Grid Search Categorical Data K-means Bootstrap Aggregation Cross Validation AUC - ROC Curve K-nearest neighbors Python DSA Python DSA Lists and Arrays Stacks Queues Linked Lists Hash Tables Trees Binary Trees Binary Search Trees AVL Trees Graphs Linear Search Binary Search Bubble Sort Selection Sort Insertion Sort Quick Sort Counting Sort Radix Sort Merge Sort Python MySQL MySQL Get Started MySQL Create Database MySQL Create Table MySQL Insert MySQL Select MySQL Where MySQL Order By MySQL Delete MySQL Drop Table MySQL Update MySQL Limit MySQL Join Python MongoDB MongoDB Get Started MongoDB Create DB MongoDB Collection MongoDB Insert MongoDB Find MongoDB Query MongoDB Sort MongoDB Delete MongoDB Drop Collection MongoDB Update MongoDB Limit Python Reference Python Overview Python Built-in Functions Python String Methods Python List Methods Python Dictionary Methods Python Tuple Methods Python Set Methods Python File Methods Python Keywords Python Exceptions Python Glossary Module Reference Random Module Requests Module Statistics Module Math Module cMath Module Python How To Remove List Duplicates Reverse a String Add Two Numbers Python Examples Python Examples Python Compiler Python Exercises Python Quiz Python Server Python Syllabus Python Study Plan Python Interview Q&A Python Bootcamp Python Certificate Python Training Python Tutorial \u276e Home Next \u276f Learn Python Python is a popular programming language. Python can be used on a server to create web applications. Start learning Python now \u00bb Learning by Examples With our \"Try it Yourself\" editor, you can edit Python code and view the result. Example print(\"Hello, World!\") Try it Yourself \u00bb Click on the \"Try it Yourself\" button to see how it works. Python File Handling In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling Python Database Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Python Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Python Exercises Python Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Python Quiz Test your Python skills with a quiz. Python Quiz Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Python Reference You will also find complete function and method references: Reference Overview Built-in Functions String Methods List/Array Methods Dictionary Methods Tuple", "start_char_idx": 0, "end_char_idx": 5458, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0cf30fe-9306-4ca9-aac1-faa80912d8c6": {"__data__": {"id_": "f0cf30fe-9306-4ca9-aac1-faa80912d8c6", "embedding": null, "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_1.txt", "file_name": "www.w3schools.com_9_1.txt", "file_type": "text/plain", "file_size": 2063, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49565e20-156d-4771-9162-e6eb2601c0ec", "node_type": "4", "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_1.txt", "file_name": "www.w3schools.com_9_1.txt", "file_type": "text/plain", "file_size": 2063, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "3c784172153fe234945ddb2844594de2c3349e3dbfe5498ac4856df330745f84", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e1320bb9-1c0f-4293-b1a9-8ecc8a1201c5", "node_type": "1", "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_0.txt", "file_name": "www.w3schools.com_9_0.txt", "file_type": "text/plain", "file_size": 5473, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}, "hash": "f2891beadb5bdca69da54070f00afdf9b23a5389f728435e6a56695c852ded59", "class_name": "RelatedNodeInfo"}}, "text": "Methods Set Methods File Methods Python Keywords Python Exceptions Python Glossary Random Module Requests Module Math Module CMath Module Download Python Download Python from the official Python web site: https://python.org Kickstart your career Get certified by completing the course Get certified w 3 s c h o o l s C E R T I F I E D . 2 0 2 5 \u276e Home Next \u276f \u2605 +1 Track your progress - it's free! Log in Sign Up COLOR PICKER PLUS SPACES GET CERTIFIED FOR TEACHERS FOR BUSINESS CONTACT US \u00d7 Contact Sales If you want to use W3Schools services as an educational institution, team or enterprise, send us an e-mail: sales@w3schools.com Report Error If you want to report an error, or if you want to make a suggestion, send us an e-mail: help@w3schools.com Top Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial SQL Tutorial Python Tutorial W3.CSS Tutorial Bootstrap Tutorial PHP Tutorial Java Tutorial C++ Tutorial jQuery Tutorial Top References HTML Reference CSS Reference JavaScript Reference SQL Reference Python Reference W3.CSS Reference Bootstrap Reference PHP Reference HTML Colors Java Reference Angular Reference jQuery Reference Top Examples HTML Examples CSS Examples JavaScript Examples How To Examples SQL Examples Python Examples W3.CSS Examples Bootstrap Examples PHP Examples Java Examples XML Examples jQuery Examples Get Certified HTML Certificate CSS Certificate JavaScript Certificate Front End Certificate SQL Certificate Python Certificate PHP Certificate jQuery Certificate Java Certificate C++ Certificate C# Certificate XML Certificate \uf30c \ue807 \ue806 \uf16d FORUM ABOUT ACADEMY W3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using W3Schools, you agree to have read and accepted our terms of use , cookie and privacy policy . Copyright 1999-2025 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS .", "start_char_idx": 0, "end_char_idx": 2048, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"3ff15edc-7942-4114-a5fd-6b340295ef46": {"node_ids": ["3cb43932-7bd5-4819-b886-20632a5f94a1"], "metadata": {"file_path": "docs\\python\\automatetheboringstuff.com_10_0.txt", "file_name": "automatetheboringstuff.com_10_0.txt", "file_type": "text/plain", "file_size": 4008, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "cd94dcab-4db3-4abc-b656-ce09ebfca43c": {"node_ids": ["241caf26-638f-40d9-ac28-e6e263f9eb9d", "0ac219d5-f179-43c8-b43b-5e96a95fca65"], "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_0.txt", "file_name": "docs.python-guide.org_15_0.txt", "file_type": "text/plain", "file_size": 5537, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "8123d867-4423-49dc-82da-e49fa4af92de": {"node_ids": ["034f9b9f-7ce5-4ad5-a6a1-7b89c81479b0"], "metadata": {"file_path": "docs\\python\\docs.python-guide.org_15_1.txt", "file_name": "docs.python-guide.org_15_1.txt", "file_type": "text/plain", "file_size": 1070, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "025780ae-7bee-4b3d-9f26-3e53847bec82": {"node_ids": ["62934da8-d865-42ee-ad87-f2ebaed36037"], "metadata": {"file_path": "docs\\python\\docs.python-requests.org_32_0.txt", "file_name": "docs.python-requests.org_32_0.txt", "file_type": "text/plain", "file_size": 4285, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "6a9bf364-ad0e-4806-b5af-7770c8e596c2": {"node_ids": ["32b17c21-c904-4274-b586-b3c2f8b3fd68"], "metadata": {"file_path": "docs\\python\\docs.python.org_0_0.txt", "file_name": "docs.python.org_0_0.txt", "file_type": "text/plain", "file_size": 2333, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "78c3cd94-ceae-4f42-85a9-7be5d54068f2": {"node_ids": ["e62ff774-0a51-46cd-9f1f-02ce28263532"], "metadata": {"file_path": "docs\\python\\docs.python.org_0_1.txt", "file_name": "docs.python.org_0_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "835a26f2-5e94-45cb-b3bc-44e7f954485f": {"node_ids": ["b9f57c72-4e45-4938-a706-e8dbb3530b6a", "33b09cb5-92e6-4d79-a65a-646231eea2b2"], "metadata": {"file_path": "docs\\python\\docs.python.org_40_0.txt", "file_name": "docs.python.org_40_0.txt", "file_type": "text/plain", "file_size": 5410, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "a6ab3cdb-fda5-47bf-bc23-6776228b14c6": {"node_ids": ["73a16a33-1a2c-486b-a750-1d60a09c81c1"], "metadata": {"file_path": "docs\\python\\docs.python.org_40_1.txt", "file_name": "docs.python.org_40_1.txt", "file_type": "text/plain", "file_size": 1607, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "ea2a14ae-a08d-45a6-8068-95d5823bdc71": {"node_ids": ["965ac124-d144-4e49-998a-edc8fd92805a"], "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_0.txt", "file_name": "flask.palletsprojects.com_28_0.txt", "file_type": "text/plain", "file_size": 5779, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "9f076bb2-97d0-4eb1-ab5f-7c4eeaa54aea": {"node_ids": ["af024dd6-52e2-4f8d-8030-c8e6ce5b710b"], "metadata": {"file_path": "docs\\python\\flask.palletsprojects.com_28_1.txt", "file_name": "flask.palletsprojects.com_28_1.txt", "file_type": "text/plain", "file_size": 1118, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "91b350ee-9269-42e4-a39c-e551286b1973": {"node_ids": ["427b74ab-82ea-4ed5-bfdf-559d745f5529"], "metadata": {"file_path": "docs\\python\\github.com_17_0.txt", "file_name": "github.com_17_0.txt", "file_type": "text/plain", "file_size": 4133, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "0c72df9a-3bad-4a9a-9244-c32e6a65fcd3": {"node_ids": ["955137e9-16e8-4daa-ae8b-8cdb132470cb", "8c9687b6-6529-48b6-b071-4f1de71128de"], "metadata": {"file_path": "docs\\python\\github.com_27_0.txt", "file_name": "github.com_27_0.txt", "file_type": "text/plain", "file_size": 5219, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c5032cf3-9aef-46b5-9a3a-568a46176101": {"node_ids": ["1e5f564c-a25b-4403-bf54-a3e0e1a69ffc", "91f29a5f-f360-4c72-9e0b-38a859c38e5d"], "metadata": {"file_path": "docs\\python\\github.com_27_1.txt", "file_name": "github.com_27_1.txt", "file_type": "text/plain", "file_size": 4771, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "5356e71e-b498-48bd-badf-140ed0db1276": {"node_ids": ["42153e38-c10a-43d7-8886-060568fa2c89", "b153444e-fad6-4ff4-85d3-3c11de5166fb"], "metadata": {"file_path": "docs\\python\\github.com_27_2.txt", "file_name": "github.com_27_2.txt", "file_type": "text/plain", "file_size": 4899, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3343c873-f472-4679-b09d-e07803d5331a": {"node_ids": ["fb6bac18-c9d9-408e-a2cc-5dcb6c874f6a"], "metadata": {"file_path": "docs\\python\\github.com_30_0.txt", "file_name": "github.com_30_0.txt", "file_type": "text/plain", "file_size": 4387, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "5612d3c8-00a5-4198-bc07-3b7e59cb8992": {"node_ids": ["c598f390-0ab1-44e8-b0d1-1e2262aa0a7b"], "metadata": {"file_path": "docs\\python\\github.com_33_0.txt", "file_name": "github.com_33_0.txt", "file_type": "text/plain", "file_size": 3329, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "861270ac-e102-4a7b-a475-20dbe68b66ae": {"node_ids": ["67d70904-6234-4235-8ba8-07c55872e630", "cb7c34bb-2421-464e-84db-0e648a9db5b3"], "metadata": {"file_path": "docs\\python\\github.com_35_0.txt", "file_name": "github.com_35_0.txt", "file_type": "text/plain", "file_size": 6659, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "cd37c02a-85dc-4552-9a7b-3cf0c74c1de6": {"node_ids": ["2ca456b1-cc3d-4ee8-bb27-8c59c496919f"], "metadata": {"file_path": "docs\\python\\github.com_35_1.txt", "file_name": "github.com_35_1.txt", "file_type": "text/plain", "file_size": 61, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "44687a84-1741-4935-8752-a74128cdc174": {"node_ids": ["f35885f3-3d1f-4ca9-807f-4093f3e6a9d1", "2162ef32-b963-47b0-b336-96ea503bec72"], "metadata": {"file_path": "docs\\python\\github.com_36_0.txt", "file_name": "github.com_36_0.txt", "file_type": "text/plain", "file_size": 5591, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "6060671e-a630-49e8-a82c-fa6ff5913ca8": {"node_ids": ["332f00bc-1d73-4b91-9eee-561cb9bac095"], "metadata": {"file_path": "docs\\python\\github.com_36_1.txt", "file_name": "github.com_36_1.txt", "file_type": "text/plain", "file_size": 2955, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "fb8df448-b98c-4f7b-a3ff-0a3486eefca9": {"node_ids": ["11631a3c-ae1e-44fb-bfb7-8728ed5f0451", "7d90e68c-e993-4c9b-9616-d2ea68869670"], "metadata": {"file_path": "docs\\python\\github.com_44_0.txt", "file_name": "github.com_44_0.txt", "file_type": "text/plain", "file_size": 5651, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d9d28837-e655-4431-8d88-bf9a1d90b748": {"node_ids": ["d9666c00-e257-43d9-9ef0-bef792a18789"], "metadata": {"file_path": "docs\\python\\github.com_44_1.txt", "file_name": "github.com_44_1.txt", "file_type": "text/plain", "file_size": 1254, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "2bd04e90-e47e-4570-a25f-e7abf668e187": {"node_ids": ["0f2fa209-a46e-44b5-87fb-afc8da4d9e5a", "07518aee-b1b5-4b99-aecc-51f4567b4dcb"], "metadata": {"file_path": "docs\\python\\github.com_45_0.txt", "file_name": "github.com_45_0.txt", "file_type": "text/plain", "file_size": 5948, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "94b99940-dba6-441d-99e6-c5113214a786": {"node_ids": ["7dd10a8c-8b63-4cd2-8c3e-dc87bb9c9de9", "8a49cc39-450f-498f-921b-c240fa5fff2f"], "metadata": {"file_path": "docs\\python\\github.com_45_1.txt", "file_name": "github.com_45_1.txt", "file_type": "text/plain", "file_size": 5043, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "10cb4c4c-5ec6-4808-8d89-04899e27327f": {"node_ids": ["2600b5b6-a35c-4404-9336-824f250d6ac3", "68439ca1-ad54-467e-9497-cd69d945220e"], "metadata": {"file_path": "docs\\python\\github.com_45_2.txt", "file_name": "github.com_45_2.txt", "file_type": "text/plain", "file_size": 5341, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d262813f-0c13-431b-8292-8386cd7a9aef": {"node_ids": ["84bea96a-343b-4e94-b112-e499de685027", "ae9f50a4-bfb6-4f4b-97ee-d31adcdb1c9f"], "metadata": {"file_path": "docs\\python\\github.com_45_3.txt", "file_name": "github.com_45_3.txt", "file_type": "text/plain", "file_size": 5231, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "be71a699-f052-4f1f-ad19-875988339108": {"node_ids": ["9df2d79d-4a32-4d7a-8d64-32b4862c0daa"], "metadata": {"file_path": "docs\\python\\github.com_45_4.txt", "file_name": "github.com_45_4.txt", "file_type": "text/plain", "file_size": 1853, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d5867e41-f15c-48ac-937e-d02bb843eee1": {"node_ids": ["254ed956-2758-4d7b-a5db-892909e52868", "ccca712f-95ba-4083-95db-1f8441d17cdb"], "metadata": {"file_path": "docs\\python\\github.com_8_0.txt", "file_name": "github.com_8_0.txt", "file_type": "text/plain", "file_size": 5664, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "9f4ac4c2-68ce-4c3e-ab50-c73b6815d615": {"node_ids": ["4e6eee08-c9d1-453e-a8f3-db82607dfe39"], "metadata": {"file_path": "docs\\python\\github.com_8_1.txt", "file_name": "github.com_8_1.txt", "file_type": "text/plain", "file_size": 3886, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "bd970fd6-d428-4d27-ae5c-3ffbcfde7dfd": {"node_ids": ["30c11c89-e7f7-4520-aedf-f784281a8d63"], "metadata": {"file_path": "docs\\python\\medium.com_24_0.txt", "file_name": "medium.com_24_0.txt", "file_type": "text/plain", "file_size": 3327, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "8cd240f4-004b-40f5-a69b-3f77f4135d82": {"node_ids": ["e619c0b7-a450-4bb5-8f8c-9eb4a088a7ab"], "metadata": {"file_path": "docs\\python\\numpy.org_18_0.txt", "file_name": "numpy.org_18_0.txt", "file_type": "text/plain", "file_size": 1243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "02c9d39d-cf55-475d-b584-1d619cb18f59": {"node_ids": ["00a16b99-ea97-4d17-b1cb-6eb723440378"], "metadata": {"file_path": "docs\\python\\pandas.pydata.org_19_0.txt", "file_name": "pandas.pydata.org_19_0.txt", "file_type": "text/plain", "file_size": 1377, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "b3e5faa8-0551-4392-a02b-1d1bb614fcab": {"node_ids": ["dc4a4ea1-f1ad-4f0f-af3a-a34dc477eec5"], "metadata": {"file_path": "docs\\python\\pypi.org_2_0.txt", "file_name": "pypi.org_2_0.txt", "file_type": "text/plain", "file_size": 836, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c11ab4fc-f4d8-4bb5-aeb5-b3b78fee855b": {"node_ids": ["18761ce4-84a2-482e-b6cf-8f0eac9b73b8"], "metadata": {"file_path": "docs\\python\\python_1_chunk_1.txt", "file_name": "python_1_chunk_1.txt", "file_type": "text/plain", "file_size": 898, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "f7c83c0c-01db-4a21-a67a-4da91460212e": {"node_ids": ["4b45e877-98d9-455e-8840-85b81b61a2e6"], "metadata": {"file_path": "docs\\python\\python_1_chunk_10.txt", "file_name": "python_1_chunk_10.txt", "file_type": "text/plain", "file_size": 975, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "7d30c311-4a47-443b-afc2-16b61493a6cd": {"node_ids": ["1956b9f2-8f0d-47ef-9831-8a9861273f6a"], "metadata": {"file_path": "docs\\python\\python_1_chunk_11.txt", "file_name": "python_1_chunk_11.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "01738cca-4fe7-47b5-b79f-29469f76a7fd": {"node_ids": ["d2692bb6-cb65-4ad6-a8e0-9b6f10fd5d4b"], "metadata": {"file_path": "docs\\python\\python_1_chunk_12.txt", "file_name": "python_1_chunk_12.txt", "file_type": "text/plain", "file_size": 454, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "8a918de1-e315-4893-959b-c62a1e8f3779": {"node_ids": ["db37d56c-28a7-42b0-a1cd-37b9e00c1cb1"], "metadata": {"file_path": "docs\\python\\python_1_chunk_2.txt", "file_name": "python_1_chunk_2.txt", "file_type": "text/plain", "file_size": 997, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "7093dd4a-4396-4a2e-9073-a137f2ea510e": {"node_ids": ["03e3a9a8-5eaf-4d86-892e-65c38ab0cb14"], "metadata": {"file_path": "docs\\python\\python_1_chunk_3.txt", "file_name": "python_1_chunk_3.txt", "file_type": "text/plain", "file_size": 973, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "4c332c74-57ba-4e64-88a1-b01b716f27ca": {"node_ids": ["f083465f-cf9c-4869-81d4-1bbf2d46f452"], "metadata": {"file_path": "docs\\python\\python_1_chunk_4.txt", "file_name": "python_1_chunk_4.txt", "file_type": "text/plain", "file_size": 992, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "39237fdb-9768-47e4-af37-04b845bd2773": {"node_ids": ["a4526c03-d1ab-4060-b7db-8bf07399b7e5"], "metadata": {"file_path": "docs\\python\\python_1_chunk_5.txt", "file_name": "python_1_chunk_5.txt", "file_type": "text/plain", "file_size": 994, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "f62d4dfb-eb39-4deb-a624-2ac5a7eda9c3": {"node_ids": ["1d296e4e-2cff-403a-b2bc-0bcb83747579"], "metadata": {"file_path": "docs\\python\\python_1_chunk_6.txt", "file_name": "python_1_chunk_6.txt", "file_type": "text/plain", "file_size": 990, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "f69eaa7c-ac1d-456d-bef9-f07c81eb6bd2": {"node_ids": ["205517b3-c17d-49be-bd71-55bf2e7ec3f5"], "metadata": {"file_path": "docs\\python\\python_1_chunk_7.txt", "file_name": "python_1_chunk_7.txt", "file_type": "text/plain", "file_size": 999, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "56ea3e30-b164-4155-9f49-75dcc225187f": {"node_ids": ["0186aa0e-ea03-47a0-8525-642b355df110"], "metadata": {"file_path": "docs\\python\\python_1_chunk_8.txt", "file_name": "python_1_chunk_8.txt", "file_type": "text/plain", "file_size": 974, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "5649fa11-562a-4ac3-9aaf-2552d483c9ea": {"node_ids": ["f15953d2-ae76-45da-a764-698d5fbf35a0"], "metadata": {"file_path": "docs\\python\\python_1_chunk_9.txt", "file_name": "python_1_chunk_9.txt", "file_type": "text/plain", "file_size": 988, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "6bc0546f-7e13-4378-a00f-9e367b6f4c14": {"node_ids": ["caa6ad7c-73b1-4b18-8756-a51fbfccc297"], "metadata": {"file_path": "docs\\python\\python_2_chunk_1.txt", "file_name": "python_2_chunk_1.txt", "file_type": "text/plain", "file_size": 1013, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "fa37605f-ff53-4961-94c0-8252501630ff": {"node_ids": ["04cca8ee-6206-4ff1-91ac-85fd2fd4b857"], "metadata": {"file_path": "docs\\python\\python_2_chunk_2.txt", "file_name": "python_2_chunk_2.txt", "file_type": "text/plain", "file_size": 138, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c1013b37-f220-4cb0-b83b-de3edffe3caf": {"node_ids": ["51c11839-076c-4595-b5f6-02a882e5ed61"], "metadata": {"file_path": "docs\\python\\python_2_chunk_3.txt", "file_name": "python_2_chunk_3.txt", "file_type": "text/plain", "file_size": 1000, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "203bfee5-757c-4a11-8372-0a8b0da4181b": {"node_ids": ["61cc5b8f-b11f-456a-af58-0e3827faef2f"], "metadata": {"file_path": "docs\\python\\python_2_chunk_4.txt", "file_name": "python_2_chunk_4.txt", "file_type": "text/plain", "file_size": 527, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3a0456d6-33d3-463b-9625-436cf6d85169": {"node_ids": ["ab7790fa-ee4b-4874-a830-ba1cb81c00af"], "metadata": {"file_path": "docs\\python\\python_3_chunk_1.txt", "file_name": "python_3_chunk_1.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "cac3af8c-76df-4457-aa67-276a051d7c3a": {"node_ids": ["00f86411-b0a2-41d6-af14-fddd6f95b5c1"], "metadata": {"file_path": "docs\\python\\python_3_chunk_2.txt", "file_name": "python_3_chunk_2.txt", "file_type": "text/plain", "file_size": 985, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "19b1fb52-d09a-4659-b72f-217dccd8c104": {"node_ids": ["4e5cadc3-a459-4cc0-a22d-1b4f5e4bebc2"], "metadata": {"file_path": "docs\\python\\python_3_chunk_3.txt", "file_name": "python_3_chunk_3.txt", "file_type": "text/plain", "file_size": 894, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "b5b3ffd0-158b-4696-bb7f-bbef0705360c": {"node_ids": ["59041a62-54a9-46a4-a9a6-8c03b41038a8"], "metadata": {"file_path": "docs\\python\\python_3_chunk_4.txt", "file_name": "python_3_chunk_4.txt", "file_type": "text/plain", "file_size": 904, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "0d7e5f23-8c6a-4b5f-a0db-af396b196a5d": {"node_ids": ["ea03d4d7-e05f-42b4-b70c-4344822d1626"], "metadata": {"file_path": "docs\\python\\python_3_chunk_5.txt", "file_name": "python_3_chunk_5.txt", "file_type": "text/plain", "file_size": 322, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "1d2de8e3-c342-4751-a0b3-13be15e6c9e0": {"node_ids": ["b320b6aa-5996-4021-a817-34f116f4aff7"], "metadata": {"file_path": "docs\\python\\pythonbasics.org_16_0.txt", "file_name": "pythonbasics.org_16_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "cffc16df-9469-4c29-8220-b608c711ccff": {"node_ids": ["b2dc1ce6-0adb-4d23-a11d-272f3396f05e"], "metadata": {"file_path": "docs\\python\\pythonbasics.org_41_0.txt", "file_name": "pythonbasics.org_41_0.txt", "file_type": "text/plain", "file_size": 4500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "fd762952-0014-418a-8ecf-470162a8d368": {"node_ids": ["c6f71baf-ce1b-44e9-b7a1-4c0dc989f252"], "metadata": {"file_path": "docs\\python\\realpython.com_14_0.txt", "file_name": "realpython.com_14_0.txt", "file_type": "text/plain", "file_size": 5286, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c8e99237-77ac-464e-8904-3945f5912190": {"node_ids": ["4e23c228-ed9a-428e-a6a9-e0eef0d261e1"], "metadata": {"file_path": "docs\\python\\realpython.com_14_1.txt", "file_name": "realpython.com_14_1.txt", "file_type": "text/plain", "file_size": 4564, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "960c7773-c2d8-42cd-8893-9b543944b74e": {"node_ids": ["5f1ef21e-a47c-495e-9ccf-184e8e4fd5b7"], "metadata": {"file_path": "docs\\python\\realpython.com_14_2.txt", "file_name": "realpython.com_14_2.txt", "file_type": "text/plain", "file_size": 4426, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "252135e2-98fe-49b5-9cef-7cb7d5c52a32": {"node_ids": ["896be9bc-1801-451b-b64f-3117cb484a66"], "metadata": {"file_path": "docs\\python\\realpython.com_14_3.txt", "file_name": "realpython.com_14_3.txt", "file_type": "text/plain", "file_size": 4317, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d5560e97-7bfd-45a6-8e72-7f72ce24ae3f": {"node_ids": ["78421b7e-a77d-4e56-b6e4-17a2beb15ec8"], "metadata": {"file_path": "docs\\python\\realpython.com_14_4.txt", "file_name": "realpython.com_14_4.txt", "file_type": "text/plain", "file_size": 4633, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "6b76dbb5-62a0-4922-8157-ce58c9c25211": {"node_ids": ["35f70f8e-5935-4ddb-b125-d152c4ea1f5a"], "metadata": {"file_path": "docs\\python\\realpython.com_14_5.txt", "file_name": "realpython.com_14_5.txt", "file_type": "text/plain", "file_size": 4204, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "0bbf9f34-961f-45b3-98a9-59b77218051a": {"node_ids": ["91444fbc-34e7-4bb5-b125-00db1ed71de8", "ae8ea22d-47b3-46e4-80ab-adc79986572c"], "metadata": {"file_path": "docs\\python\\realpython.com_14_6.txt", "file_name": "realpython.com_14_6.txt", "file_type": "text/plain", "file_size": 4389, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "cb1b728f-cf38-4444-8ea0-64207eb1585e": {"node_ids": ["d59ca20c-8ac3-421a-aa3a-b92349060e73"], "metadata": {"file_path": "docs\\python\\realpython.com_14_7.txt", "file_name": "realpython.com_14_7.txt", "file_type": "text/plain", "file_size": 4838, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "ff8a2444-251d-470b-b581-155046079df4": {"node_ids": ["7eb506e1-7ac2-4847-8c80-e483d6ec031f"], "metadata": {"file_path": "docs\\python\\realpython.com_14_8.txt", "file_name": "realpython.com_14_8.txt", "file_type": "text/plain", "file_size": 3167, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "8f4930ee-9d0f-41b9-b67b-244e77c7e1da": {"node_ids": ["e6bd1f4c-d20e-45c2-bc56-974c7b3e49f3"], "metadata": {"file_path": "docs\\python\\realpython.com_1_0.txt", "file_name": "realpython.com_1_0.txt", "file_type": "text/plain", "file_size": 2553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "8b10fd78-ee1c-401a-a427-5efbf3fdce1e": {"node_ids": ["7a770008-ca77-4756-b1d9-730371d78e6a"], "metadata": {"file_path": "docs\\python\\realpython.com_34_0.txt", "file_name": "realpython.com_34_0.txt", "file_type": "text/plain", "file_size": 5266, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "b64425e3-8bc3-4770-82d8-a2227e2e56bd": {"node_ids": ["276af1d0-7795-4cfe-aabe-03a55db49d6d"], "metadata": {"file_path": "docs\\python\\realpython.com_34_1.txt", "file_name": "realpython.com_34_1.txt", "file_type": "text/plain", "file_size": 493, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "0f608eb3-4924-4b10-975f-38aaae27eae5": {"node_ids": ["23f4e4b4-b9fe-461e-8b76-6519e4453572", "c7c710fd-c46d-4fd3-9bb0-0f9289204402"], "metadata": {"file_path": "docs\\python\\realpython.com_43_0.txt", "file_name": "realpython.com_43_0.txt", "file_type": "text/plain", "file_size": 5319, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "17288975-c1fd-4cec-86fc-c402626e5549": {"node_ids": ["46001039-ee7d-4dfa-b616-e0d577af9849", "e60f8afa-29c9-4489-a92b-249ded7df09d"], "metadata": {"file_path": "docs\\python\\realpython.com_43_1.txt", "file_name": "realpython.com_43_1.txt", "file_type": "text/plain", "file_size": 4874, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "0b8843c4-7654-4053-88d8-add60e34ac80": {"node_ids": ["90354b6d-e85e-4904-8dbb-d7181d102cb9"], "metadata": {"file_path": "docs\\python\\realpython.com_43_10.txt", "file_name": "realpython.com_43_10.txt", "file_type": "text/plain", "file_size": 4700, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "b1d1a543-38fa-48c1-8e39-294897270742": {"node_ids": ["8936479e-15e3-444a-9dd4-04a3855a0a36", "ef20dc98-8f58-404c-8ed6-cba839ca0a47"], "metadata": {"file_path": "docs\\python\\realpython.com_43_11.txt", "file_name": "realpython.com_43_11.txt", "file_type": "text/plain", "file_size": 4663, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "def12d8d-129d-463f-a753-938d3d327b92": {"node_ids": ["24aaae84-083c-4d6a-866a-16ee7a64302c"], "metadata": {"file_path": "docs\\python\\realpython.com_43_12.txt", "file_name": "realpython.com_43_12.txt", "file_type": "text/plain", "file_size": 4539, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "eddaf335-f569-4b27-9438-1b435e605159": {"node_ids": ["92566026-6fbe-48b7-89b0-5d48957c1e75"], "metadata": {"file_path": "docs\\python\\realpython.com_43_13.txt", "file_name": "realpython.com_43_13.txt", "file_type": "text/plain", "file_size": 3101, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d0ce3c13-8c2a-4093-b2ef-5fdcc3400b00": {"node_ids": ["35ac61b2-c8a7-4c9f-947c-a5983b254cbc"], "metadata": {"file_path": "docs\\python\\realpython.com_43_2.txt", "file_name": "realpython.com_43_2.txt", "file_type": "text/plain", "file_size": 4685, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "ee709460-ee8f-4272-812a-5de286eb5a88": {"node_ids": ["5c769187-9e75-4be9-9d3e-b59e1b34d298", "d3d3cb2d-5908-4991-9b0c-28c50cdd0d20"], "metadata": {"file_path": "docs\\python\\realpython.com_43_3.txt", "file_name": "realpython.com_43_3.txt", "file_type": "text/plain", "file_size": 4396, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "aef968b0-6853-4a26-9c0e-1a7ca15150d0": {"node_ids": ["63f5c67e-27ee-4d07-b7c3-be6b3c62b744", "e56de99a-dc3d-48d4-93b7-286a0d7d5456"], "metadata": {"file_path": "docs\\python\\realpython.com_43_4.txt", "file_name": "realpython.com_43_4.txt", "file_type": "text/plain", "file_size": 4566, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "ca42409f-0bf8-414e-9004-bb4de9e683db": {"node_ids": ["c57fff76-b1c8-47d6-b91a-6f016c7e00d5", "6a958de3-9743-49a0-b17d-b9749d6fafbd"], "metadata": {"file_path": "docs\\python\\realpython.com_43_5.txt", "file_name": "realpython.com_43_5.txt", "file_type": "text/plain", "file_size": 4590, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "15a3d013-697b-44f0-858f-0bd812ae6062": {"node_ids": ["f5e0b498-0265-4d62-b051-922bbf7e2982", "3476a33d-b33a-4729-a42f-f14e4f2222df"], "metadata": {"file_path": "docs\\python\\realpython.com_43_6.txt", "file_name": "realpython.com_43_6.txt", "file_type": "text/plain", "file_size": 4648, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "967fa1a4-1290-405c-acd6-d6bf368adccb": {"node_ids": ["28b4359a-3066-4331-b5af-21fd86111ef6", "a37049c4-90c7-4bf1-80e7-13d9f1e7a8a8"], "metadata": {"file_path": "docs\\python\\realpython.com_43_7.txt", "file_name": "realpython.com_43_7.txt", "file_type": "text/plain", "file_size": 4915, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3ff25d96-cd3c-4835-90a8-260bd4a95a44": {"node_ids": ["294091fb-e81f-4982-96f0-b5570932c8cd", "d28a2407-b258-4094-b0b2-9193147edefb"], "metadata": {"file_path": "docs\\python\\realpython.com_43_8.txt", "file_name": "realpython.com_43_8.txt", "file_type": "text/plain", "file_size": 4478, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "22606178-7cec-4d25-aeba-01fe8862c5f4": {"node_ids": ["6eaa2898-b426-4723-bccd-b1364c665682"], "metadata": {"file_path": "docs\\python\\realpython.com_43_9.txt", "file_name": "realpython.com_43_9.txt", "file_type": "text/plain", "file_size": 4572, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "e7ce776f-7c12-4ee4-98e5-290e3840f212": {"node_ids": ["c70c81f7-518b-4e9e-9756-6c8d43e93667"], "metadata": {"file_path": "docs\\python\\scikit-learn.org_46_0.txt", "file_name": "scikit-learn.org_46_0.txt", "file_type": "text/plain", "file_size": 3553, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "a6cde27b-0ae9-4884-9481-f01267e47cc4": {"node_ids": ["bf39dfae-d735-43d3-8526-b1d044b22a27"], "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_0.txt", "file_name": "www.codecademy.com_26_0.txt", "file_type": "text/plain", "file_size": 5040, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "2f098cf3-f738-459c-8fb1-bea1b50fb09a": {"node_ids": ["4e93811e-0bd8-460c-87f6-d47d381cce9f"], "metadata": {"file_path": "docs\\python\\www.codecademy.com_26_1.txt", "file_name": "www.codecademy.com_26_1.txt", "file_type": "text/plain", "file_size": 4224, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "2ebb29ef-17bd-4981-a480-e2638c10fdc1": {"node_ids": ["7bfdf86b-4088-4db3-8083-c981f833ab54"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_0.txt", "file_name": "www.dataquest.io_42_0.txt", "file_type": "text/plain", "file_size": 5470, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "4542a351-b38d-4139-bdf2-e0e5e9ccdb7e": {"node_ids": ["d5c12dd9-2d7b-4c47-ae88-8659df1b4fe4"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_1.txt", "file_name": "www.dataquest.io_42_1.txt", "file_type": "text/plain", "file_size": 4511, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "b80efd05-328d-4436-ab36-be2104d4ba82": {"node_ids": ["da184d41-8771-494e-b1f2-3b6b6a55ccd1", "235373c6-f946-4c7c-94f3-08980a796d28"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_2.txt", "file_name": "www.dataquest.io_42_2.txt", "file_type": "text/plain", "file_size": 4506, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d6d6afd6-fe3e-4f24-8a4e-6166050b8107": {"node_ids": ["1f0a2bf1-5330-4a7a-b12c-c945185cb980", "719b2943-c657-41b3-8f04-60636a780b86"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_3.txt", "file_name": "www.dataquest.io_42_3.txt", "file_type": "text/plain", "file_size": 4910, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "e598d0a4-f800-49cb-af2c-0fedd271a221": {"node_ids": ["3c207359-0ea3-4dcd-8375-2db0e3e09c18"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_4.txt", "file_name": "www.dataquest.io_42_4.txt", "file_type": "text/plain", "file_size": 5592, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "21f2a690-e9fb-47b2-a5b4-01772e1400ec": {"node_ids": ["e7c7cc0a-e00d-4bb8-be08-49cb3f1ca6c1"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_5.txt", "file_name": "www.dataquest.io_42_5.txt", "file_type": "text/plain", "file_size": 5431, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "9fe93f97-3b87-4ba1-9570-84e7c64b1305": {"node_ids": ["46da161f-3fa9-4f51-bd65-13ffb8125a2e"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_6.txt", "file_name": "www.dataquest.io_42_6.txt", "file_type": "text/plain", "file_size": 5293, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "9c857517-d290-4185-b962-c78f200a2ade": {"node_ids": ["0e33e9b1-4662-439c-a05d-473129c87ae6"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_7.txt", "file_name": "www.dataquest.io_42_7.txt", "file_type": "text/plain", "file_size": 5178, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "5d3e3937-7d0f-4748-abe6-a8916ae4847d": {"node_ids": ["585a1f2d-694e-4ca0-bcc3-9dae0dc0e284"], "metadata": {"file_path": "docs\\python\\www.dataquest.io_42_8.txt", "file_name": "www.dataquest.io_42_8.txt", "file_type": "text/plain", "file_size": 1707, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "78f48a7c-8095-40ea-889c-8063d254ea76": {"node_ids": ["913057b9-891d-42ef-afad-0de074a4f97c", "122a0255-9fe4-4898-a7af-3c4fdd5f85d4"], "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_0.txt", "file_name": "www.freecodecamp.org_13_0.txt", "file_type": "text/plain", "file_size": 5444, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c168eea9-eba5-48cb-8145-4167781c1c35": {"node_ids": ["bc965e62-998e-47d6-bcc6-9c226e2a7013", "8ce730ef-e6c7-4f42-b1c0-e95565326a47"], "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_1.txt", "file_name": "www.freecodecamp.org_13_1.txt", "file_type": "text/plain", "file_size": 5218, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "83f38e4a-743e-43e4-a689-eeb33dcb0f9b": {"node_ids": ["cddb678c-fd4a-4d00-bcb3-b18d3c81bc32", "5bca244e-1923-4e98-8506-cfc75b24058a"], "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_2.txt", "file_name": "www.freecodecamp.org_13_2.txt", "file_type": "text/plain", "file_size": 4968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "f3d6608e-81c7-4df4-9fd1-0c28415460e9": {"node_ids": ["0f7e5f10-53e9-4d68-9bb8-7bea7c464bcb", "f944d9c3-192e-453f-a8d3-3fea194f2fa7"], "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_3.txt", "file_name": "www.freecodecamp.org_13_3.txt", "file_type": "text/plain", "file_size": 4491, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "9f61ab36-1b88-4628-8ee9-eee763e2a4fe": {"node_ids": ["3c4e4793-e9f9-49c1-aab8-c4b92ae60be4"], "metadata": {"file_path": "docs\\python\\www.freecodecamp.org_13_4.txt", "file_name": "www.freecodecamp.org_13_4.txt", "file_type": "text/plain", "file_size": 1197, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "e265b963-6aa2-446e-9573-15e32ca338e9": {"node_ids": ["64257430-5f6e-49c0-884f-6635b2af54af"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_0.txt", "file_name": "www.geeksforgeeks.org_2_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "9f706a1d-5c5e-446d-ab65-708456c40080": {"node_ids": ["a1f2ca55-19d6-4347-82d0-c82a7c2faab1", "94c21b1f-f11f-4d0c-8e36-d04a7dae2390"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_1.txt", "file_name": "www.geeksforgeeks.org_2_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "2ccb122f-491f-48b6-a432-1fe3243a7a1a": {"node_ids": ["ce240749-dd0b-4c20-8399-a00193565120", "f95ea3e2-47d0-438e-989e-a57bb75a1707"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_2.txt", "file_name": "www.geeksforgeeks.org_2_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "19a355b6-7d74-423b-9cee-2883f4bf25cd": {"node_ids": ["2f40d636-5a23-43fd-8ffb-367b3f9a0bfe"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_2_3.txt", "file_name": "www.geeksforgeeks.org_2_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "7a96c4de-1f61-4275-9a0b-328e695e37f2": {"node_ids": ["76d34fd4-451c-4840-9bf3-7e7e63ecd399"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_0.txt", "file_name": "www.geeksforgeeks.org_4_0.txt", "file_type": "text/plain", "file_size": 5326, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "2ccd4a68-89fd-425c-839e-ed83e4aee45f": {"node_ids": ["d908bda8-03ef-41ff-a43b-5f630ef663c0", "2429ce8e-7ab6-4529-9afa-d6636704f708"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_1.txt", "file_name": "www.geeksforgeeks.org_4_1.txt", "file_type": "text/plain", "file_size": 5445, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "508fc256-7148-45f1-902d-c4d0d957dff8": {"node_ids": ["e6994cbb-707e-4127-989b-c70a12dd6340", "67ebc95f-6415-434d-a923-3b89152ffcfe"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_2.txt", "file_name": "www.geeksforgeeks.org_4_2.txt", "file_type": "text/plain", "file_size": 5617, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c4d5155f-6114-49a1-84cc-491baf8a23d2": {"node_ids": ["74acf83d-38ea-4705-a262-2d91f69f6370"], "metadata": {"file_path": "docs\\python\\www.geeksforgeeks.org_4_3.txt", "file_name": "www.geeksforgeeks.org_4_3.txt", "file_type": "text/plain", "file_size": 1968, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3c35cd13-8a38-444a-b187-d77432161cb8": {"node_ids": ["7893f684-2f2e-406b-88f1-9092015ddbdc"], "metadata": {"file_path": "docs\\python\\www.hackerrank.com_23_0.txt", "file_name": "www.hackerrank.com_23_0.txt", "file_type": "text/plain", "file_size": 683, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "50648295-0160-4522-ae1a-51369fbb510d": {"node_ids": ["60b60797-e179-4a30-96d4-b24de2dff8af"], "metadata": {"file_path": "docs\\python\\www.kaggle.com_22_0.txt", "file_name": "www.kaggle.com_22_0.txt", "file_type": "text/plain", "file_size": 31, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "fecf76c8-92fa-4d7e-ab19-c29d177588b7": {"node_ids": ["4837110a-74cc-4f4b-a094-226578b18842"], "metadata": {"file_path": "docs\\python\\www.learnpython.org_25_0.txt", "file_name": "www.learnpython.org_25_0.txt", "file_type": "text/plain", "file_size": 2742, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3e9e9904-080c-4c4d-97ca-f7d976ba7bf3": {"node_ids": ["f457bc5b-0690-44f7-a5b4-4c633c13ee00"], "metadata": {"file_path": "docs\\python\\www.programiz.com_7_0.txt", "file_name": "www.programiz.com_7_0.txt", "file_type": "text/plain", "file_size": 5210, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3d045b31-ddc6-433c-afe5-8d198a0d0189": {"node_ids": ["39093845-3532-4e6b-8abb-16430d9377fc"], "metadata": {"file_path": "docs\\python\\www.programiz.com_7_1.txt", "file_name": "www.programiz.com_7_1.txt", "file_type": "text/plain", "file_size": 4362, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "35aee719-2bbd-4376-9760-4ed0430bd967": {"node_ids": ["ee3a8984-5051-4b27-8252-7dc792c7f3cf"], "metadata": {"file_path": "docs\\python\\www.python.org_29_0.txt", "file_name": "www.python.org_29_0.txt", "file_type": "text/plain", "file_size": 2911, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "50b81b01-35f1-4b75-9553-829546949f84": {"node_ids": ["b16f772c-a5de-4e96-8a37-870bd4fa0f35", "bc114974-a6d0-4989-b173-c0cdd49872e0"], "metadata": {"file_path": "docs\\python\\www.python.org_3_0.txt", "file_name": "www.python.org_3_0.txt", "file_type": "text/plain", "file_size": 5308, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "3a647e91-0523-4d16-9dbe-609a8c6834ef": {"node_ids": ["c3c66723-c58c-44d8-9ac1-2b7d5fd9b6ca", "eb5b17c1-1ab1-46e8-8613-e1be486471ea"], "metadata": {"file_path": "docs\\python\\www.python.org_3_1.txt", "file_name": "www.python.org_3_1.txt", "file_type": "text/plain", "file_size": 5281, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "433d7c5c-d598-4743-b6f2-5eefac12a0c6": {"node_ids": ["06f323ff-0508-4aef-bbcb-8b5994f66075", "fc11a169-d959-446c-9776-cc851b73bbde"], "metadata": {"file_path": "docs\\python\\www.python.org_3_10.txt", "file_name": "www.python.org_3_10.txt", "file_type": "text/plain", "file_size": 5953, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "35cb6bf4-3ce1-4ed3-b20c-c6382c6e6d81": {"node_ids": ["07f09aa6-0448-4200-b4da-a5a061ffbc64", "b080ad7f-db3c-4b68-813d-209875415606", "2a5a05fe-0ba9-4bce-9f0e-2cf477e8ecb6"], "metadata": {"file_path": "docs\\python\\www.python.org_3_11.txt", "file_name": "www.python.org_3_11.txt", "file_type": "text/plain", "file_size": 5873, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "933428dc-c760-4f34-b08b-bd0bb8cef492": {"node_ids": ["26820dcf-0ea8-4ae3-a4ee-1ef72b4814a4"], "metadata": {"file_path": "docs\\python\\www.python.org_3_12.txt", "file_name": "www.python.org_3_12.txt", "file_type": "text/plain", "file_size": 500, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "eb09a449-881d-442b-8c61-af9111f4bc11": {"node_ids": ["d3f9929a-5db9-425e-9c60-4ac52e143374", "1fdac43d-b959-4857-a7ae-ecf08e4b5406"], "metadata": {"file_path": "docs\\python\\www.python.org_3_2.txt", "file_name": "www.python.org_3_2.txt", "file_type": "text/plain", "file_size": 4971, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "fdbc74be-8b07-4207-af06-53712754df49": {"node_ids": ["a5635d2d-7258-4fbb-b0e2-3627d398bfaf", "3de311fe-ddc8-4292-8ef4-02e3719ccd4a"], "metadata": {"file_path": "docs\\python\\www.python.org_3_3.txt", "file_name": "www.python.org_3_3.txt", "file_type": "text/plain", "file_size": 5127, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "59375a9c-b993-4bb8-80ba-b80ca695b5d6": {"node_ids": ["7b00e595-cc45-48af-8704-c49c963892d1", "d3a6cfc7-ac78-4e53-bb81-92cc8f0bd5cc"], "metadata": {"file_path": "docs\\python\\www.python.org_3_4.txt", "file_name": "www.python.org_3_4.txt", "file_type": "text/plain", "file_size": 5108, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "055904b6-e92e-4bb9-835f-51a27f78a532": {"node_ids": ["be7218ec-0e9e-4292-a454-e750c5cac555", "0b8efe35-903b-44a8-bd7c-8193ae2360e3"], "metadata": {"file_path": "docs\\python\\www.python.org_3_5.txt", "file_name": "www.python.org_3_5.txt", "file_type": "text/plain", "file_size": 4982, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "c2469720-5160-49e8-9f03-31c74b3d84f3": {"node_ids": ["1b4a9f25-7e4e-49cb-bf3e-e0d91a67061e", "b996b334-d3c4-4fef-a46b-e74bef7903df"], "metadata": {"file_path": "docs\\python\\www.python.org_3_6.txt", "file_name": "www.python.org_3_6.txt", "file_type": "text/plain", "file_size": 5130, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d93ee76e-26dd-460c-aac4-238384e2e80e": {"node_ids": ["eed80f96-461c-4386-af0c-6eb2682de7be", "11d98ef4-ee93-436e-ab13-2007cdb77cfc"], "metadata": {"file_path": "docs\\python\\www.python.org_3_7.txt", "file_name": "www.python.org_3_7.txt", "file_type": "text/plain", "file_size": 5049, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "bc0a671b-1618-4355-b357-9f3655fa79ce": {"node_ids": ["92492932-e6f8-4bef-aad6-0432c13c67e2", "702a4c63-a2d9-42fc-9917-d2d1c6fceefd"], "metadata": {"file_path": "docs\\python\\www.python.org_3_8.txt", "file_name": "www.python.org_3_8.txt", "file_type": "text/plain", "file_size": 5243, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "d971507c-638d-448a-8b92-f29b8ac01662": {"node_ids": ["f55553d2-c76e-4d17-9b47-744da997cc89", "96be2371-d6dc-4dea-acd4-9fc3d1ef0a30", "e2b33092-70c2-4ba5-854e-cbcd8bdee4a5"], "metadata": {"file_path": "docs\\python\\www.python.org_3_9.txt", "file_name": "www.python.org_3_9.txt", "file_type": "text/plain", "file_size": 5223, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "6bb0c0e2-4d01-48db-968e-91e6fdca5c8f": {"node_ids": ["e073011d-9cb5-4948-a618-4284719defb4"], "metadata": {"file_path": "docs\\python\\www.pythoncheatsheet.org_39_0.txt", "file_name": "www.pythoncheatsheet.org_39_0.txt", "file_type": "text/plain", "file_size": 907, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "e84f2b0a-23e4-4770-8a83-9a10fbb027c8": {"node_ids": ["bc388c01-d4e4-4d9b-b305-55fa141768d4"], "metadata": {"file_path": "docs\\python\\www.pythonforbeginners.com_12_0.txt", "file_name": "www.pythonforbeginners.com_12_0.txt", "file_type": "text/plain", "file_size": 2393, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "f4dc8719-f6c9-4c98-9be7-2eaa551bb010": {"node_ids": ["f7b912e5-1be7-46c0-b791-cbb28481df38"], "metadata": {"file_path": "docs\\python\\www.tensorflow.org_47_0.txt", "file_name": "www.tensorflow.org_47_0.txt", "file_type": "text/plain", "file_size": 4198, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "f55fe5f0-9ada-41bb-8c41-348cc954ac47": {"node_ids": ["59c6c403-c7bf-4ead-8650-59dbf0b21481"], "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_0.txt", "file_name": "www.tutorialspoint.com_5_0.txt", "file_type": "text/plain", "file_size": 4984, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "bc6a9f90-1aa9-48a3-94b1-7d0e413126e6": {"node_ids": ["b21d430a-50a9-484a-8d5e-ca8edf5e2dca"], "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_1.txt", "file_name": "www.tutorialspoint.com_5_1.txt", "file_type": "text/plain", "file_size": 5269, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "1de701fb-4a0b-4e5c-9cac-5a575e7b2de1": {"node_ids": ["01b05f41-3a77-48b0-82e7-93e4b7876d24"], "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_2.txt", "file_name": "www.tutorialspoint.com_5_2.txt", "file_type": "text/plain", "file_size": 5123, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "a91b38b1-5bbc-4741-836c-792c49037ef6": {"node_ids": ["c7b56209-d4a7-43d4-b133-74c488a8d4c6"], "metadata": {"file_path": "docs\\python\\www.tutorialspoint.com_5_3.txt", "file_name": "www.tutorialspoint.com_5_3.txt", "file_type": "text/plain", "file_size": 1199, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "18e4b820-2746-40d8-92bc-cff9e8885d3d": {"node_ids": ["e1320bb9-1c0f-4293-b1a9-8ecc8a1201c5"], "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_0.txt", "file_name": "www.w3schools.com_9_0.txt", "file_type": "text/plain", "file_size": 5473, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}, "49565e20-156d-4771-9162-e6eb2601c0ec": {"node_ids": ["f0cf30fe-9306-4ca9-aac1-faa80912d8c6"], "metadata": {"file_path": "docs\\python\\www.w3schools.com_9_1.txt", "file_name": "www.w3schools.com_9_1.txt", "file_type": "text/plain", "file_size": 2063, "creation_date": "2025-05-26", "last_modified_date": "2025-05-26", "last_accessed_date": "2025-05-26"}}}}